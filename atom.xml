<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Poetry&#39;s Blog</title>
  
  <subtitle>Choose a gesture to allow yourself to live irreplaceable.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.poetries.top/"/>
  <updated>2018-08-27T04:06:20.130Z</updated>
  <id>http://blog.poetries.top/</id>
  
  <author>
    <name>Poetry</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue过滤器（八）</title>
    <link href="http://blog.poetries.top/2018/08/27/vue-filters/"/>
    <id>http://blog.poetries.top/2018/08/27/vue-filters/</id>
    <published>2018-08-27T02:20:32.000Z</published>
    <updated>2018-08-27T04:06:20.130Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、全局过滤器"><a href="#一、全局过滤器" class="headerlink" title="一、全局过滤器"></a>一、全局过滤器</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个参数表示：过滤器的名称</span></span><br><span class="line"><span class="comment">// 第二个参数表示：函数，使用过滤器的时候，这个函数中的代码会被执行</span></span><br><span class="line">Vue.filter(<span class="string">'filterName'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// value 表示要过滤的内容</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>例子</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Vue.filter(<span class="string">'date'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">input, format = <span class="string">'yyyy-MM-dd hh:mm:ss'</span>）&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">      var o = &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="string">"M+"</span>: input.getMonth(</span>) + 1, //月份 </span></span><br><span class="line"><span class="function">        "<span class="title">d</span>+": <span class="title">input</span>.<span class="title">getDate</span>(<span class="params"></span>), //日 </span></span><br><span class="line"><span class="function">        "<span class="title">h</span>+": <span class="title">input</span>.<span class="title">getHours</span>(<span class="params"></span>), //小时 </span></span><br><span class="line"><span class="function">        "<span class="title">m</span>+": <span class="title">input</span>.<span class="title">getMinutes</span>(<span class="params"></span>), //分 </span></span><br><span class="line"><span class="function">        "<span class="title">s</span>+": <span class="title">input</span>.<span class="title">getSeconds</span>(<span class="params"></span>), //秒 </span></span><br><span class="line"><span class="function">        "<span class="title">q</span>+": <span class="title">Math</span>.<span class="title">floor</span>(<span class="params">(input.getMonth(</span>) + 3) / 3), //季度 </span></span><br><span class="line"><span class="function">        "<span class="title">S</span>": <span class="title">input</span>.<span class="title">getMilliseconds</span>(<span class="params"></span>) //毫秒 </span></span><br><span class="line"><span class="function">      &#125;;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">      <span class="title">if</span> (<span class="params"><span class="regexp">/(y+)/</span>.test(format</span>)) <span class="title">format</span> = <span class="title">format</span>.<span class="title">replace</span>(<span class="params">RegExp.$<span class="number">1</span>, (input.getFullYear(</span>) + "").<span class="title">substr</span>(<span class="params"><span class="number">4</span> - RegExp.$<span class="number">1.</span>length</span>));</span></span><br><span class="line"><span class="function">      // 不够2位的前面补0</span></span><br><span class="line"><span class="function">      <span class="title">for</span> (<span class="params">var k in o</span>)</span></span><br><span class="line"><span class="function">        <span class="title">if</span> (<span class="params">new RegExp(<span class="string">"("</span> + k + <span class="string">")"</span></span>).<span class="title">test</span>(<span class="params">format</span>)) </span></span><br><span class="line"><span class="function">        <span class="title">format</span> = <span class="title">format</span>.<span class="title">replace</span>(<span class="params">RegExp.$<span class="number">1</span>, (RegExp.$<span class="number">1.</span>length == <span class="number">1</span></span>) ? (<span class="params">o[k]</span>) : (<span class="params">(<span class="string">"00"</span> + o[k]</span>).<span class="title">substr</span>(<span class="params">(<span class="string">""</span> + o[k]</span>).<span class="title">length</span>)));</span></span><br><span class="line"><span class="function">      <span class="title">return</span> <span class="title">format</span>;</span></span><br><span class="line"><span class="function">    &#125;)</span></span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;item.time | date('yyyy-MM-dd hh:mm:ss')&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>一个项目中，可能要用到很多过滤器来处理数据，多个组件公用的，可以注册全局过滤器。单个组件使用的，就挂载到实例<code>filters</code>中。项目做的多了以后，可以整理一套常用的<code>filters</code>，不用反复的写。比如：时间等各种操作，数据格式转化，单位换算，部分数据的<code>md5</code>加密等…</p></blockquote><p><strong>创建一个filters专门放各种过滤器</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-0bab828b656d1753.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>filter.js</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-2fd4231409acdea4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p> main.js</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-631dabdbf85a1bd8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>页面上直接用 ’｜过滤器名‘ 即可</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-0941a212212fa3aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>或者直接在<code>main.js</code>中直接自定义全局过滤器</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-0efefc41d3b8e530.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="二、局部过滤器"><a href="#二、局部过滤器" class="headerlink" title="二、局部过滤器"></a>二、局部过滤器</h2><blockquote><p>在某一个vue实例的内创建的，只在当前实例中起作用</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data:&#123;</span><br><span class="line">      </span><br><span class="line">  &#125;,</span><br><span class="line">   <span class="comment">// 通过 filters 属性创建局部过滤器</span></span><br><span class="line">   <span class="comment">// 注意：此处为 filters</span></span><br><span class="line">  filters: &#123;</span><br><span class="line">    filterName: <span class="function"><span class="keyword">function</span>(<span class="params">value, format</span>) </span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、全局过滤器&quot;&gt;&lt;a href=&quot;#一、全局过滤器&quot; class=&quot;headerlink&quot; title=&quot;一、全局过滤器&quot;&gt;&lt;/a&gt;一、全局过滤器&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="http://blog.poetries.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue组件（九)</title>
    <link href="http://blog.poetries.top/2018/08/27/vue-component/"/>
    <id>http://blog.poetries.top/2018/08/27/vue-component/</id>
    <published>2018-08-27T02:20:32.000Z</published>
    <updated>2018-08-27T04:06:20.130Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、组件的基本使用"><a href="#一、组件的基本使用" class="headerlink" title="一、组件的基本使用"></a>一、组件的基本使用</h2><h3 id="1-1-注册组件"><a href="#1-1-注册组件" class="headerlink" title="1.1 注册组件"></a>1.1 注册组件</h3><blockquote><p>注册组件就是利用<code>Vue.component()</code>方法，先传入一个自定义组件的名字，然后传入这个组件的配置</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'mycomponent'</span>,&#123;</span><br><span class="line">    template: <span class="string">`&lt;div&gt;这是一个自定义组件&lt;/div&gt;`</span>,</span><br><span class="line">    data () &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        message: <span class="string">'hello world'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><blockquote><p>如上方式，就已经创建了一个自定义组件，然后就可以在Vue实例挂在的DOM元素中使用它</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mycomponent</span>&gt;</span><span class="tag">&lt;/<span class="name">mycomponent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    components: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="string">'my-component'</span>: &#123;</span></span><br><span class="line"><span class="xml">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span>这是一个局部的自定义组件，只能在当前Vue实例中使用<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>直接使用<code>Vue.component()</code>创建的组件，所有的Vue实例都可以使用。还可以在某个Vue实例中注册只有自己能使用的组件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      <span class="string">'my-component'</span>: &#123;</span><br><span class="line">        template: <span class="string">`&lt;div&gt;这是一个局部的自定义组件，只能在当前Vue实例中使用&lt;/div&gt;`</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h3 id="1-2-模板的要求"><a href="#1-2-模板的要求" class="headerlink" title="1.2 模板的要求"></a>1.2 模板的要求</h3><blockquote><p>注意：组件的模板只能有一个根元素。下面的情况是不允许的</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">template: `&lt;div&gt;这是一个局部的自定义组件，只能在当前Vue实例中使用&lt;/div&gt;</span><br><span class="line">            &lt;button&gt;hello&lt;/button&gt;`,</span><br></pre></td></tr></table></figure><h3 id="1-3-组件中的data必须是函数"><a href="#1-3-组件中的data必须是函数" class="headerlink" title="1.3 组件中的data必须是函数"></a>1.3 组件中的data必须是函数</h3><ul><li>可以看出，注册组件时传入的配置和创建Vue实例差不多，但也有不同，其中一个就是<code>data</code>属性必须是一个函数</li><li>这是因为如果像<code>Vue</code>实例那样，传入一个对象，由于JS中对象类型的变量实际上保存的是对象的引用，所以当存在多个这样的组件时，会共享数据，导致一个组件中数据的改变会引起其他组件数据的改变。</li><li>而使用一个返回对象的函数，每次使用组件都会创建一个新的对象，这样就不会出现共享数据的问题来了</li></ul><h3 id="1-4-关于DOM模板的解析"><a href="#1-4-关于DOM模板的解析" class="headerlink" title="1.4 关于DOM模板的解析"></a>1.4 关于DOM模板的解析</h3><blockquote><p>当使用 DOM 作为模版时 (例如，将 el 选项挂载到一个已存在的元素上), 你会受到 HTML 的一些限制，因为 Vue 只有在浏览器解析和标准化 HTML 后才能获取模板内容。尤其像这些元素 <code>&lt;ul&gt;</code>，<code>&lt;ol&gt;</code>，<code>&lt;table&gt;</code>，<code>&lt;select&gt;</code> 限制了能被它包裹的元素，而一些像 <code>&lt;option&gt;</code> 这样的元素只能出现在某些其它元素内部</p></blockquote><ul><li>在自定义组件中使用这些受限制的元素时会导致一些问题，例如</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-row</span>&gt;</span>...<span class="tag">&lt;/<span class="name">my-row</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>自定义组件 <code>&lt;my-row&gt;</code> 被认为是无效的内容，因此在渲染的时候会导致错误。这时应使用特殊的 <code>is</code> 属性</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span> <span class="attr">is</span>=<span class="string">"my-row"</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>也就是说，标准HTML中，一些元素中只能放置特定的子元素，另一些元素只能存在于特定的父元素中。比如<code>table</code>中不能放置<code>div</code>，<code>tr</code>的父元素不能<code>div</code>等。所以，当使用自定义标签时，标签名还是那些标签的名字，但是可以在标签的<code>is</code>属性中填写自定义组件的名字</p></blockquote><p><strong>应当注意，如果您使用来自以下来源之一的字符串模板，这些限制将不适用</strong>：</p><ul><li><code>&lt;script type=&quot;text/x-template&quot;&gt;</code></li><li><code>JavaScript</code> 内联模版字符串</li><li><code>.vue</code> 组件</li></ul><blockquote><p>一般情况下，只有单文件组件<code>.vue</code>可以忽略这种情况</p></blockquote><h2 id="二、组件的属性和事件"><a href="#二、组件的属性和事件" class="headerlink" title="二、组件的属性和事件"></a>二、组件的属性和事件</h2><blockquote><p>在<code>html</code>中使用元素，会有一些属性，如<code>class</code>,<code>id</code>，还可以绑定事件，自定义组件也是可以的。当在一个组件中，使用了其他自定义组件时，就会利用子组件的属性和事件来和父组件进行数据交流</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-a057513f8294a129.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li>父子组件之间的通信就是 <code>props down</code>,<code>events up</code>，父组件通过属性<code>props</code>向下传递数据给子组件，子组件通过 事件<code>events</code> 给父组件发送消息。</li><li>比如，子组件需要某个数据，就在内部定义一个prop属性，然后父组件就像给<code>html</code>元素指定特性值一样，把自己的<code>data</code>属性传递给子组件的这个属性。</li><li>而当子组件内部发生了什么事情的时候，就通过自定义事件来把这个事情涉及到的数据暴露出来，供父组件处理</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-bind:foo</span>=<span class="string">"baz"</span> <span class="attr">v-on:event-a</span>=<span class="string">"doThis(arg1,...arg2)"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>foo</code>是<code>&lt;my-component&gt;</code>组件内部定义的一个<code>prop</code>属性，<code>baz</code>是父组件的一个<code>data</code>属性，</li><li><code>event-a</code>是子组件定义的一个事件，<code>doThis</code>是父组件的一个方法</li></ul><p><strong>过程就是这样</strong></p><ul><li>父组件把<code>baz</code>数据通过<code>prop</code>传递给子组件的<code>foo</code>；</li><li>子组件内部得到<code>foo</code>的值，就可以进行相应的操作；</li><li>当子组件内部发生了一些变化，希望父组件能知道时，就利用代码触发<code>event-a</code>事件，把一些数据发送出去</li><li>父组件把这个事件处理器绑定为<code>doThis</code>方法，子组件发送的数据，就作为<code>doThis</code>方法的参数被传进来</li><li>然后父组件就可以根据这些数据，进行相应的操作</li></ul><h2 id="三、属性Props"><a href="#三、属性Props" class="headerlink" title="三、属性Props"></a>三、属性Props</h2><blockquote><p>Vue组件通过<code>props</code>属性来声明一个自己的属性，然后父组件就可以往里面传递数据</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'mycomponent'</span>,&#123;</span><br><span class="line">    template: <span class="string">'&lt;div&gt;这是一个自定义组件,父组件传给我的内容是：&#123;&#123;myMessage&#125;&#125;&lt;/div&gt;'</span>,</span><br><span class="line">    props: [<span class="string">'myMessage'</span>],</span><br><span class="line">    data () &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        message: <span class="string">'hello world'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><blockquote><p>调用该组件</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mycomponent</span> <span class="attr">my-message</span>=<span class="string">"hello"</span>&gt;</span><span class="tag">&lt;/<span class="name">mycomponent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong>，由于<code>HTML</code>特性是不区分大小写的，所以传递属性值时，<code>myMessage</code>应该转换成 <code>kebab-case</code> (短横线隔开式)<code>my-message=&quot;hello&quot;</code></li></ul><h3 id="3-1-v-bind绑定属性值"><a href="#3-1-v-bind绑定属性值" class="headerlink" title="3.1 v-bind绑定属性值"></a>3.1 v-bind绑定属性值</h3><ul><li>一般情况下，使用<code>v-bind</code>给元素特性(attribute)传递值时，<code>Vue</code>会将<code>&quot;&quot;</code>中的内容当做一个表达式</li><li>用<code>v-bind:class</code>和<code>class</code>传入正常的类名，效果是一样的，因为对于这两个特性，<code>Vue</code>采用了合并而不是替换的原则</li></ul><h3 id="3-2-动态绑定特性值"><a href="#3-2-动态绑定特性值" class="headerlink" title="3.2 动态绑定特性值"></a>3.2 动态绑定特性值</h3><blockquote><p>想要把父组件的属性绑定到子组件，应该使用<code>v-bind</code>，这样，父组件中数据改变时能反映到子组件。<br>注意，根据父组件传递给子组件的属性类型的不同，当在子组件中更改这个属性时，会有以下两种情况</p></blockquote><ul><li>当父组件传递的属性是引用类型时，在子组件中更改相应的属性会导致父组件相应属性的更改</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app2"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span>&gt;</span>这是父组件的parentArray：&#123;&#123;parentArray&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">my-component</span> <span class="attr">:child-array</span>=<span class="string">"parentArray"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">     Vue.component(<span class="string">'my-component'</span>, &#123;</span></span><br><span class="line"><span class="undefined">       template: `</span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">div</span>&gt;</span>这是接收了父组件传递值的子组件的childArray: &#123;&#123;childArray&#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"changeArray"</span>&gt;</span></span></span><br><span class="line"><span class="xml">           点击我改变父元素的parentArray<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line"><span class="javascript">       props: [<span class="string">'childArray'</span>],</span></span><br><span class="line"><span class="undefined">       data () &#123;</span></span><br><span class="line"><span class="javascript">         <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">           counter: 1</span></span><br><span class="line"><span class="undefined">         &#125;</span></span><br><span class="line"><span class="undefined">       &#125;,</span></span><br><span class="line"><span class="undefined">       methods: &#123;</span></span><br><span class="line"><span class="undefined">         changeArray () &#123;</span></span><br><span class="line"><span class="javascript">           <span class="keyword">this</span>.childArray.push(<span class="keyword">this</span>.counter++)</span></span><br><span class="line"><span class="undefined">         &#125;</span></span><br><span class="line"><span class="undefined">       &#125;</span></span><br><span class="line"><span class="undefined">     &#125;)</span></span><br><span class="line"><span class="javascript">     <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">       el: <span class="string">'#app2'</span>,</span></span><br><span class="line"><span class="undefined">       data: &#123;</span></span><br><span class="line"><span class="undefined">         parentArray: []</span></span><br><span class="line"><span class="undefined">       &#125;</span></span><br><span class="line"><span class="undefined">     &#125;)</span></span><br><span class="line"><span class="undefined">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>当父组件传递值为基本类型时，在子组件中更改这个属性会报错。正确的做法是，在父组件中绑定属性值时，加上<code>.sync</code>修饰符</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">:child-array.sync</span>=<span class="string">"parentArray"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>然后在子组件中改变相应的属性</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    changeArray () &#123;</span><br><span class="line">      <span class="keyword">this</span>.counter++</span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">'update:childArray'</span>, <span class="keyword">this</span>.counter)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-子组件希望对传入的prop进行操作"><a href="#3-3-子组件希望对传入的prop进行操作" class="headerlink" title="3.3 子组件希望对传入的prop进行操作"></a>3.3 子组件希望对传入的prop进行操作</h3><blockquote><p>一般来说，是不建议在子组件中对父组件中传递来的属性进行操作的。如果真的有这种需求,可以这样:</p></blockquote><ul><li>父组件传递了一个基本类型值，那么可以在子组件中创建一个新的属性，并以传递进来的值进行初始化，之后就可以操作这个新的属性了</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">props: [<span class="string">'initialCounter'</span>],</span><br><span class="line">data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">counter</span>: <span class="keyword">this</span>.initialCounter &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>父组件传递了一个引用类型值，为了避免更改父组件中相应的数据，最好是对引用类型进行复制。复杂的情况，肯定应该是深复制。</li></ul><h3 id="3-4-给子组件传递正确类型的值"><a href="#3-4-给子组件传递正确类型的值" class="headerlink" title="3.4 给子组件传递正确类型的值"></a>3.4 给子组件传递正确类型的值</h3><blockquote><p>静态的给子组件的特性传递值，它都会把他当做一个字符串</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 传递了一个字符串 &quot;1&quot; --&gt;</span><br><span class="line">&lt;comp some-prop=&quot;1&quot;&gt;&lt;/comp&gt;</span><br></pre></td></tr></table></figure><blockquote><p>子组件中，特性的值是字符串 “1” 而不是 <code>number</code> 1。如果想传递正确的数值，应该使用<code>v-bind</code>传递，这样就能把传递的值当做一个表达式来处理，而不是字符串</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 传递实际的 number 1 --&gt;</span><br><span class="line">&lt;comp v-bind:some-prop=&quot;1&quot;&gt;&lt;/comp&gt;</span><br></pre></td></tr></table></figure><h2 id="四、Prop验证"><a href="#四、Prop验证" class="headerlink" title="四、Prop验证"></a>四、Prop验证</h2><blockquote><p>我们可以给组件的<code>props</code>属性添加验证，当传入的数据不符合要求时，<code>Vue</code>会发出警告</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'example'</span>, &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="comment">// 基础类型检测 (`null` 意思是任何类型都可以)</span></span><br><span class="line">    propA: <span class="built_in">Number</span>,</span><br><span class="line">    <span class="comment">// 多种类型</span></span><br><span class="line">    propB: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span><br><span class="line">    <span class="comment">// 必传且是字符串</span></span><br><span class="line">    propC: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 数字，有默认值</span></span><br><span class="line">    propD: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="number">100</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 数组/对象的默认值应当由一个工厂函数返回</span></span><br><span class="line">    propE: &#123;</span><br><span class="line">      type: <span class="built_in">Object</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">message</span>: <span class="string">'hello'</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 自定义验证函数</span></span><br><span class="line">    propF: &#123;</span><br><span class="line">      validator: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value &gt; <span class="number">10</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>type 可以是下面原生构造器</strong>：</p><ul><li><code>String</code></li><li><code>Number</code></li><li><code>Boolean</code></li><li><code>Function</code></li><li><code>Object</code></li><li><code>Array</code></li><li><code>Symbol</code></li><li><code>type</code>也可以是一个自定义构造器函数，使用 <code>instanceof</code> 检测</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义Person构造器</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">  &#125;</span><br><span class="line">  Vue.component(<span class="string">'my-component'</span>, &#123;</span><br><span class="line">    template: <span class="string">`&lt;div&gt;名字: &#123;&#123; person-prop.name &#125;&#125;， 年龄： &#123;&#123; person-prop.age &#125;&#125; &lt;/div&gt;`</span>,</span><br><span class="line">    props: &#123;</span><br><span class="line">      person-prop: &#123;</span><br><span class="line">        type: Person     <span class="comment">// 指定类型</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app2'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      person: <span class="number">2</span>        <span class="comment">// 传入Number类型会报错</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p><strong>非Prop类型的属性</strong></p><blockquote><p>也可以像在html标签中添加<code>data-</code>开头的自定义属性一样，给自定义组件添加任意的属性。而不仅限于<code>data-*</code>形式，这样做的话，Vue会把这个属性放在自定义组件的根元素上。一个自定义组件的模板只能有一个根元素</p></blockquote><p><strong>覆盖非Prop属性</strong></p><blockquote><p>如果父组件向子组件的非<code>prop</code>属性传递了值，那么这个值会覆盖子组件模板中的特性</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component2</span> <span class="attr">att</span>=<span class="string">"helloParent"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">'my-component2'</span>, &#123;</span></span><br><span class="line"><span class="xml">    template: `<span class="tag">&lt;<span class="name">div</span> <span class="attr">att</span>=<span class="string">"helloChild"</span>&gt;</span>子组件原有的特性被覆盖了<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app3'</span></span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>上面渲染的结果是，<code>div</code>的<code>att</code>属性是<code>helloParent</code>。</li><li>注意：前面已经提到过，覆盖原则对于<code>class</code>和<code>style</code>不适用,而是采用了合并(<code>merge</code>)的原则</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component2</span> <span class="attr">att</span>=<span class="string">"helloParent"</span> <span class="attr">class</span>=<span class="string">"class2"</span> <span class="attr">style</span>=<span class="string">"color: red;"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">'my-component2'</span>, &#123;</span></span><br><span class="line"><span class="xml">    template: `<span class="tag">&lt;<span class="name">div</span> <span class="attr">att</span>=<span class="string">"helloChild"</span> <span class="attr">class</span>=<span class="string">"class1"</span> <span class="attr">style</span>=<span class="string">"background: yellow;"</span>&gt;</span>子组件原有的特性被覆盖了<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app3'</span></span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>上面的渲染结果是，<code>div</code>的类名是<code>class1 class2</code>，行内样式是<code>color:red; background:yellow;</code></p></blockquote><h2 id="五、自定义事件"><a href="#五、自定义事件" class="headerlink" title="五、自定义事件"></a>五、自定义事件</h2><blockquote><p>通过<code>prop</code>属性，父组件可以向子组件传递数据，而子组件的自定义事件就是用来将内部的数据报告给父组件的</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component2</span> <span class="attr">v-on:myclick</span>=<span class="string">"onClick"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">'my-component2'</span>, &#123;</span></span><br><span class="line"><span class="xml">    template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"childClick"</span>&gt;</span>点击我触发自定义事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="undefined">      childClick () &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$emit(<span class="string">'myclick'</span>, <span class="string">'这是我暴露出去的数据'</span>, <span class="string">'这是我暴露出去的数据2'</span>)</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app3'</span>,</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="undefined">      onClick () &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>子组件在自己的方法中将自定义事件以及需要发出的数据通过以下代码发送出去</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$emit(&apos;myclick&apos;, &apos;这是我暴露出去的数据&apos;, &apos;这是我暴露出去的数据2&apos;)</span><br></pre></td></tr></table></figure><ul><li>第一个参数是自定义事件的名字</li><li>后面的参数是依次想要发送出去的数据</li></ul><blockquote><p>父组件利用<code>v-on</code>为事件绑定处理器</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-component2 v-on:myclick=&quot;onClick&quot;&gt;&lt;/my-component2&gt;</span><br></pre></td></tr></table></figure><h3 id="5-1-绑定原生事件"><a href="#5-1-绑定原生事件" class="headerlink" title="5.1 绑定原生事件"></a>5.1 绑定原生事件</h3><blockquote><p>如果想在某个组件的根元素上监听一个原生事件。可以使用 <code>.native</code>修饰 <code>v-on</code></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-on:click.native</span>=<span class="string">"doTheThing"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-2-探究v-model"><a href="#5-2-探究v-model" class="headerlink" title="5.2 探究v-model"></a>5.2 探究v-model</h3><blockquote><p><code>v-model</code>可以对表单控件实现数据的双向绑定，它的原理就是利用了绑定属性和事件来实现的。比如<code>input</code>控件。不使用<code>v-model</code>，可以这样实现数据的双向绑定</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app4"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-bind:value</span>=<span class="string">"text"</span> <span class="attr">v-on:input</span>=<span class="string">"changeValue($event.target.value)"</span>&gt;</span></span><br><span class="line">    &#123;&#123;text&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app4'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">          text: <span class="string">'444'</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="undefined">          changeValue (value) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.text = value</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>上面的代码同样实现了数据的双向绑定。其本质就是:</p></blockquote><ul><li>把<code>input</code>的<code>value</code>特性绑定到<code>Vue</code>实例的属性<code>text</code>上，<code>text</code>改变，<code>input</code>中的内容也会改变</li><li>然后把表单的<code>input</code>事件处理函数设置为<code>Vue</code>实例的一个方法，这个方法会根据输入参数改变<code>Vue</code>中<code>text</code>的值<br>相应的，在input中输入内容时，触发了<code>input</code>事件，把<code>event.target.value</code>传给这个方法，最后就实现了改变绑定的数据的效果。</li><li>而<code>v-model</code>就是上面这种方式的语法糖，也就是把上面的写法封装了一下，方便我们使用</li></ul><h3 id="5-3-使用自定义事件创建自定义的表单输入组件"><a href="#5-3-使用自定义事件创建自定义的表单输入组件" class="headerlink" title="5.3 使用自定义事件创建自定义的表单输入组件"></a>5.3 使用自定义事件创建自定义的表单输入组件</h3><blockquote><p>理解了<code>v-model</code>的内幕，也就可以把这个效果用在自定义表单组件上了。来实现一个简单的只能输入hello的表单输入组件</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app5"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component3</span> <span class="attr">v-model</span>=<span class="string">"hello"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;hello&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">'my-component3'</span>, &#123;</span></span><br><span class="line"><span class="xml">    template: `<span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">"input"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">:value</span>=<span class="string">"value"</span> @<span class="attr">input</span>=<span class="string">"checkInput($event.target.value)"</span>&gt;</span>`,</span></span><br><span class="line"><span class="javascript">    props: [<span class="string">'value'</span>],</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="undefined">      checkInput (value) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> hello = <span class="string">'hello'</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (!hello.includes(value)) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.$emit(<span class="string">'input'</span>, hello)</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.$refs.input.value = hello</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.$emit(<span class="string">'input'</span>, value)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app5'</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="javascript">      hello: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="六、动态组件"><a href="#六、动态组件" class="headerlink" title="六、动态组件"></a>六、动态组件</h2><blockquote><p>通过使用保留的 <code>&lt;component&gt;</code> 元素，动态地绑定到它的 <code>is</code> 特性，可以让多个组件使用同一个挂载点，并动态切换</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app6"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"currentComponent"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"home"</span>&gt;</span>home<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"post"</span>&gt;</span>post<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"about"</span>&gt;</span>about<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"currentComponent"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app6'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">          currentComponent: <span class="string">'home'</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        components: &#123;</span></span><br><span class="line"><span class="undefined">          home: &#123;</span></span><br><span class="line"><span class="xml">            template: `<span class="tag">&lt;<span class="name">header</span>&gt;</span>这是home组件<span class="tag">&lt;/<span class="name">header</span>&gt;</span>`</span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="undefined">          post: &#123;</span></span><br><span class="line"><span class="xml">            template: `<span class="tag">&lt;<span class="name">header</span>&gt;</span>这是post组件<span class="tag">&lt;/<span class="name">header</span>&gt;</span>`</span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="undefined">          about: &#123;</span></span><br><span class="line"><span class="xml">            template: `<span class="tag">&lt;<span class="name">header</span>&gt;</span>这是about组件<span class="tag">&lt;/<span class="name">header</span>&gt;</span>`</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>保留切换出去的组件，避免重新渲染</strong></p><blockquote><p>如果把切换出去的组件保留在内存中，可以保留它的状态或避免重新渲染。为此可以添加一个 <code>keep-alive</code> 指令参数</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"currentComponent"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 非活动组件将被缓存！ --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="七、使用slot分发内容"><a href="#七、使用slot分发内容" class="headerlink" title="七、使用slot分发内容"></a>七、使用slot分发内容</h2><h3 id="7-1-单个slot"><a href="#7-1-单个slot" class="headerlink" title="7.1 单个slot"></a>7.1 单个slot</h3><blockquote><p>很多组件的使用方式是这样的：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;component&gt;&lt;/component&gt;</span><br></pre></td></tr></table></figure><ul><li>也就是说组件中是空的，没有放置任何文本或元素。但是原生的html元素都是可以进行嵌套的，<code>div</code>里面放<code>table</code>什么的。自定义组件开闭标签之间也可以放置内容，不过需要在定义组件时使用<code>slot</code>。</li><li><code>slot</code>相当于子组件设置了一个地方，如果在调用它的时候，往它的开闭标签之间放了东西，那么它就把这些东西放到<code>slot</code>中。</li><li>当子组件中没有<code>slot</code>时，父组件放在子组件标签内的东西将被丢弃；</li><li>子组件的<code>slot</code>标签内可以放置内容，当父组件没有放置内容在子组件标签内时，slot中的内容会渲染出来</li></ul><p>子组件的模板:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是子组件的标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span></span><br><span class="line">    只有在没有要分发的内容时才会显示。</span><br><span class="line">  <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父组件模板：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是父组件的标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一些初始内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>渲染结果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是父组件的标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是子组件的标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一些初始内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-2-带名称的slot"><a href="#7-2-带名称的slot" class="headerlink" title="7.2 带名称的slot"></a>7.2 带名称的slot</h3><ul><li><code>slot</code>可以有很多个。那么子组件对于父组件放置的多余的内容如何放到各个<code>slot</code>中呢？方法就是子组件给每个<code>slot</code>起一个名字<code>name</code>，父组件放置多余的元素时，给每个元素的<code>slot</code>属性分配一个代表<code>slot</code>的名字。到时候，多余的内容就会根据自己的<code>slot</code>属性去找具有对应名字的<code>slot</code>元素。</li></ul><p><strong>注意</strong>：</p><ul><li>子组件可以有一个匿名的<code>slot</code>，当分发的多余内容找不到对应的<code>slot</code>时，就会进入这里面<br>如果子组件没有匿名的<code>slot</code>，当分发的多余内容找不到对应的<code>slot</code>时，就会被丢弃</li></ul><p>例如，假定我们有一个 <code>app-layout</code>组件，它的模板为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"footer"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父组件模版：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">slot</span>=<span class="string">"header"</span>&gt;</span>这里可能是一个页面标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容的一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>另一个主要段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">"footer"</span>&gt;</span>这里有一些联系信息<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">app-layout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>渲染结果为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这里可能是一个页面标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容的一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>另一个主要段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里有一些联系信息<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="八、组件通信"><a href="#八、组件通信" class="headerlink" title="八、组件通信"></a>八、组件通信</h2><blockquote><p>在 Vue.js 中，父子组件的关系可以总结为 <code>props down</code>, <code>events up</code></p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-a057513f8294a129.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>父组件通过 <code>props</code> 向下传递数据给子组件，子组件通过 <code>events</code> 给父组件发送消息</p></blockquote><h2 id="8-1-父与子"><a href="#8-1-父与子" class="headerlink" title="8.1 父与子"></a>8.1 父与子</h2><blockquote><p>父组件是通过<code>props</code>属性给子组件通信的来看下代码</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;child :child-com=&quot;content&quot;&gt;&lt;/child&gt; //注意这里用驼峰写法哦</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        content:&apos;sichaoyun&apos;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>子组件通过props来接受数据</strong></p><blockquote><p>第一种方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">props: [<span class="string">'childCom'</span>]</span><br></pre></td></tr></table></figure><blockquote><p>第二种方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">    childCom: <span class="built_in">String</span> <span class="comment">// 这里指定了字符串类型，如果类型不一致会警告哦</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>第三种方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">    childCom: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="string">'sichaoyun'</span> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-2-子与父"><a href="#8-2-子与父" class="headerlink" title="8.2 子与父"></a>8.2 子与父</h3><blockquote><p><code>vue2.0</code>只允许单向数据传递，我们通过出发事件来改变组件的数据</p></blockquote><p>子组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">"open"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="undefined">       open() &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.$emit(<span class="string">'showbox'</span>,<span class="string">'the msg'</span>); <span class="comment">//触发showbox方法，'the msg'为向父组件传递的数据</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">child</span> @<span class="attr">showbox</span>=<span class="string">"toshow"</span> <span class="attr">:msg</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span> //监听子组件触发的showbox事件,然后调用toshow方法</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="undefined">        toshow(msg) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.msg = msg;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-3-兄弟组件之间的通信"><a href="#8-3-兄弟组件之间的通信" class="headerlink" title="8.3 兄弟组件之间的通信"></a>8.3 兄弟组件之间的通信</h3><blockquote><p>我们可以实例化一个vue实例，相当于一个第三方</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let vm = new Vue(); //创建一个新实例</span><br></pre></td></tr></table></figure><p>组件他哥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div @click=&quot;ge&quot;&gt;&lt;/div&gt;</span><br><span class="line">methods: &#123;</span><br><span class="line">    ge() &#123;</span><br><span class="line">        vm.$emit(&apos;blur&apos;,&apos;sichaoyun&apos;); //触发事件</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>组件小弟接受大哥命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line">created() &#123;</span><br><span class="line">  vm.$on(&apos;blur&apos;, (arg) =&gt; &#123; </span><br><span class="line">        this.test= arg; // 接收</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、组件的基本使用&quot;&gt;&lt;a href=&quot;#一、组件的基本使用&quot; class=&quot;headerlink&quot; title=&quot;一、组件的基本使用&quot;&gt;&lt;/a&gt;一、组件的基本使用&lt;/h2&gt;&lt;h3 id=&quot;1-1-注册组件&quot;&gt;&lt;a href=&quot;#1-1-注册组件&quot; class=&quot;
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="http://blog.poetries.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue 表单控件与绑定（七）</title>
    <link href="http://blog.poetries.top/2018/08/27/vue-form/"/>
    <id>http://blog.poetries.top/2018/08/27/vue-form/</id>
    <published>2018-08-27T02:10:32.000Z</published>
    <updated>2018-08-27T04:06:20.130Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、文本框"><a href="#一、文本框" class="headerlink" title="一、文本框"></a>一、文本框</h2><h3 id="1-1-普通文本框"><a href="#1-1-普通文本框" class="headerlink" title="1.1 普通文本框"></a>1.1 普通文本框</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"textBox"</span> <span class="attr">placeholder</span>=<span class="string">"输入内容..."</span>&gt;</span>输入的内容：&#123;&#123; textBox &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app-1'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            textBox: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-数字文本框"><a href="#1-2-数字文本框" class="headerlink" title="1.2 数字文本框"></a>1.2 数字文本框</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.number</span>=<span class="string">"numberTextBox"</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">placeholder</span>=<span class="string">"输入内容..."</span>&gt;</span> 输入的内容：&#123;&#123; numberTextBox &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app-1'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            numberTextBox: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>.number</code>参数会强制把返回值转成<code>Number</code>类型，因为就算是<code>type=&quot;number&quot;</code>，返回的也是字符串型</p></blockquote><h3 id="1-3-多行输入框"><a href="#1-3-多行输入框" class="headerlink" title="1.3 多行输入框"></a>1.3 多行输入框</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">"multiTextBox"</span> <span class="attr">placeholder</span>=<span class="string">"输入内容..."</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>输入的内容：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"white-space:pre"</span>&gt;</span>&#123;&#123; multiTextBox &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app-1'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            multiTextBox: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>style=&quot;white-space:pre&quot;</code>表示空白会被浏览器保留。其行为方式类似 <code>HTML</code> 中的 <code>&lt;pre&gt;</code> 标签</p></blockquote><h2 id="二、复选框"><a href="#二、复选框" class="headerlink" title="二、复选框"></a>二、复选框</h2><h3 id="2-1-单个复选框"><a href="#2-1-单个复选框" class="headerlink" title="2.1 单个复选框"></a>2.1 单个复选框</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"singleCheckBox"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"checkbox"</span>&gt;</span>&#123;&#123; singleCheckBox &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app-1'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            singleCheckBox: <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-定义属性单个复选框"><a href="#2-2-定义属性单个复选框" class="headerlink" title="2.2 定义属性单个复选框"></a>2.2 定义属性单个复选框</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"customSingleCheckBox"</span> <span class="attr">v-bind:true-value</span>=<span class="string">"customTrue"</span> <span class="attr">v-bind:false-value</span>=<span class="string">"customFalse"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"checkbox"</span>&gt;</span>&#123;&#123; customSingleCheckBox &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app-1'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            customTrue: <span class="string">'真'</span>,</span></span><br><span class="line"><span class="javascript">            customFalse: <span class="string">'假'</span>,</span></span><br><span class="line"><span class="javascript">            customSingleCheckBox: <span class="string">'假'</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>v-bind:true-value</code>设置为真时的属性，<code>v-bind:false-value</code>设置为假时的属性</p></blockquote><h3 id="2-3-多个复选框"><a href="#2-3-多个复选框" class="headerlink" title="2.3 多个复选框"></a>2.3 多个复选框</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"tansea"</span> <span class="attr">value</span>=<span class="string">"TanSea"</span> <span class="attr">v-model</span>=<span class="string">"multiCheckBox"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"tansea"</span>&gt;</span>TanSea<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"google"</span> <span class="attr">value</span>=<span class="string">"Google"</span> <span class="attr">v-model</span>=<span class="string">"multiCheckBox"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"google"</span>&gt;</span>Google<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"baidu"</span> <span class="attr">value</span>=<span class="string">"Baidu"</span> <span class="attr">v-model</span>=<span class="string">"multiCheckBox"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"baidu"</span>&gt;</span>Baidu<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>选择的项：&#123;&#123; multiCheckBox &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app-1'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="undefined">            multiCheckBox: []</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、单选框"><a href="#三、单选框" class="headerlink" title="三、单选框"></a>三、单选框</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">复制代码</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"male"</span> <span class="attr">value</span>=<span class="string">"男"</span> <span class="attr">v-model</span>=<span class="string">"radioBox"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"male"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"female"</span> <span class="attr">value</span>=<span class="string">"女"</span> <span class="attr">v-model</span>=<span class="string">"radioBox"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"female"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>选择的项：&#123;&#123; radioBox &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app-1'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            radioBox: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四、下拉框"><a href="#四、下拉框" class="headerlink" title="四、下拉框"></a>四、下拉框</h2><h3 id="4-1-普通下拉框"><a href="#4-1-普通下拉框" class="headerlink" title="4.1 普通下拉框"></a>4.1 普通下拉框</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"comboBox"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>请选择一项<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>男<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>女<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>选择的项：&#123;&#123; comboBox &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app-1'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            comboBox: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-动态绑定下拉框"><a href="#4-2-动态绑定下拉框" class="headerlink" title="4.2 动态绑定下拉框"></a>4.2 动态绑定下拉框</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"dynamicComboBox"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">"optionItem in optionItems"</span> <span class="attr">v-bind:value</span>=<span class="string">"optionItem.value"</span>&gt;</span></span><br><span class="line">            &#123;&#123; optionItem.text &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>选择的项：&#123;&#123; dynamicComboBox &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app-1'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            dynamicComboBox: <span class="string">''</span>,</span></span><br><span class="line"><span class="undefined">                optionItems: [</span></span><br><span class="line"><span class="javascript">                    &#123; <span class="attr">value</span>: <span class="string">'TanSea'</span>, <span class="attr">text</span>: <span class="string">'双子宫殿'</span> &#125;,</span></span><br><span class="line"><span class="javascript">                    &#123; <span class="attr">value</span>: <span class="string">'Google'</span>, <span class="attr">text</span>: <span class="string">'谷歌搜索'</span> &#125;,</span></span><br><span class="line"><span class="javascript">                    &#123; <span class="attr">value</span>: <span class="string">'Baidu'</span>, <span class="attr">text</span>: <span class="string">'百度搜索'</span> &#125;</span></span><br><span class="line"><span class="undefined">                ]</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-3-多选列表"><a href="#4-3-多选列表" class="headerlink" title="4.3 多选列表"></a>4.3 多选列表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"multiComboBox"</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>双子宫殿<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>谷歌搜索<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>百度搜索<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>选择的项：&#123;&#123; multiComboBox &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app-1'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="undefined">            multiComboBox: []</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、文本框&quot;&gt;&lt;a href=&quot;#一、文本框&quot; class=&quot;headerlink&quot; title=&quot;一、文本框&quot;&gt;&lt;/a&gt;一、文本框&lt;/h2&gt;&lt;h3 id=&quot;1-1-普通文本框&quot;&gt;&lt;a href=&quot;#1-1-普通文本框&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="http://blog.poetries.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue事件（六）</title>
    <link href="http://blog.poetries.top/2018/08/26/vue-event/"/>
    <id>http://blog.poetries.top/2018/08/26/vue-event/</id>
    <published>2018-08-26T16:10:32.000Z</published>
    <updated>2018-08-27T04:06:20.130Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、方法传参"><a href="#一、方法传参" class="headerlink" title="一、方法传参"></a>一、方法传参</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"sayHi('你好')"</span>&gt;</span>说你好<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="comment">&lt;!--这里使用@--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"sayHi('我被点击了')"</span>&gt;</span>说我被点击了<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="comment">&lt;!--这里使用@--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> myVue = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#test'</span>,</span></span><br><span class="line"><span class="javascript">        methods: &#123;      <span class="comment">//这里使用methods</span></span></span><br><span class="line"><span class="javascript">            sayHi: <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">                alert(message)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、vue访问原生-DOM-事件"><a href="#二、vue访问原生-DOM-事件" class="headerlink" title="二、vue访问原生 DOM 事件"></a>二、vue访问原生 DOM 事件</h2><blockquote><p>用<code>$event</code>获取</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"changeColor('你好',$event)"</span>&gt;</span>点击我<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="comment">&lt;!--这里使用@--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height: 100px;width: 100px;background-color: red;"</span> @<span class="attr">mouseover</span>=<span class="string">"over('鼠标从我上面滑过',$event)"</span>&gt;</span></span><br><span class="line">    鼠标从我上面滑过试试</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">           </span><br><span class="line">            </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> myVue = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#test'</span>,</span></span><br><span class="line"><span class="javascript">        methods: &#123;      <span class="comment">//这里使用methods</span></span></span><br><span class="line"><span class="javascript">            changeColor: <span class="function"><span class="keyword">function</span> (<span class="params">message, event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(message+event);    <span class="comment">//弹出我被点击了,事件是[object MouseEvent]</span></span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="javascript">            over :<span class="function"><span class="keyword">function</span> (<span class="params">message, event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(message+event);   <span class="comment">//弹出鼠标从我上面滑过,事件是[object MouseEvent]</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、事件修饰符"><a href="#三、事件修饰符" class="headerlink" title="三、事件修饰符"></a>三、事件修饰符</h2><blockquote><p>事件修饰符有基本的6种</p></blockquote><p><strong>.stop阻止事件冒泡</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>.prevent阻止默认事件</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>.capture时间捕获（从上到下）</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.capture</span>=<span class="string">"doThis"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>.self只在元素自身回调</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">"doThat"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>.once只触发一次</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.once</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 <a href="mailto:`@click.prevent.self" target="_blank" rel="noopener">`@click.prevent.self</a><code>会阻止所有的点击，而</code>@click.self.prevent` 只会阻止元素上的点击</p></blockquote><h2 id="四、键值修饰符"><a href="#四、键值修饰符" class="headerlink" title="四、键值修饰符"></a>四、键值修饰符</h2><blockquote><p>在监听键盘事件时，我们经常需要监测常见的键值。 Vue 允许为 v-on 在监听键盘事件时添加关键修饰符</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    &#123;&#123;msg&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-on:keydown</span>=<span class="string">"ke"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">        data:&#123;</span></span><br><span class="line"><span class="javascript">            msg:<span class="string">"事件处理"</span>,</span></span><br><span class="line"><span class="undefined">            counter:0</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods:&#123;</span></span><br><span class="line"><span class="javascript">            ke:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(e.keyCode == <span class="number">13</span>)&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.msg = e.target.value;</span></span><br><span class="line"><span class="javascript">                    e.target.value = <span class="string">""</span>;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>enter</code>(回车)</li><li><code>tab</code>（tab切换）</li><li><code>delete</code> (捕获 “删除” 和 “退格” 键)</li><li><code>esc</code>（esc键）</li><li><code>space</code>（退档键）</li><li><code>up</code>（上键）</li><li><code>down</code>（下键）</li><li><code>left</code>（左键）</li><li><code>right</code>（右键）</li></ul><blockquote><p>我们也可以通过全局<code>config.keyCodes</code> 对象自定义键值修饰符别名</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.keyCodes.f1 = 112</span><br></pre></td></tr></table></figure><p>、</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、方法传参&quot;&gt;&lt;a href=&quot;#一、方法传参&quot; class=&quot;headerlink&quot; title=&quot;一、方法传参&quot;&gt;&lt;/a&gt;一、方法传参&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="http://blog.poetries.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue生命周期（五）</title>
    <link href="http://blog.poetries.top/2018/08/26/vue-lifecircle/"/>
    <id>http://blog.poetries.top/2018/08/26/vue-lifecircle/</id>
    <published>2018-08-26T09:21:32.000Z</published>
    <updated>2018-08-27T04:06:20.130Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>每个Vue实例在被创建之前都要经过一系列的初始化过程,这个过程就是vue的生命周期</p></blockquote><p><img src="https://cn.vuejs.org/images/lifecycle.png" alt=""></p><h2 id="一、生命周期钩子函数"><a href="#一、生命周期钩子函数" class="headerlink" title="一、生命周期钩子函数"></a>一、生命周期钩子函数</h2><ul><li><code>beforeCreate</code></li><li><code>created</code></li><li><code>beforeMount</code></li><li><code>mounted</code></li><li><code>beforeUpdate</code></li><li><code>updated</code></li><li><code>beforeDestroy</code></li><li><code>destroyed</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      message: <span class="string">'Vue的生命周期'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    beforeCreate: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.group(<span class="string">'------beforeCreate创建前状态------'</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span> , <span class="string">"el     : "</span> + <span class="keyword">this</span>.$el); <span class="comment">//undefined</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"data   : "</span> + <span class="keyword">this</span>.$data); <span class="comment">//undefined </span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"message: "</span> + <span class="keyword">this</span>.message) </span><br><span class="line">    &#125;,</span><br><span class="line">    created: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.group(<span class="string">'------created创建完毕状态------'</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"el     : "</span> + <span class="keyword">this</span>.$el); <span class="comment">//undefined</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"data   : "</span> + <span class="keyword">this</span>.$data); <span class="comment">//已被初始化 </span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"message: "</span> + <span class="keyword">this</span>.message); <span class="comment">//已被初始化</span></span><br><span class="line">    &#125;,</span><br><span class="line">    beforeMount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.group(<span class="string">'------beforeMount挂载前状态------'</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"el     : "</span> + (<span class="keyword">this</span>.$el)); <span class="comment">//已被初始化</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"data   : "</span> + <span class="keyword">this</span>.$data); <span class="comment">//已被初始化  </span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"message: "</span> + <span class="keyword">this</span>.message); <span class="comment">//已被初始化  </span></span><br><span class="line">    &#125;,</span><br><span class="line">    mounted: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.group(<span class="string">'------mounted 挂载结束状态------'</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"el     : "</span> + <span class="keyword">this</span>.$el); <span class="comment">//已被初始化</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);    </span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"data   : "</span> + <span class="keyword">this</span>.$data); <span class="comment">//已被初始化</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"message: "</span> + <span class="keyword">this</span>.message); <span class="comment">//已被初始化 </span></span><br><span class="line">    &#125;,</span><br><span class="line">    beforeUpdate: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.group(<span class="string">'beforeUpdate 更新前状态===============》'</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"el     : "</span> + <span class="keyword">this</span>.$el);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);   </span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"data   : "</span> + <span class="keyword">this</span>.$data); </span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"message: "</span> + <span class="keyword">this</span>.message); </span><br><span class="line">    &#125;,</span><br><span class="line">    updated: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.group(<span class="string">'updated 更新完成状态===============》'</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"el     : "</span> + <span class="keyword">this</span>.$el);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el); </span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"data   : "</span> + <span class="keyword">this</span>.$data); </span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"message: "</span> + <span class="keyword">this</span>.message); </span><br><span class="line">    &#125;,</span><br><span class="line">    beforeDestroy: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.group(<span class="string">'beforeDestroy 销毁前状态===============》'</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"el     : "</span> + <span class="keyword">this</span>.$el);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);    </span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"data   : "</span> + <span class="keyword">this</span>.$data); </span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"message: "</span> + <span class="keyword">this</span>.message); </span><br><span class="line">    &#125;,</span><br><span class="line">    destroyed: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.group(<span class="string">'destroyed 销毁完成状态===============》'</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"el     : "</span> + <span class="keyword">this</span>.$el);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);  </span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"data   : "</span> + <span class="keyword">this</span>.$data); </span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"message: "</span> + <span class="keyword">this</span>.message)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1480597-6a86a28b511c8325.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="二、生命周期详解"><a href="#二、生命周期详解" class="headerlink" title="二、生命周期详解"></a>二、生命周期详解</h2><blockquote><p><code>vue</code>实例在创建过程中调用的几个生命周期钩子</p></blockquote><h3 id="2-1-beforeCreate、created"><a href="#2-1-beforeCreate、created" class="headerlink" title="2.1 beforeCreate、created"></a>2.1 beforeCreate、created</h3><blockquote><p>在beforeCreate和created钩子函数之间的生命周期</p></blockquote><ul><li>在这个生命周期之间，进行初始化事件，进行数据的观测，可以看到在<code>created</code>的时候数据已经和<code>data</code>属性进行绑定（放在<code>data</code>中的属性当值发生改变的同时，视图也会改变）,此时还是没有el选项</li></ul><h3 id="2-2-created、beforeMount"><a href="#2-2-created、beforeMount" class="headerlink" title="2.2 created、beforeMount"></a>2.2 created、beforeMount</h3><blockquote><p>created钩子函数和beforeMount间的生命周期</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-2f4e9e2df0a1d7fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li>首先会判断对象是否有el选项。如果有的话就继续向下编译，如果没有<code>el</code>选项，则停止编译，也就意味着停止了生命周期，直到在该vue实例上调用<code>vm.$mount(el)</code>。</li><li>此时注释掉代码中 <code>el: &#39;#app&#39;,</code> 然后运行可以看到到<code>created</code>的时候就停止了</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/1480597-5403bd286ce4ea9e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>如果我们在后面继续调用<code>vm.$mount(el)</code>,可以发现代码继续向下执行了</p></blockquote><ul><li><code>vm.$mount(el)</code> //这个el参数就是挂在的dom接点</li></ul><p><strong>template参数选项的有无对生命周期的影响</strong></p><ul><li>如果vue实例对象中有template参数选项，则将其作为模板编译成<code>render</code>函数</li><li>如果没有<code>template</code>选项，则将外部HTML作为模板编译</li><li>可以看到<code>template</code>中的模板优先级要高于<code>outer HTML</code>的优先级</li></ul><blockquote><p>修改代码如下, 在HTML结构中增加了一串html，在<code>vue</code>对象中增加了<code>template</code>选项</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue生命周期学习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/vue/2.4.2/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--html中修改的--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;message + '这是在outer HTML中的'&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="javascript">    template: <span class="string">"&lt;h1&gt;&#123;&#123;message +'这是在template中的'&#125;&#125;&lt;/h1&gt;"</span>, <span class="comment">//在vue配置项中修改的</span></span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="javascript">      message: <span class="string">'Vue的生命周期'</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>输出 <code>Vue的生命周期--这是在template中的</code></p></blockquote><p>那么将vue对象中<code>template</code>的选项注释掉后打印如下信息</p><blockquote><p>输出 <code>Vue的生命周期--这是在outer HTML中的</code></p></blockquote><ul><li>可以想想什么el的判断要在template之前了~是因为vue需要通过el找到对应的outer template</li><li>在vue对象中还有一个render函数，它是以createElement作为参数，然后做渲染操作，而且我们可以直接嵌入JSX.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createElement(<span class="string">'h1'</span>, <span class="string">'this is createElement'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>所以综合排名优先级</strong></p><ul><li><code>render</code>函数选项 &gt; <code>template</code>选项 &gt; <code>outer HTML</code></li></ul><h3 id="2-3-beforeMount、mounted"><a href="#2-3-beforeMount、mounted" class="headerlink" title="2.3 beforeMount、mounted"></a>2.3 beforeMount、mounted</h3><blockquote><p>beforeMount和mounted钩子函数间的生命周期</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-8b2cb230f2e5722f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>可以看到此时是给<code>vue</code>实例对象添加<code>$el</code>成员，并且替换掉挂在的<code>DOM</code>元素。因为在之前<code>console</code>中打印的结果可以看到<code>beforeMount</code>之前<code>el</code>上还是<code>undefined</code></p></blockquote><h3 id="2-4-mounted"><a href="#2-4-mounted" class="headerlink" title="2.4 mounted"></a>2.4 mounted</h3><p><img src="https://upload-images.jianshu.io/upload_images/1480597-39733c55ff054c34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>在<code>mounted</code>之前h1中还是通过<code>{message}</code>进行占位的，因为此时还有挂在到页面上，还是JavaScript中的虚拟DOM形式存在的。在<code>mounted</code>之后可以看到h1中的内容发生了变化</p></blockquote><h3 id="2-5-beforeUpdate、updated"><a href="#2-5-beforeUpdate、updated" class="headerlink" title="2.5 beforeUpdate、updated"></a>2.5 beforeUpdate、updated</h3><blockquote><p><code>beforeUpdate</code>钩子函数和<code>updated</code>钩子函数间的生命周期</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-300f61cbacb6d931.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>当vue发现data中的数据发生了改变，会触发对应组件的重新渲染，先后调用<code>beforeUpdate</code>和<code>updated</code>钩子函数。我们在console中输入</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.message = &apos;触发组件更新&apos;</span><br></pre></td></tr></table></figure><p>发现触发了组件的更新</p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-150de7cdd6b1d0e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="2-6-beforeDestroy、destroyed"><a href="#2-6-beforeDestroy、destroyed" class="headerlink" title="2.6 beforeDestroy、destroyed"></a>2.6 beforeDestroy、destroyed</h3><blockquote><p><code>beforeDestroy</code>和<code>destroyed</code>钩子函数间的生命周期</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-e116245fa53bed64.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li><code>beforeDestroy</code>钩子函数在实例销毁之前调用。在这一步，实例仍然完全可用。</li><li><code>destroyed</code>钩子函数在<code>Vue</code> 实例销毁后调用。调用后，<code>Vue</code>实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;每个Vue实例在被创建之前都要经过一系列的初始化过程,这个过程就是vue的生命周期&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://cn.vuejs.org/images/lifecycle.png&quot; alt=&quot;&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="http://blog.poetries.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue 基本指令（四）</title>
    <link href="http://blog.poetries.top/2018/08/26/vue-base-directive/"/>
    <id>http://blog.poetries.top/2018/08/26/vue-base-directive/</id>
    <published>2018-08-26T06:10:32.000Z</published>
    <updated>2018-08-27T04:06:20.130Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1480597-95bb7e600db0b04a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="一、常用指令"><a href="#一、常用指令" class="headerlink" title="一、常用指令"></a>一、常用指令</h3><p><strong>v-text</strong></p><blockquote><p>更新元素的 textContent</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-text</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>v-html</strong></p><blockquote><p>更新元素的 innerHTML</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 v-html=&quot;msg&quot;&gt;&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p><strong>v-bind</strong></p><blockquote><p>当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2 创建 Vue 的实例对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// el 用来指定vue挂载到页面中的元素，值是：选择器</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 理解：用来指定vue管理的HTML区域</span></span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 数据对象，用来给视图中提供数据的</span></span></span><br><span class="line"><span class="undefined">      data: &#123;</span></span><br><span class="line"><span class="javascript">        url: <span class="string">'http://www.baidu.com'</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>v-on</strong></p><ul><li>作用：绑定事件</li><li>语法：<code>v-on:click=&quot;say&quot;</code> or <code>v-on:click=&quot;say(&#39;参数&#39;, $event)&quot;</code></li><li>简写：<code>@click=&quot;say&quot;</code></li><li>说明：绑定的事件从<code>methods</code>中获取</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">"doSomething"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"doSomething"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 方法传参 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"doSomething（“123”）"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2 创建 Vue 的实例对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// methods属性用来给vue实例提供方法（事件）</span></span></span><br><span class="line"><span class="undefined">      methods: &#123;</span></span><br><span class="line"><span class="javascript">        doSomething: <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//接受参数，并输出</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(str);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>事件修饰符</p></blockquote><ul><li><code>.stop</code> 阻止冒泡，调用 <code>event.stopPropagation()</code></li><li><code>.prevent</code> 阻止默认事件，调用 <code>event.preventDefault()</code></li><li><code>.capture</code> 添加事件侦听器时使用事件捕获模式</li><li><code>.self</code> 只当事件在该元素本身（比如不是子元素）触发时触发回调</li><li><code>.once</code> 事件只触发一次</li></ul><p><strong>v-model</strong></p><ul><li>作用：在表单元素上创建双向数据绑定</li><li>说明：监听用户的输入事件以更新数据</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"message"</span> <span class="attr">placeholder</span>=<span class="string">"edit me"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Message is: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>v-for</strong></p><blockquote><p>基于源数据多次渲染元素或模板块</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1 基础用法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span>&gt;</span></span><br><span class="line">  &#123;&#123; item.text &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- item 为当前项，index 为索引 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in list"</span>&gt;</span>&#123;&#123;item&#125;&#125; -- &#123;&#123;index&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- item 为值，key 为键，index 为索引 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"(item, key, index) in obj"</span>&gt;</span>&#123;&#123;item&#125;&#125; -- &#123;&#123;key&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"item in 10"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>key属性</p></blockquote><ul><li>推荐：使用 <code>v-for</code>的时候提供 <code>key</code> 属性，以获得性能提升。</li><li>说明：使用 <code>key</code>，<code>VUE</code>会基于 <code>key</code> 的变化重新排列元素顺序，并且会移除 key 不存在的元素。</li><li>官方解释：当 <code>Vue.js</code>用 <code>v-for</code> 正在更新已渲染过的元素列表时，它默认用“就地复用”策略。如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序， 而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素。这个类似 Vue 1.x 的 <code>track-by=&quot;$index&quot;</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">:key</span>=<span class="string">"item.id"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、样式处理-class和style"><a href="#二、样式处理-class和style" class="headerlink" title="二、样式处理 -class和style"></a>二、样式处理 -class和style</h2><ul><li>说明：这两个都是HTML元素的属性，使用<code>v-bind</code>，只需要通过表达式计算出字符串结果即可</li><li>表达式的类型：字符串、数组、对象</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123; active: true &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> ===&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"['active', 'text-danger']"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> ===&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"active text-danger"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[&#123; active: true &#125;, errorClass]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> ===&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"active text-danger"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">--- style ---</span><br><span class="line"><span class="comment">&lt;!-- 1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"&#123; color: activeColor, fontSize: fontSize + 'px' &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2 将多个 样式对象 应用到一个元素上--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"[baseStyles, overridingStyles]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">--- script ---</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2 创建 Vue 的实例对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">      data: &#123;</span></span><br><span class="line"><span class="javascript">        activeColor: <span class="string">'red'</span>,</span></span><br><span class="line"><span class="undefined">        fontSize: 30,</span></span><br><span class="line"><span class="undefined">        baseStyles: &#123;</span></span><br><span class="line"><span class="javascript">          color: <span class="string">'red'</span>,</span></span><br><span class="line"><span class="javascript">          <span class="string">'font-size'</span>: <span class="string">'30px'</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        overridingStyles: &#123;</span></span><br><span class="line"><span class="javascript">          color: <span class="string">'green'</span>,</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、v-if-和-v-show"><a href="#三、v-if-和-v-show" class="headerlink" title="三、v-if 和 v-show"></a>三、v-if 和 v-show</h2><blockquote><p>条件渲染</p></blockquote><ul><li><code>v-if</code>：根据表达式的值的真假条件，销毁或重建元素</li><li><code>v-show</code>：根据表达式之真假值，切换元素的 display CSS 属性</li></ul><h2 id="四、提升用户体验：v-cloak"><a href="#四、提升用户体验：v-cloak" class="headerlink" title="四、提升用户体验：v-cloak"></a>四、提升用户体验：v-cloak</h2><ul><li>这个指令保持在元素上直到关联实例结束编译。和 CSS 规则如 <code>[v-cloak] { display: none }</code> 一起用时，这个指令可以隐藏未编译的 <code>Mustache</code> 标签直到实例准备完毕。</li><li>防止刷新页面，网速慢的情况下出现<code>{ message }</code>等数据格式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-cloak</span>&gt;</span></span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="五、提升性能"><a href="#五、提升性能" class="headerlink" title="五、提升性能"></a>五、提升性能</h2><p><strong>v-pre</strong></p><blockquote><p>说明：跳过这个元素和它的子元素的编译过程。可以用来显示原始 Mustache 标签。跳过大量没有指令的节点会加快编译</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123; this will not be compiled &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>v-once</strong></p><blockquote><p>只渲染元素和组件一次。随后的重新渲染，元素/组件及其所有的子节点将被视为静态内容并跳过。这可以用于优化更新性能</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-once</span>&gt;</span>This will never change: &#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="六、Dom元素获取-v-ref"><a href="#六、Dom元素获取-v-ref" class="headerlink" title="六、Dom元素获取: v-ref"></a>六、Dom元素获取: v-ref</h2><blockquote><p>在父组件上注册一个子组件的索引,便于直接访问,不需要表达式,必须提供参数id。可以通过父组件的<code>$refs</code>对象访问子组件</p></blockquote><ul><li>当<code>v-ref</code>和<code>v-for</code>一起使用时,注册的值将是一个数组，包含多有的子组件，对应于绑定数组；如果<code>v-for</code>使用在一个对象上，注册的值将是一个对象，包含所有的子组件，对应于绑定对象</li></ul><p><strong>Dom元素获取: v-el</strong></p><blockquote><p>为Dom元素注册一个索引，方便通过所属实例的<code>$els</code>访问这个元素,可以用<code>v-el：some-el</code>设置<code>this.$els.someEl.</code></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-el:msg</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-el:other-msg</span>&gt;</span>world<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>通过<code>this.$els</code>获取相应的DOM元素:</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$els.msg.textContent  <span class="comment">// ==&gt;  "hello"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.$els.otherMsg.textContent  <span class="comment">// ==&gt;  "world"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1480597-95bb7e600db0b04a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; 
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="http://blog.poetries.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue之class与style绑定（三）</title>
    <link href="http://blog.poetries.top/2018/08/26/vue-bind-class-style/"/>
    <id>http://blog.poetries.top/2018/08/26/vue-bind-class-style/</id>
    <published>2018-08-26T06:02:32.000Z</published>
    <updated>2018-08-27T04:06:20.130Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、绑定HTML-class"><a href="#一、绑定HTML-class" class="headerlink" title="一、绑定HTML class"></a>一、绑定HTML class</h2><blockquote><p>有三种方法 1、直接绑定 2、数据属性绑定 3、计算属性绑定</p></blockquote><h3 id="1-1-对象语法"><a href="#1-1-对象语法" class="headerlink" title="1.1 对象语法"></a>1.1 对象语法</h3><blockquote><p>如果数据属性 发生改变，<code>class</code> 列表将相应地更新</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123;active:isActive&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">    data:&#123;</span></span><br><span class="line"><span class="javascript">        msg:<span class="string">"对象语法"</span>,</span></span><br><span class="line"><span class="javascript">        isActive:<span class="literal">true</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>v-bind:class</code> 指令也可以与普通的 <code>class</code> 属性共存</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.active&#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background: red;</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">"box"</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123;active:isActive&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">        data:&#123;</span></span><br><span class="line"><span class="javascript">            msg:<span class="string">"对象语法"</span>,</span></span><br><span class="line"><span class="javascript">            isActive:<span class="literal">true</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>可以直接绑定数据里的一个对象</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">.active1&#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    margin-top: 10px;</span><br><span class="line">    border: 1px solid #ccc ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"classObj"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">    data:&#123;</span></span><br><span class="line"><span class="undefined">        classObj:&#123;</span></span><br><span class="line"><span class="javascript">            active:<span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">            aaa:<span class="literal">false</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>可以在这里绑定返回对象的计算属性。这是一个常用且强大的模式</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.aaa</span>&#123;</span></span><br><span class="line"><span class="undefined">    background: green;</span></span><br><span class="line"><span class="undefined">    width: 100px;</span></span><br><span class="line"><span class="undefined">    height: 100px;</span></span><br><span class="line"><span class="undefined">    margin-top: 10px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"Obj"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">        data:&#123;</span></span><br><span class="line"><span class="javascript">            msg:<span class="string">"对象语法"</span>,</span></span><br><span class="line"><span class="javascript">            isActive:<span class="literal">true</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        computed:&#123;</span></span><br><span class="line"><span class="javascript">            Obj:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">                    aaa:<span class="keyword">this</span>.isActive</span></span><br><span class="line"><span class="undefined">                &#125; </span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-数组语法"><a href="#1-2-数组语法" class="headerlink" title="1.2 数组语法"></a>1.2 数组语法</h3><blockquote><p>我们可以把一个数组传给 <code>v-bind:class</code>，以应用一个 <code>class</code> 列表</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.active</span>&#123;</span></span><br><span class="line"><span class="undefined">        width: 100px;</span></span><br><span class="line"><span class="undefined">        height: 100px;</span></span><br><span class="line"><span class="undefined">        background: red;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.active1</span>&#123;</span></span><br><span class="line"><span class="undefined">        color: yellow;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.aaa</span>&#123;</span></span><br><span class="line"><span class="css">       <span class="selector-tag">border</span>: 5<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">"box"</span> <span class="attr">v-bind:class</span>=<span class="string">"[isActive,isActive1,isActive2]"</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">        data:&#123;</span></span><br><span class="line"><span class="javascript">            msg:<span class="string">"对象语法"</span>,</span></span><br><span class="line"><span class="javascript">            isActive:<span class="string">"active"</span>,</span></span><br><span class="line"><span class="javascript">            isActive1:<span class="string">"active1"</span>,</span></span><br><span class="line"><span class="javascript">            isActive2:<span class="string">"aaa"</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>可以用三元表达式</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.active</span>&#123;</span></span><br><span class="line"><span class="undefined">        width: 100px;</span></span><br><span class="line"><span class="undefined">        height: 100px;</span></span><br><span class="line"><span class="undefined">        background: red;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.active1</span>&#123;</span></span><br><span class="line"><span class="undefined">        color: yellow;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.aaa</span>&#123;</span></span><br><span class="line"><span class="css">       <span class="selector-tag">border</span>: 5<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">"box"</span> <span class="attr">v-bind:class</span>=<span class="string">"[isActive,isActive1,isActive5 ? isActive2 : '']"</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">        data:&#123;</span></span><br><span class="line"><span class="javascript">            msg:<span class="string">"对象语法"</span>,</span></span><br><span class="line"><span class="javascript">            isActive5:<span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">            isActive:<span class="string">"active"</span>,</span></span><br><span class="line"><span class="javascript">            isActive1:<span class="string">"active1"</span>,</span></span><br><span class="line"><span class="javascript">            isActive2:<span class="string">"aaa"</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>当有多个条件 class 时这样写有些繁琐。可以在数组语法中使用对象语法</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.active</span>&#123;</span></span><br><span class="line"><span class="undefined">        width: 100px;</span></span><br><span class="line"><span class="undefined">        height: 100px;</span></span><br><span class="line"><span class="undefined">        background: red;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.active1</span>&#123;</span></span><br><span class="line"><span class="undefined">        color: yellow;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.aaa</span>&#123;</span></span><br><span class="line"><span class="css">       <span class="selector-tag">border</span>: 5<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">"box"</span> <span class="attr">v-bind:class</span>=<span class="string">"[isActive,&#123;active1:isActive5&#125;,isActive5 ? isActive2 : '']"</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">        data:&#123;</span></span><br><span class="line"><span class="javascript">            msg:<span class="string">"对象语法"</span>,</span></span><br><span class="line"><span class="javascript">            isActive5:<span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">            isActive:<span class="string">"active"</span>,</span></span><br><span class="line"><span class="javascript">            isActive1:<span class="string">"active1"</span>,</span></span><br><span class="line"><span class="javascript">            isActive2:<span class="string">"aaa"</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-在组件上"><a href="#1-3-在组件上" class="headerlink" title="1.3 在组件上"></a>1.3 在组件上</h3><blockquote><p>在一个自定义组件上用到 class 属性的时候，这些类将被添加到根元素上面，这个元素上已经存在的类不会被覆盖</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.active1</span>&#123;</span></span><br><span class="line"><span class="undefined">        width: 100px;</span></span><br><span class="line"><span class="undefined">        background: red;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.aaa</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">border</span>: 5<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.bbb</span>&#123;</span></span><br><span class="line"><span class="undefined">        height: 100px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tanchu</span> <span class="attr">v-bind:class</span>=<span class="string">"classObj"</span>&gt;</span><span class="tag">&lt;/<span class="name">tanchu</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">'tanchu'</span>, &#123;</span></span><br><span class="line"><span class="xml">        template: `<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bbb"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"弹出"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">        data:&#123;</span></span><br><span class="line"><span class="undefined">            classObj:&#123;</span></span><br><span class="line"><span class="javascript">                active1:<span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">                aaa:<span class="literal">true</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、绑定内联样式"><a href="#二、绑定内联样式" class="headerlink" title="二、绑定内联样式"></a>二、绑定内联样式</h2><h3 id="2-1-对象语法"><a href="#2-1-对象语法" class="headerlink" title="2.1 对象语法"></a>2.1 对象语法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"&#123;background:a,border:b,width:c&#125;"</span>&gt;</span>内联样式<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"classObj"</span>&gt;</span>内联样式<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">        data:&#123;</span></span><br><span class="line"><span class="javascript">            a:<span class="string">"red"</span>,</span></span><br><span class="line"><span class="javascript">            b:<span class="string">"5px solid #ccc"</span>,</span></span><br><span class="line"><span class="javascript">            c:<span class="string">"100px"</span></span></span><br><span class="line"><span class="undefined">            classObj:&#123;</span></span><br><span class="line"><span class="javascript">                background:<span class="string">"red"</span>,</span></span><br><span class="line"><span class="javascript">                border:<span class="string">"5px solid #ccc"</span>,</span></span><br><span class="line"><span class="javascript">                width:<span class="string">"100px"</span>,</span></span><br><span class="line"><span class="javascript">                marginTop:<span class="string">"10px"</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-数组语法"><a href="#2-2-数组语法" class="headerlink" title="2.2 数组语法"></a>2.2 数组语法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数组语法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"[classObj,classObj1]"</span>&gt;</span>内联样式<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">        data:&#123;</span></span><br><span class="line"><span class="undefined">            classObj:&#123;</span></span><br><span class="line"><span class="javascript">                background:<span class="string">"red"</span>,</span></span><br><span class="line"><span class="javascript">                border:<span class="string">"5px solid #ccc"</span>,</span></span><br><span class="line"><span class="javascript">                width:<span class="string">"100px"</span></span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            classObj1:&#123;</span></span><br><span class="line"><span class="javascript">                height:<span class="string">"100px"</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-自动添加前缀"><a href="#2-3-自动添加前缀" class="headerlink" title="2.3 自动添加前缀"></a>2.3 自动添加前缀</h3><blockquote><p>当 <code>v-bind:style</code> 使用需要特定前缀的 CSS 属性时，如 <code>transform</code>，<code>Vue.js</code> 会自动侦测并添加相应的前缀</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、绑定HTML-class&quot;&gt;&lt;a href=&quot;#一、绑定HTML-class&quot; class=&quot;headerlink&quot; title=&quot;一、绑定HTML class&quot;&gt;&lt;/a&gt;一、绑定HTML class&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;有三种方法 1、直
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="http://blog.poetries.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue中的数据绑定（二）</title>
    <link href="http://blog.poetries.top/2018/08/26/vue-data-bind/"/>
    <id>http://blog.poetries.top/2018/08/26/vue-data-bind/</id>
    <published>2018-08-26T06:01:32.000Z</published>
    <updated>2018-08-27T04:06:20.130Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Vue 对象的改变会直接影响到 HTML 的标签的变化，而且标签的变化也会反过来影响 Vue 对象的属性的变化</p></blockquote><p><img src="https://malun666.github.io/aicoder_vip_doc/pages/vue/imgs/02vue%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A.jpg" alt=""></p><h2 id="一、数据渲染"><a href="#一、数据渲染" class="headerlink" title="一、数据渲染"></a>一、数据渲染</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;message&#125; <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!--数据绑定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"htmlMess"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!--html绑定--&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  <span class="comment">&lt;!--数据绑定--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、属性绑定"><a href="#二、属性绑定" class="headerlink" title="二、属性绑定"></a>二、属性绑定</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-bind:title</span>=<span class="string">"message"</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  <span class="comment">&lt;!--属性绑定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span>  <span class="comment">&lt;!--属性绑定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"url"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span>    <span class="comment">&lt;!--简写--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、类名绑定"><a href="#三、类名绑定" class="headerlink" title="三、类名绑定"></a>三、类名绑定</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--类绑定，当isActive为true时类名生效--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"active : isActive"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>    </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--多类名绑定，用逗号隔开--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"active:isActive,red:isRed"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--对象类名绑定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"classObj"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>    </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--类名数组绑定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[active,red]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>   </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--三元运算符类名绑定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"isActive ? active : red"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四、样式绑定"><a href="#四、样式绑定" class="headerlink" title="四、样式绑定"></a>四、样式绑定</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--内联样式绑定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"&#123;width:width,height:height&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--内联样式对象绑定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:sytle</span>=<span class="string">"styleObj"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--内联样式对象数组绑定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"[styleObj1,styleObj2]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="五、条件绑定"><a href="#五、条件绑定" class="headerlink" title="五、条件绑定"></a>五、条件绑定</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--条件为真时显示，css中直接有无此元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"seen"</span>&gt;</span>hahah<span class="tag">&lt;/<span class="name">p</span>&gt;</span>    </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--效果同if，css中为display：none--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">"seen"</span>&gt;</span>hah<span class="tag">&lt;/<span class="name">p</span>&gt;</span>     </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--循环绑定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"list in lists"</span>&gt;</span>&#123;&#123;alist.text&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--绑定lists数组--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"value in lists"</span>&gt;</span>&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>     </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--值循环输出--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"(key value) in lists"</span>&gt;</span>&#123;&#123;key&#125;&#125;:&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>     </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--键值对输出--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"(index key value) in lists"</span>&gt;</span>&#123;&#123;index&#125;&#125;:&#123;&#123;key&#125;&#125;:&#123;&#123;value&#125;&#125; <span class="tag">&lt;/<span class="name">p</span>&gt;</span>   </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--索引加键值对输出--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"n in 10"</span>&gt;</span>&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="六、事件绑定"><a href="#六、事件绑定" class="headerlink" title="六、事件绑定"></a>六、事件绑定</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--事件对应fun1方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">"fun1"</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">a</span>&gt;</span>    </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--事件绑定简写--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"fun1"</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">a</span>&gt;</span>     </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--事件修饰符：--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 阻止单击事件冒泡 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 提交事件不再重载页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 修饰符可以串联  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop.prevent</span>=<span class="string">"doThat"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只有修饰符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 添加事件侦听器时使用事件捕获模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.capture</span>=<span class="string">"doThis"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">"doThat"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- click 事件只能点击一次，2.1.4版本新增 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.once</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="七、按键绑定"><a href="#七、按键绑定" class="headerlink" title="七、按键绑定"></a>七、按键绑定</h2><blockquote><p>相应按键按下时触发</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.enter</span>=<span class="string">"submit"</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>全部的按键别名：</p></blockquote><ul><li><code>.enter</code>  </li><li><code>.tab</code></li><li><code>.delete</code> (捕获 “删除” 和 “退格” 键) </li><li><code>.esc</code></li><li><code>.space</code> </li><li><code>.up</code></li><li><code>.down</code> </li><li><code>.left</code> </li><li><code>.right</code>  </li><li><code>.ctrl</code></li><li><code>.alt</code></li><li><code>.shift</code> </li><li><code>.meta</code></li></ul><h2 id="八、双向绑定"><a href="#八、双向绑定" class="headerlink" title="八、双向绑定"></a>八、双向绑定</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;message&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>   </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--input输入值将传入Vue中的message--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span>/&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"message"</span> <span class="attr">id</span>=<span class="string">"aa"</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>腾讯<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>阿里<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>绑定修饰符</strong></p><ul><li><code>v-model.lazy</code> 将<code>input</code>同步改为<code>change</code>同步    -</li><li><code>v-model.mumber</code> 将能转化为数字的字符串转化为数字</li><li><code>v-model.trim</code> 过滤空格</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Vue 对象的改变会直接影响到 HTML 的标签的变化，而且标签的变化也会反过来影响 Vue 对象的属性的变化&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://malun666.github.io/aicoder_vi
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="http://blog.poetries.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>初识vue与环境搭建（一）</title>
    <link href="http://blog.poetries.top/2018/08/26/vue-start/"/>
    <id>http://blog.poetries.top/2018/08/26/vue-start/</id>
    <published>2018-08-26T05:12:32.000Z</published>
    <updated>2018-08-27T04:06:20.130Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、初识"><a href="#一、初识" class="headerlink" title="一、初识"></a>一、初识</h2><ul><li><code>Vue</code>框架是一个<code>MVVM</code>框架，<code>Module</code>和<code>view</code>是双向绑定的。<code>vue</code>没有控制器的概念，它的核心思想是数据驱动，状态管理，以及组件化。</li><li>因此在我们js编程中，不会去操作<code>DOM</code>、<code>class</code>，更多的关注我们的数据层面。去改变一个变量，通过变量来控制我们的视图，通过事件绑定、状态管理来进一步渲染视图。</li><li><code>MVVM</code>框架的特点是没有控制器，通过<code>view</code>和<code>module</code>来进行交互，实际上底层已经帮我们封装了</li></ul><h3 id="1-1概况"><a href="#1-1概况" class="headerlink" title="1.1概况"></a>1.1概况</h3><ul><li><code>Vue</code>本身不是一个框架</li><li><code>Vue</code>结合周边的生态构成一个灵活的、渐进式的框架</li></ul><h3 id="1-2核心思想"><a href="#1-2核心思想" class="headerlink" title="1.2核心思想"></a>1.2核心思想</h3><ul><li>数据驱动【只关注数据层面】</li><li>组件化</li></ul><h3 id="1-3双向数据绑定"><a href="#1-3双向数据绑定" class="headerlink" title="1.3双向数据绑定"></a>1.3双向数据绑定</h3><blockquote><p><code>Object.defineProperty</code>在双向绑定中起来很重要作用</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"userName"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"uName"</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line">object.defineProerty(obj,<span class="string">"userName"</span>,&#123;</span><br><span class="line">    get:<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    set:<span class="function">(<span class="params">val</span>)=&gt;</span>&#123;</span><br><span class="line">        $(<span class="string">"#uName"</span>).innerHTML = val</span><br><span class="line">        $(<span class="string">"#userName"</span>).value = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">"#userName"</span>).on(<span class="string">"keyup"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    obj.userName = event.target.value</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="1-4-模板语法"><a href="#1-4-模板语法" class="headerlink" title="1.4 模板语法"></a>1.4 模板语法</h3><ul><li>数据绑定 <code>msg</code></li><li><code>html</code>语法 <code>v-html</code></li><li>绑定属性 <code>v-bind:id=</code></li><li>使用表达式 <code>ok?&#39;yes&#39;:&quot;no&quot;</code></li><li>文本赋值 <code>v-text=</code></li><li>指令 <code>v-if</code></li><li>过滤器 <code>message|capitalize</code> 和 <code>v-bind:id=&#39;rawld|formatld&#39;</code></li></ul><h3 id="1-5-Class和Style绑定"><a href="#1-5-Class和Style绑定" class="headerlink" title="1.5 Class和Style绑定"></a>1.5 <code>Class</code>和<code>Style</code>绑定</h3><ul><li>对象语法：<code>v-bind:class=&quot;{ active:isActive,&#39;text-danger&#39;:hasError }&quot;</code></li><li>数组语法： </li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[activeClass, errorClass]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="undefined">        data:&#123;</span></span><br><span class="line"><span class="javascript">            activeClass: <span class="string">"active"</span>,</span></span><br><span class="line"><span class="javascript">            errorClass: <span class="string">'text-danger'</span></span></span><br><span class="line"><span class="undefined">        &#125;   </span></span><br><span class="line"><span class="undefined">    &#125;) </span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>style</code>绑定-对象语法 <code>v-bind:style=&quot;{color:activeColor,fontSize:fontSize+&quot;px&quot;}&quot;</code></li></ul><h3 id="1-6条件渲染"><a href="#1-6条件渲染" class="headerlink" title="1.6条件渲染"></a>1.6条件渲染</h3><ul><li><code>v-if</code> 如果是<code>false</code>不会被渲染</li><li><code>v-else</code></li><li><code>v-else-if</code></li><li><code>v-show</code> 控制<code>block</code>、<code>none</code>显示</li><li><code>v-cloak</code></li></ul><h3 id="1-7事件处理器"><a href="#1-7事件处理器" class="headerlink" title="1.7事件处理器"></a>1.7事件处理器</h3><ul><li><code>v-on:click=&quot;method&quot;</code> 或者<code>@click=&quot;method&quot;</code></li><li>修饰符：<code>v-on:click.stop、prevent、self、once</code></li><li><code>v-on:keyup.enter</code>、<code>tab</code>、<code>delete</code>(捕获删除、退格键)、<code>space</code>、<code>letf</code>、<code>right</code></li></ul><h3 id="1-8组件"><a href="#1-8组件" class="headerlink" title="1.8组件"></a>1.8组件</h3><ul><li>全局组件和局部组件</li><li>父子组件通讯、数据传递</li><li><code>Slot</code> (插槽)</li></ul><blockquote><p>在Vue里面消息是单向传递的，只允许父子件向子组件流通，一般使用<code>props</code>。不允许子组件去修改父组件的变量，子组件往父组件传递数据通过<code>$emit(&quot;父组件中自定义的事件名字&quot;)</code>这种方式去触发。父组件的变量发生变化之后，会同步流向子组件</p></blockquote><h2 id="二、环境搭建"><a href="#二、环境搭建" class="headerlink" title="二、环境搭建"></a>二、环境搭建</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install -g vue-cli</span><br><span class="line"></span><br><span class="line">vue init webpack-simple demo</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 初始化完整的webpack项目</span></span><br><span class="line">vue init webpack demo2</span><br></pre></td></tr></table></figure><p><strong>配置文件</strong></p><ul><li>主要关注的是<code>webpack.base.js</code>和<code>config/index.js</code>，其他的都是辅助性工具</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、初识&quot;&gt;&lt;a href=&quot;#一、初识&quot; class=&quot;headerlink&quot; title=&quot;一、初识&quot;&gt;&lt;/a&gt;一、初识&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Vue&lt;/code&gt;框架是一个&lt;code&gt;MVVM&lt;/code&gt;框架，&lt;code&gt;Module&lt;/c
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="http://blog.poetries.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>快应用入门小结篇</title>
    <link href="http://blog.poetries.top/2018/08/21/quick-app-summary/"/>
    <id>http://blog.poetries.top/2018/08/21/quick-app-summary/</id>
    <published>2018-08-21T10:05:43.000Z</published>
    <updated>2018-08-27T04:06:20.126Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>MD原文件 <a href="https://github.com/poetries/poetries.github.io/blob/dev/source/_posts/quick-app-summary.md" target="_blank" rel="noopener">https://github.com/poetries/poetries.github.io/blob/dev/source/_posts/quick-app-summary.md</a></p></blockquote><blockquote><p>注册账号通过 <a href="https://www.quickapp.cn/docCenter/post/74" target="_blank" rel="noopener">https://www.quickapp.cn/docCenter/post/74</a></p></blockquote><h1 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h1><h2 id="1-1-安装NodeJS"><a href="#1-1-安装NodeJS" class="headerlink" title="1.1 安装NodeJS"></a>1.1 安装NodeJS</h2><blockquote><p>需安装<code>6.0</code>以上版本的<code>NodeJS</code></p></blockquote><h2 id="1-2-安装hap-toolkit"><a href="#1-2-安装hap-toolkit" class="headerlink" title="1.2 安装hap-toolkit"></a>1.2 安装hap-toolkit</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// hap -V // 会显示安装版本信息</span><br><span class="line">npm install -g hap-toolkit</span><br></pre></td></tr></table></figure><h2 id="1-3-创建项目工程"><a href="#1-3-创建项目工程" class="headerlink" title="1.3 创建项目工程"></a>1.3 创建项目工程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hap init projectName</span><br><span class="line"></span><br><span class="line">// 增加编译支持</span><br><span class="line">hap update --force</span><br><span class="line"></span><br><span class="line">cd projectName &amp;&amp; npm i</span><br></pre></td></tr></table></figure><p>生成的目录结构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">├── sign rpk <span class="comment">//包签名模块</span></span><br><span class="line">│ └── debug <span class="comment">//调试环境</span></span><br><span class="line">│ ├── certificate.pem <span class="comment">//证书文件</span></span><br><span class="line">│ └── private.pem <span class="comment">//私钥文件</span></span><br><span class="line">├── src</span><br><span class="line">│ ├── Common <span class="comment">//公用的资源和组件文件</span></span><br><span class="line">│ │ └── logo.png <span class="comment">//应用图标</span></span><br><span class="line">│ ├── Demo <span class="comment">//页面目录</span></span><br><span class="line">│ | └── index.ux <span class="comment">//页面文件，可自定义页面名称</span></span><br><span class="line">│ ├── app.ux <span class="comment">//APP文件，可引入公共脚本，暴露公共数据和方法等</span></span><br><span class="line">│ └── manifest.json <span class="comment">//项目配置文件，配置应用图标、页面路由等</span></span><br><span class="line">└── package.json <span class="comment">//定义项目需要的各种模块及配置信息</span></span><br></pre></td></tr></table></figure><ul><li><code>src</code>：项目源文件夹</li><li><code>sign</code>：签名模块，当前仅有<code>debug</code>签名，如果内测上线，请添加<code>release</code>文件夹，增加线上签名；签名生成方法详见文档编译工具</li></ul><p><strong>编译项目</strong></p><ul><li><code>npm run release</code>     # 发布程序包，在 <code>/dist/.signed.rpk</code>，注意需要使用 <code>release</code> 签名模块</li><li><code>npm run build</code>      # 生成 <code>build</code> 和 <code>dist</code> 两个目录。前者是临时产出，后者是最终产出</li><li><code>npm run watch</code>      # 文件保存时自动编译和调试</li></ul><p>手动编译项目</p><blockquote><p>在项目的根目录下，运行如下命令进行编译打包，生成rpk包</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><ul><li>编译打包成功后，项目根目录下会生成文件夹：<code>build</code>、<code>dist</code></li><li><code>build</code>：临时产出，包含编译后的页面js，图片等</li><li><code>dist</code>：最终产出，包含<code>rpk</code>文件。其实是将<code>build</code>目录下的资源打包压缩为一个文件，后缀名为<code>rpk</code>，这个<code>rpk</code>文件就是项目编译后的最终产出</li></ul><p>自动编译项目</p><ul><li>每次修改源代码文件后，都自动编译项目</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run watch</span><br></pre></td></tr></table></figure><p><strong>在安卓手机上安装调试工具</strong></p><blockquote><p><a href="https://www.quickapp.cn/docCenter/post/69" target="_blank" rel="noopener">https://www.quickapp.cn/docCenter/post/69</a></p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-5b4e639317894e37.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="1-4-连接手机进行调试"><a href="#1-4-连接手机进行调试" class="headerlink" title="1.4 连接手机进行调试"></a>1.4 连接手机进行调试</h2><blockquote><p>注意：一定要注意手机连接的wifi与电脑所连接的网络需要在同一局域网和网段，需要能够相互访问。</p></blockquote><ul><li>在项目根目录下执行如下命令，启动HTTP调试服务器：（<code>server</code>前需要先<code>npm run build</code>）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run server</span><br></pre></td></tr></table></figure><ul><li>开发者可以通过命令行终端或者调试服务器主页看到提供扫描的二维码</li><li>开发者通过快应用调试器扫码安装按钮，扫码安装待调试的<code>rpk</code>文件</li><li>开发者点击快应用调试器中的开始调试按钮，开始调试</li></ul><blockquote><p>打开之前安装的快应用调试助手扫描即可预览</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-32579fff42fb9530.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>扫描二维码之后点击开始调试，会调出devtool工具本地调试</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-3cd020c83fd15543.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-afd1d41337c7a3a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="1-5-安装Hap-Extension"><a href="#1-5-安装Hap-Extension" class="headerlink" title="1.5 安装Hap Extension"></a>1.5 安装Hap Extension</h2><blockquote><p>启动Visual Studio Code，打开项目，点击左上侧扩展，搜索hap，点击安装Hap Extension</p></blockquote><ul><li>更多详情 <a href="https://doc.quickapp.cn/tutorial/getting-started/code-edit-conf.html" target="_blank" rel="noopener">https://doc.quickapp.cn/tutorial/getting-started/code-edit-conf.html</a></li></ul><h1 id="二、快应用结构分析"><a href="#二、快应用结构分析" class="headerlink" title="二、快应用结构分析"></a>二、快应用结构分析</h1><h2 id="2-1-文件组织"><a href="#2-1-文件组织" class="headerlink" title="2.1 文件组织"></a>2.1 文件组织</h2><blockquote><p>一个应用包含：描述项目配置信息的<code>manifest</code>文件，放置项目公共资源脚本的<code>app.ux</code>文件，多个描述页面/自定义组件的ux文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">├── manifest.json</span><br><span class="line">├── app.ux</span><br><span class="line">├── Page1</span><br><span class="line">│   ├── page1.ux</span><br><span class="line">├── Page2</span><br><span class="line">│   ├── page2.ux</span><br><span class="line">└── Common</span><br><span class="line">    ├── ComponentA.ux</span><br><span class="line">    ├── ComponentB.ux</span><br><span class="line">    └── xxx.png</span><br></pre></td></tr></table></figure><blockquote><p>其中<code>Common</code>目录下为公用的资源文件和组件文件，每个页面目录下存放各自页面私有的资源文件和组件文件，如：图片，<code>CSS</code>，<code>JS</code>等</p></blockquote><h2 id="2-2-源码文件"><a href="#2-2-源码文件" class="headerlink" title="2.2 源码文件"></a>2.2 源码文件</h2><blockquote><p><code>APP</code>，页面和自定义组件均通过<code>ux</code>文件编写，<code>ux</code>文件由<code>template</code>模板、<code>style</code>样式和<code>script</code>脚本3个部分组成，一个典型的页面<code>ux</code>文件示例如下</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- template里只能有一个根节点 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo-page"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>欢迎打开&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 点击跳转详情页 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"跳转到详情页"</span> <span class="attr">onclick</span>=<span class="string">"routeDetail"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.demo-page</span> &#123;</span></span><br><span class="line"><span class="undefined">    flex-direction: column;</span></span><br><span class="line"><span class="undefined">    justify-content: center;</span></span><br><span class="line"><span class="undefined">    align-items: center;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.title</span> &#123;</span></span><br><span class="line"><span class="undefined">    font-size: 40px;</span></span><br><span class="line"><span class="undefined">    text-align: center;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.btn</span> &#123;</span></span><br><span class="line"><span class="undefined">    width: 550px;</span></span><br><span class="line"><span class="undefined">    height: 86px;</span></span><br><span class="line"><span class="undefined">    margin-top: 75px;</span></span><br><span class="line"><span class="undefined">    border-radius: 43px;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#09ba07</span>;</span></span><br><span class="line"><span class="undefined">    font-size: 30px;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#ffffff</span>;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'@system.router'</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 页面级组件的数据模型，影响传入数据的覆盖机制：private内定义的属性不允许被覆盖</span></span></span><br><span class="line"><span class="undefined">    private: &#123;</span></span><br><span class="line"><span class="javascript">      title: <span class="string">'示例页面'</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    routeDetail () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 跳转到应用内的某个页面，router用法详见：文档-&gt;接口-&gt;页面路由</span></span></span><br><span class="line"><span class="undefined">      router.push (&#123;</span></span><br><span class="line"><span class="javascript">        uri: <span class="string">'/DemoDetail'</span></span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-3-manifest配置"><a href="#2-3-manifest配置" class="headerlink" title="2.3 manifest配置"></a>2.3 manifest配置</h2><blockquote><p><a href="https://doc.quickapp.cn/framework/manifest.html" target="_blank" rel="noopener">https://doc.quickapp.cn/framework/manifest.html</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    # 包名，区分不同应用的唯一id，因为名称其实是可以一样的</span><br><span class="line">    <span class="string">"package"</span>: <span class="string">"com.application.demo"</span>,</span><br><span class="line"></span><br><span class="line">    # 应用名称</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"hi"</span>,</span><br><span class="line"></span><br><span class="line">    # 版本管理的话，每次更新将versionCode自增1即可</span><br><span class="line">    <span class="string">"versionName"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">    <span class="string">"versionCode"</span>: <span class="string">"1"</span>,</span><br><span class="line">    <span class="string">"minPlatformVersion"</span>: <span class="string">"101"</span>,</span><br><span class="line"></span><br><span class="line">    # 程序的入口icon，所有关于文件的引用统一使用根目录</span><br><span class="line">    # 根目录对应src文件夹</span><br><span class="line">    <span class="string">"icon"</span>: <span class="string">"/Common/logo.png"</span>,</span><br><span class="line"></span><br><span class="line">    # </span><br><span class="line">    <span class="string">"features"</span>: [</span><br><span class="line">        &#123; <span class="string">"name"</span>: <span class="string">"system.prompt"</span> &#125;,</span><br><span class="line">        &#123; <span class="string">"name"</span>: <span class="string">"system.router"</span> &#125;,</span><br><span class="line">        &#123; <span class="string">"name"</span>: <span class="string">"system.shortcut"</span> &#125;</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="string">"permissions"</span>: [</span><br><span class="line">        &#123; <span class="string">"origin"</span>: <span class="string">"*"</span> &#125;</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    # 配置相关</span><br><span class="line">    <span class="string">"config"</span>: &#123;</span><br><span class="line">        # 这里的设置是log输出的最低等级</span><br><span class="line">        # 如果是warn的话，info类型将不会输出</span><br><span class="line">        # 等级请参考js中的console日志</span><br><span class="line">        <span class="string">"logLevel"</span>: <span class="string">"off"</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    # 路由</span><br><span class="line">    # 这里会配置应用入口的页面</span><br><span class="line">    # 所有的页面都需要在这里配置</span><br><span class="line">    # 会把页面与对应的页面文件对应起来</span><br><span class="line">    # 经过配置之后可以通过/Demo访问到Demo目录下的index.ux页面</span><br><span class="line">    <span class="string">"router"</span>: &#123;</span><br><span class="line">        <span class="string">"entry"</span>: <span class="string">"Demo"</span>,</span><br><span class="line">        <span class="string">"pages"</span>: &#123;</span><br><span class="line">            <span class="string">"Demo"</span>: &#123;</span><br><span class="line">                # 这里对应的Demo文件夹里的index.ux</span><br><span class="line">                <span class="string">"component"</span>: <span class="string">"index"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"DemoDetail"</span>: &#123;</span><br><span class="line">                <span class="string">"component"</span>: <span class="string">"index"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"About"</span>: &#123;</span><br><span class="line">                <span class="string">"component"</span>: <span class="string">"index"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    # 配置页面UI显示</span><br><span class="line">    # 主要分为两种，页面公有与页面私有</span><br><span class="line">    <span class="string">"display"</span>: &#123;</span><br><span class="line">        # 这三个都是所有页面公有的，顶部titleBar内容</span><br><span class="line">        <span class="string">"titleBarText"</span>: <span class="string">"public title"</span></span><br><span class="line">        <span class="string">"titleBarBackgroundColor"</span>: <span class="string">"#f2f2f2"</span>,</span><br><span class="line">        <span class="string">"titleBarTextColor"</span>: <span class="string">"#414141"</span>,</span><br><span class="line"></span><br><span class="line">        # 会增加一个导航栏</span><br><span class="line">        <span class="string">"menu"</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">        # 页面私有内容</span><br><span class="line">        <span class="string">"pages"</span>: &#123;</span><br><span class="line">            <span class="string">"Demo"</span>: &#123;</span><br><span class="line">                # 这里面的内容就是每个页面私有的了</span><br><span class="line">                <span class="string">"titleBarText"</span>: <span class="string">"示例页"</span>,</span><br><span class="line">                <span class="string">"menu"</span>: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"DemoDetail"</span>: &#123;</span><br><span class="line">                <span class="string">"titleBarText"</span>: <span class="string">"详情页"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"About"</span>: &#123;</span><br><span class="line">                <span class="string">"menu"</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>package</code> 应用包名，确认与原生应用的包名不一致，推荐采用<code>com.company.module</code>的格式，如：<code>com.example.demo</code></li><li><code>name</code> 应用名称，6个汉字以内，与应用商店保存的名称一致，用于在桌面图标、弹窗等处显示应用名称</li><li><code>icon</code> 应用图标，提供<code>192x192</code>大小的即可</li><li><code>versionName</code> 应用版本名称，如：<code>&quot;1.0&quot;</code></li><li><code>versionCode</code> 应用版本号，从1自增，推荐每次重新上传包时<code>versionCode+1</code></li><li><code>minPlatformVersion</code> 支持的最小平台版本号，兼容性检查，避免上线后在低版本平台运行并导致不兼容；如果不填按照内测版本处理</li><li><code>features</code> 接口列表，绝大部分接口都需要在这里声明，否则不能调用，详见每个接口的文档说明</li><li><code>config</code> 系统配置<ul><li><code>logLevel</code>：打印日志等级，分为<code>off</code>,<code>error</code>,<code>warn</code>,<code>info</code>,<code>log</code>,<code>debug</code></li><li><code>designWidth</code>：页面设计基准宽度，根据实际设备宽度来缩放元素大小</li></ul></li><li><code>router</code> 路由信息 <ul><li><code>entry:</code>首页名称</li><li><code>pages</code>:页面配置列表，<code>key</code>值为页面名称（对应页面目录名，例如Hello对应’Hello’目录），<code>value</code>为页面详细配置<code>page</code>，详见下面说明</li><li><code>router.page</code> 用于定义单个页面路由信息<ul><li><code>component</code>: 页面对应的组件名，与<code>ux</code>文件名保持一致，例如<code>&#39;hello&#39;</code> 对应 <code>&#39;hello.ux&#39;</code></li><li><code>path</code> 页面路径，例如<code>“/user”</code>,不填则默认为/&lt;页面名称&gt;。<code>path</code>必须唯一,不能和其他<code>page</code>的<code>path</code>相同。下面<code>page</code>的<code>path</code>因为缺失,会被设置为<code>“/Index”</code>：<code>&quot;Index&quot;</code>: <code>{&quot;component&quot;: &quot;index&quot;}</code></li><li><code>filter</code>: 声明页面可以处理某种请求</li></ul></li></ul></li><li><code>display UI</code>显示相关配置<ul><li><code>backgroundColor</code> 窗口背景颜色</li><li><code>fullScreen</code> 是否是全屏模式，默认不会同时作用于<code>titleBar</code>，<code>titleBar</code>需要继续通过<code>titleBar</code>控制</li><li><code>titleBar</code> 是否显示<code>titleBar</code></li><li><code>titleBarBackgroundColor</code>标题栏背景色</li><li><code>titleBarTextColor</code> 标题栏文字颜色</li><li><code>titleBarText</code> 标题栏文字(也可通过页面跳转传递参数(<code>titleBarText</code>)设置)</li><li><code>menu</code> 是否显示标题栏右上角菜单按钮</li><li><code>pages</code> 各个页面的显示样式，key为页面名（与路由中的页面名保持一致），<code>value</code>为窗口显示</li></ul></li></ul><h2 id="2-4-app-ux"><a href="#2-4-app-ux" class="headerlink" title="2.4 app.ux"></a>2.4 app.ux</h2><blockquote><p>当前<code>app.ux</code>编译后会包含<code>manifest</code>配置信息（可以在<code>npm run build</code>之后查看文件内容），所以请不要删除<code>/**manifest**/</code>的注释内容标识</p></blockquote><ul><li>您可以在<code>&lt;script&gt;</code>中引入一些公共的脚本，并暴露在当前app的对象上，如下所示，然后就可以在页面ux文件的<code>ViewModel</code>中，通过<code>this.$app.util</code>访问</li></ul><h2 id="2-5-style样式"><a href="#2-5-style样式" class="headerlink" title="2.5 style样式"></a>2.5 style样式</h2><ul><li>样式布局采用<code>CSS Flexbox</code>（弹性盒）样式</li></ul><blockquote><p>支持2种导入外部文件的方式</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入外部文件, 代替style内部样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">src</span>=<span class="string">"./style.css"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 合并外部文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  @<span class="keyword">import</span> <span class="string">'./style.css'</span>;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.a</span> &#123;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>模板内部样式</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 内联inline --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"color:red; margin: 10px;"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- class声明 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"normal append"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><strong>样式预编译</strong></p><blockquote><p>目前支持less, sass的预编译</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入外部文件, 代替style内部样式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"less"</span> <span class="attr">src</span>=<span class="string">"./lessFile.less"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--合并外部文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  @<span class="keyword">import</span> <span class="string">'./lessFile.less'</span>;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.page-less</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#testTag</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.less-font-text</span>, <span class="selector-class">.less-font-comma</span> &#123;</span></span><br><span class="line"><span class="undefined">        font-size: 60px;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  /**</span></span><br><span class="line"><span class="undefined">   * 应用级别的配置，供所有页面公用</span></span><br><span class="line"><span class="undefined">   */</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> util <span class="keyword">from</span> <span class="string">'./util'</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    showMenu: util.showMenu,</span></span><br><span class="line"><span class="undefined">    createShortcut: util.createShortcut</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-6-template模板"><a href="#2-6-template模板" class="headerlink" title="2.6 template模板"></a>2.6 template模板</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- temp.ux --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">name</span>=<span class="string">"hint"</span> <span class="attr">src</span>=<span class="string">"./hint-modal"</span>&gt;</span><span class="tag">&lt;/<span class="name">import</span>&gt;</span>  <span class="comment">&lt;!-- 引入外部模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">src</span>=<span class="string">"./table"</span>&gt;</span><span class="tag">&lt;/<span class="name">import</span>&gt;</span>  <span class="comment">&lt;!-- 引入外部模板 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mod-header"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"mod-title"</span> <span class="attr">style</span>=<span class="string">"color: red; margin: 10px;"</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span>    <span class="comment">&lt;!-- 行内样式 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"mod-detail"</span> <span class="attr">onclick</span>=<span class="string">"showDetail"</span>&gt;</span>?<span class="tag">&lt;/<span class="name">text</span>&gt;</span>    <span class="comment">&lt;!-- 无参事件绑定 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mod-content"</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- block 用来表示逻辑，不渲染 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">block</span> <span class="attr">for</span>=<span class="string">"totalData"</span>&gt;</span>   <span class="comment">&lt;!-- for 循环遍历数组 $idx, $item 分别为数组的索引和值--&gt;</span></span><br><span class="line">              <span class="comment">&lt;!-- 事件绑定 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"onTabClick($idx)"</span> <span class="attr">class</span>=<span class="string">"item &#123;&#123;tabIndex === $idx &amp;&amp; 'active'&#125;&#125;"</span>&gt;</span> <span class="comment">&lt;!-- 支持简单表达式 --&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"&#123;&#123;tabIndex === $idx &amp;&amp; 'text-active'&#125;&#125;"</span>&gt;</span>&#123;&#123;($item || &#123;&#125;).name&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"&#123;&#123;tabIndex === $idx &amp;&amp; 'text-active'&#125;&#125;"</span>&gt;</span>&#123;&#123;($item || &#123;&#125;).value&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span>  <span class="comment">&lt;!-- 布尔值、null、undefined、'' 不渲染，其余包括 falsy 值一律渲染 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">"mod-like"</span> <span class="attr">if</span>=<span class="string">"&#123;&#123;isLike&#125;&#125;"</span> /&gt;</span> <span class="comment">&lt;!-- 支持if elif else, 必须是相邻节点 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">"mod-dislike"</span> <span class="attr">else</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">table</span> <span class="attr">data</span>=<span class="string">&#123;&#123;dataList&#125;&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span>  <span class="comment">&lt;!-- 传入属性值，使用外部模板--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hint</span> <span class="attr">show</span>=<span class="string">"&#123;&#123;isHintShown&#125;&#125;"</span>&gt;</span></span><br><span class="line">          This is children of hint templete.</span><br><span class="line">      <span class="tag">&lt;/<span class="name">hint</span>&gt;</span>   <span class="comment">&lt;!-- 使用外部模板 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- if 和 show 的区别：if 为 false 分支的节点不会渲染进 DOM 树，而 show 为 false 的节点会渲染，只是 display: none; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"less"</span> <span class="attr">src</span>=<span class="string">"./lessFile.less"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span>   <span class="comment">&lt;!-- 引入外部 CSS/LESS --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="comment">/* 引入外部 CSS/LESS */</span></span></span><br><span class="line"><span class="css">  @<span class="keyword">import</span> <span class="string">'../Common/global.less'</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.container</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="comment">/* 定义样式，less 支持 */</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> fetch <span class="keyword">from</span> <span class="string">"@system.fetch"</span>    <span class="comment">// 引入系统 js</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> conf <span class="keyword">from</span> <span class="string">'./globalConf'</span>;     <span class="comment">// 引入外部 js</span></span></span><br><span class="line"><span class="undefined">  </span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    props: [<span class="string">'title'</span>, <span class="string">'dataList'</span>],  <span class="comment">// 传入属性：必须字母开头，全小写、数字和 `-` ，不能保留字和函数，不能以符号开头</span></span></span><br><span class="line"><span class="undefined">    public: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 定义变量，会被 props 和内部请求覆盖</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    private: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 定义变量，不会被 props 覆盖</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    protected: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 定义变量，不会被 props 覆盖, 但会被内部请求覆盖(获得通过 a 标签和 router 传递的参数)</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    data :&#123;   <span class="comment">// data 不能和 public、private、protected 一起使用，data 也可以是 function（返回 data 对象，onInit之前执行）</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 定义变量：不能保留字和函数，不能以符号开头</span></span></span><br><span class="line"><span class="javascript">      totalData: [&#123;<span class="attr">name</span>: <span class="string">'a'</span>,<span class="attr">value</span>: <span class="number">97</span>&#125;,&#123;<span class="attr">name</span>: <span class="string">'b'</span>,<span class="attr">value</span>: <span class="number">98</span>&#125;];</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 定义变量，会被 props 覆盖</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="javascript">    onTabClick(index)&#123;    <span class="comment">// 内部事件定义</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(index);</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    events: &#123;</span></span><br><span class="line"><span class="undefined">       onIDChange()&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 外部事件定义</span></span></span><br><span class="line"><span class="undefined">       &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- hint.ux --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span>&gt;</span><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span>          <span class="comment">&lt;!-- slot: 获取该数据的引用的 children, 该例中即：This is children of hint templete. --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-7-script脚本"><a href="#2-7-script脚本" class="headerlink" title="2.7 script脚本"></a>2.7 script脚本</h2><h3 id="2-7-1-模块声明"><a href="#2-7-1-模块声明" class="headerlink" title="2.7.1 模块声明"></a>2.7.1 模块声明</h3><blockquote><p>可以通过<code>import</code>引入功能模块，在代码中调用模块方法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import fetch from &quot;@system.fetch&quot;</span><br></pre></td></tr></table></figure><blockquote><p>也可以一次引入所有的模块，例如</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import system from &quot;@system&quot;</span><br></pre></td></tr></table></figure><ul><li>在代码中使用<code>system.network</code>来调用接口方法</li></ul><h3 id="2-7-2-对象"><a href="#2-7-2-对象" class="headerlink" title="2.7.2 对象"></a>2.7.2 对象</h3><h4 id="2-7-2-1-页面级组件"><a href="#2-7-2-1-页面级组件" class="headerlink" title="2.7.2.1 页面级组件"></a>2.7.2.1 页面级组件</h4><p><strong>data(废弃)</strong></p><ul><li>页面级组件的数据模型，能够转换为<code>JSON</code>对象</li><li>如果是函数，返回结果必须是对象，在组件初始化时会执行函数获取结果作为<code>data</code>的值</li><li>使用<code>data</code>方式声明的属性会被外部数据覆盖，因此存在一定安全风险，推荐使用下面的<code>public</code>,<code>protected</code>,<code>rivate</code>来声明属性（注意：它们不能与data同时声明）</li></ul><p><strong>public</strong></p><blockquote><p>页面级组件的数据模型，影响传入数据的覆盖机制：<code>public</code>内定义的属性允许被传入的数据覆盖，如果外部传入数据的某个属性未被声明，在<code>public</code>中不会新增这个属性</p></blockquote><p><strong>protected</strong></p><blockquote><p>页面级组件的数据模型，影响传入数据的覆盖机制：protected内定义的属性，允许被应用内部页面请求传递的数据覆盖，不允许被应用外部请求传递的数据覆盖</p></blockquote><p><strong>private</strong></p><blockquote><p>页面级组件的数据模型，影响传入数据的覆盖机制：private内定义的属性不允许被覆盖</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">   props: [<span class="string">'title'</span>, <span class="string">'dataList'</span>],  <span class="comment">// 传入属性：必须字母开头，全小写、数字和 `-` ，不能保留字和函数，不能以符号开头</span></span><br><span class="line">   public: &#123;</span><br><span class="line">     <span class="comment">// 定义变量，会被 props 和内部请求覆盖</span></span><br><span class="line">   &#125;,</span><br><span class="line">   private: &#123;</span><br><span class="line">     <span class="comment">// 定义变量，不会被 props 覆盖</span></span><br><span class="line">   &#125;,</span><br><span class="line">   protected: &#123;</span><br><span class="line">     <span class="comment">// 定义变量，不会被 props 覆盖, 但会被内部请求覆盖(获得通过 a 标签和 router 传递的参数)</span></span><br><span class="line">   &#125;</span><br><span class="line">   data :&#123;   <span class="comment">// data 不能和 public、private、protected 一起使用，data 也可以是 function（返回 data 对象，onInit之前执行）</span></span><br><span class="line">     <span class="comment">// 定义变量：不能保留字和函数，不能以符号开头</span></span><br><span class="line">     totalData: [&#123;<span class="attr">name</span>: <span class="string">'a'</span>,<span class="attr">value</span>: <span class="number">97</span>&#125;,&#123;<span class="attr">name</span>: <span class="string">'b'</span>,<span class="attr">value</span>: <span class="number">98</span>&#125;];</span><br><span class="line">       <span class="comment">// 定义变量，会被 props 覆盖</span></span><br><span class="line">   &#125;,</span><br><span class="line">   onTabClick(index)&#123;    <span class="comment">// 内部事件定义</span></span><br><span class="line">     <span class="built_in">console</span>.log(index);</span><br><span class="line">   &#125;,</span><br><span class="line">   events: &#123;</span><br><span class="line">      onIDChange()&#123;</span><br><span class="line">         <span class="comment">// 外部事件定义</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="2-7-2-2-自定义组件"><a href="#2-7-2-2-自定义组件" class="headerlink" title="2.7.2.2 自定义组件"></a>2.7.2.2 自定义组件</h4><p><strong>data</strong></p><blockquote><p>自定义组件的数据模型，能够转换为JSON对象；属性名不能以$或_开头, 不要使用for, if, show, tid等保留字<br>如果是函数，返回结果必须是对象，在组件初始化时会执行函数获取结果作为data的值</p></blockquote><p><strong>props</strong></p><ul><li>定义组件外部可传入的所有属性</li><li>在模板代码中，请使用短横线分隔命名代替驼峰命名。如，属性定义<code>props: [&#39;propA&#39;]</code>，可通过<code>&lt;tag prop-a=&#39;xx&#39;&gt;</code>方式传递到组件内部</li></ul><p><strong>prop验证</strong></p><blockquote><p>在自定义组件中，可将props定义为带验证需求的对象。其中，key为属性名，value为属性对应的验证需求。验证失败则输出错误提示日志，增加prop验证有利于规范自定义组件的使用</p></blockquote><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>type</code></td><td>-</td><td>检查属性值的类型。支持单一类型和多种可能类型，可在原生和自定义构造函数中任意选择，单独或组合使用。原生构造函数：<code>String</code>  <code>Number</code>  <code>Boolean</code>  <code>Function</code>  <code>Object</code>  <code>Array</code>  <code>Symbol</code></td></tr><tr><td><code>default</code></td><td>-</td><td>设置属性的默认值</td></tr><tr><td><code>required</code></td><td><code>Boolean</code></td><td>设置属性是否必填</td></tr></tbody></table><p><code>validator</code>|    <code>Function</code>|    设置自定义验证函数。若函数的返回值为真，则通过验证；否则验证失败|</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    props: &#123;</span><br><span class="line">      <span class="comment">// 单一类型检查的简写</span></span><br><span class="line">      propA: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="comment">// 多种可能类型的简写</span></span><br><span class="line">      propB: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span><br><span class="line">      <span class="comment">// 必填的字符串</span></span><br><span class="line">      propC: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        required: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 带默认值的数字</span></span><br><span class="line">      propD: &#123;</span><br><span class="line">        type: <span class="built_in">Number</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="number">100</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 带有默认值的对象</span></span><br><span class="line">      propE: &#123;</span><br><span class="line">        type: <span class="built_in">Object</span>,</span><br><span class="line">        <span class="keyword">default</span> () &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">message</span>: <span class="string">'hello'</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 自定义验证函数</span></span><br><span class="line">      propF: &#123;</span><br><span class="line">        validator (value) &#123;</span><br><span class="line">          <span class="keyword">return</span> value === <span class="string">'hello'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="2-7-2-3-公共对象"><a href="#2-7-2-3-公共对象" class="headerlink" title="2.7.2.3 公共对象"></a>2.7.2.3 公共对象</h4><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>$app</code></td><td><code>Object</code></td><td>应用对象</td></tr><tr><td><code>$page</code></td><td><code>Object</code></td><td>页面对象</td></tr><tr><td><code>$valid</code></td><td><code>Boolean</code></td><td>页面对象是否有效</td></tr><tr><td><code>$visible</code></td><td><code>Boolean</code></td><td>页面是否处于用户可见状态</td></tr></tbody></table><h4 id="2-7-2-4-应用对象"><a href="#2-7-2-4-应用对象" class="headerlink" title="2.7.2.4 应用对象"></a>2.7.2.4 应用对象</h4><blockquote><p>可通过<code>$app</code>访问</p></blockquote><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>$def</code></td><td><code>Object</code></td><td>使用<code>this.$app.$def</code>获取在<code>app.ux</code>中暴露的对象</td></tr><tr><td><code>$data</code></td><td><code>Object</code></td><td>使用<code>this.$app.$data</code>获取在<code>manifest.json</code>的<code>config.data</code>中声明的全局数据</td></tr></tbody></table><h4 id="2-7-2-5-页面对象"><a href="#2-7-2-5-页面对象" class="headerlink" title="2.7.2.5 页面对象"></a>2.7.2.5 页面对象</h4><blockquote><p>可通过<code>$page</code>访问</p></blockquote><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>actio</code>n</td><td><code>String</code></td><td>获取打开当前页面的<code>action</code>。仅在当前页面是通过<code>filter</code>匹配的方式打开时有效，否则为<code>undefined</code></td></tr><tr><td><code>uri</code></td><td><code>String</code></td><td>获取打开当前页面的uri。仅在当前页面是通过filter匹配的方式打开时有效，否则为<code>undefined</code></td></tr></tbody></table><h3 id="2-7-3-方法"><a href="#2-7-3-方法" class="headerlink" title="2.7.3 方法"></a>2.7.3 方法</h3><h4 id="2-7-3-1-数据方法"><a href="#2-7-3-1-数据方法" class="headerlink" title="2.7.3.1 数据方法"></a>2.7.3.1 数据方法</h4><table><thead><tr><th>属性</th><th>类型</th><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>$set</code></td><td><code>Function</code></td><td><code>key: String value: Any</code></td><td>添加数据属性，用法<code>：this.$set(&#39;key&#39;,value)</code> <code>this.$vm(&#39;id&#39;).$set(&#39;key&#39;,value)</code></td></tr><tr><td><code>$delete</code></td><td><code>Function</code></td><td><code>key: String</code></td><td>删除数据属性，用法：<code>this.$delete(&#39;key&#39;)</code> <code>this.$vm(&#39;id&#39;).$delete(&#39;key&#39;)</code></td></tr></tbody></table><h4 id="2-7-3-2-公共方法"><a href="#2-7-3-2-公共方法" class="headerlink" title="2.7.3.2 公共方法"></a>2.7.3.2 公共方法</h4><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>$element</code></td><td>获取指定<code>id</code>的组件<code>dom</code>对象，如果没有指定<code>id</code>，则返回根组件<code>dom</code>对象用法：<code>&lt;template&gt; &lt;div id=&#39;xxx&#39;&gt;&lt;/div&gt; &lt;/template&gt; this.$element(&#39;xxx&#39;)</code> 获取<code>id</code>为<code>xxx</code>的<code>div</code>组件实例对象 <code>this.$element()</code> 获取根组件实例对象</td></tr><tr><td><code>$root</code></td><td>获取顶层<code>ViewModel</code></td></tr><tr><td><code>$parent</code></td><td>获取父亲<code>ViewModel</code></td></tr><tr><td><code>$child</code></td><td>获取指定<code>id</code>的自定义组件的<code>ViewModel</code>用法：<code>this.$child(&#39;xxx&#39;)</code> 获取<code>id</code>为<code>xxx</code>的<code>div</code>组件<code>ViewModel</code></td></tr><tr><td><code>$vm deprecated</code></td><td>请使用上面<code>this.$child(&#39;xxx&#39;)</code>替代</td></tr><tr><td><code>$rootElement deprecated</code></td><td>请使用上面<code>this.$element()</code>替代</td></tr><tr><td><code>$forceUpdate</code></td><td>更新<code>ViewModel</code>数据，可能会触发<code>DOM</code>操作，如：创建节点、更新节点、删除节点等；这些DOM操作不一定在数据更新时立即执行，而是在开发者的业务代码执行后触发；若开发者期望数据更新时立即执行相应的<code>DOM</code>操作，可使用：<code>this.$forceUpdate()</code>；一般不推荐使用</td></tr></tbody></table><h4 id="2-7-3-3-事件方法"><a href="#2-7-3-3-事件方法" class="headerlink" title="2.7.3.3 事件方法"></a>2.7.3.3 事件方法</h4><table><thead><tr><th>属性</th><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>$on</code></td><td><code>type: String</code> 事件名 <br><code>handler: Function</code>事件句柄函数</td><td>添加事件处理句柄用法：<code>this.$on(&#39;xxxx&#39;, this.fn)</code> <code>fn</code>是在<code>&lt;script&gt;</code>中定义的函数</td></tr><tr><td><code>$off</code></td><td><code>type: String</code> 事件名 <br><code>handler</code>:  事件句柄函数</td><td>删除事件处理句柄用法：<code>this.$off(&#39;xxxx&#39;, this.fn)</code> <code>this.$off(&#39;xxx&#39;)</code> 删除指定事件的所有处理句柄</td></tr><tr><td><code>$dispatch</code></td><td><code>type: String</code> 事件名</td><td>向上层组件发送事件通知用法：<code>this.$dispatch(&#39;xxx&#39;)</code>正常情况下，会一直向上传递事件（冒泡）如果要停止冒泡，在事件句柄函数中调用<code>evt.stop()</code>即可</td></tr><tr><td><code>$broadcast</code></td><td><code>type: String</code> 事件名</td><td>向子组件发送事件通知用法：<code>this.$broadcast(&#39;xxx&#39;)</code>正常情况下，会一直向下传递事件如果要停止传递，在事件句柄函数中调用<code>evt.stop()</code>即可</td></tr><tr><td><code>$emit</code></td><td><code>type: String</code> 事件名 <br><code>data: Object</code> 事件参数</td><td>触发事件，对应的句柄函数被调用用法：<code>this.$emit(&#39;xxx&#39;) this.$emit(&#39;xxx&#39;, {a:1})</code>传递的事件参数可在事件回调函数中，通过<code>evt.detail</code>来访问，例如<code>evt.detail.a</code></td></tr><tr><td><code>$emitElement</code></td><td><code>type: String</code> 事件名<br><code>data: Object</code> 事件参数 <br><code>id: String</code> 组件<code>id</code> (默认为<code>-1</code> 代表根元素)</td><td>触发组件事件,对应的句柄函数被调用用法：<code>this.$emitElement(&#39;xxx&#39;, null, &#39;id&#39;) this.$emitElement(&#39;xxx&#39;,{a:1})</code>传递的事件参数可在事件回调函数中，通过<code>evt.detail</code>来访问，例如<code>evt.detail.a</code></td></tr><tr><td><code>$watch</code></td><td><code>data: String</code> 属性名, 支持<code>&#39;a.b.c&#39;</code>格式，不支持数组索引 <br><code>handler: String</code> 事件句柄函数名,函数的第一个参数为新的属性值，第二个参数为旧的属性值</td><td>动态添加属性/事件绑定，属性必须在<code>data</code>中定义，<code>handler</code>函数必须在<code>&lt;script&gt;</code>定义；当属性值发生变化时事件才被触发用法：<code>this.$watch(&#39;a&#39;,&#39;handler&#39;)</code></td></tr></tbody></table><h4 id="2-7-3-4-应用方法"><a href="#2-7-3-4-应用方法" class="headerlink" title="2.7.3.4 应用方法"></a>2.7.3.4 应用方法</h4><blockquote><p>可通过$app访问</p></blockquote><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>exit</td><td>退出快应用，结束应用生命周期。<br>调用方法：<code>this.$app.exit()</code></td></tr></tbody></table><h4 id="2-7-3-5-页面方法"><a href="#2-7-3-5-页面方法" class="headerlink" title="2.7.3.5 页面方法"></a>2.7.3.5 页面方法</h4><blockquote><p>可通过<code>$page</code>访问</p></blockquote><table><thead><tr><th>属性</th><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>setTitleBar</code></td><td><code>text: String</code> 标题栏文字 <br><code>textColor: String</code> 文字颜色 <br><code>backgroundColor: String</code> 背景颜色 <br><code>backgroundOpacity : Number</code>背景透明度 <br><code>menu : Boolean</code> 是否在标题栏右上角显示菜单按钮</td><td>设置当前页面的标题栏用法：<code>this.$page.setTitleBar({text:&#39;Hello&#39;, textColor:&#39;#FF0000&#39;, backgroundColor:&#39;#FFFFFF&#39;, backgroundOpacity:0.5, menu: true})</code></td></tr><tr><td><code>finish</code></td><td>无</td><td>从本页面退出，结束页面生命周期。调用方法：<code>this.$page.finish()</code></td></tr></tbody></table><h2 id="2-8-指令"><a href="#2-8-指令" class="headerlink" title="2.8 指令"></a>2.8 指令</h2><p><strong>for</strong></p><blockquote><p><code>for</code>指令用于循环输出一个数组类型的数据</p></blockquote><ul><li>自定义变量表示<code>for</code>指令的数组索引和数组元素时，变量名不可以用<code>$</code>或<code>_</code>开头；</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tutorial-page"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 方式1：默认$item代表数组中的元素, $idx代表数组中的索引 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tutorial-row"</span> <span class="attr">for</span>=<span class="string">"&#123;&#123;list&#125;&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;$idx&#125;&#125;.&#123;&#123;$item.name&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 方式2：自定义元素变量名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tutorial-row"</span> <span class="attr">for</span>=<span class="string">"value in list"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;$idx&#125;&#125;.&#123;&#123;value.name&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 方式3：自定义元素、索引的变量名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tutorial-row"</span> <span class="attr">for</span>=<span class="string">"(personIndex, personItem) in list"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;personIndex&#125;&#125;.&#123;&#123;personItem.name&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.tutorial-page</span> &#123;</span></span><br><span class="line"><span class="undefined">    flex-direction: column;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.tutorial-row</span> &#123;</span></span><br><span class="line"><span class="undefined">      width: 85%;</span></span><br><span class="line"><span class="undefined">      margin-top: 10px;</span></span><br><span class="line"><span class="undefined">      margin-bottom: 10px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    private: &#123;</span></span><br><span class="line"><span class="undefined">      list: [</span></span><br><span class="line"><span class="javascript">        &#123;<span class="attr">name</span>: <span class="string">'aa'</span>&#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">name</span>: <span class="string">'bb'</span> &#125;</span></span><br><span class="line"><span class="undefined">      ]</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    onInit () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$page.setTitleBar(&#123; <span class="attr">text</span>: <span class="string">'指令for'</span> &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>指令if与指令show</strong></p><ul><li><code>if</code>条件指令，是指<code>if/elif/else</code>这3个相关指令，用于控制是否增加或者删除组件；</li><li><code>show</code>指令，是指是否显示组件，用于控制组件的显示状态，并不会从DOM结构中删除</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tutorial-page"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">onclick</span>=<span class="string">"onClickShow"</span>&gt;</span>显示隐藏：<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">show</span>=<span class="string">"&#123;&#123;showVar&#125;&#125;"</span>&gt;</span>show: 渲染但控制是否显示<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">onclick</span>=<span class="string">"onClickCondition"</span>&gt;</span>条件指令：<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">if</span>=<span class="string">"&#123;&#123;conditionVar === 1&#125;&#125;"</span>&gt;</span>if: if条件<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">elif</span>=<span class="string">"&#123;&#123;conditionVar === 2&#125;&#125;"</span>&gt;</span>elif: elif条件<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">else</span>&gt;</span>else: 其余<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.tutorial-page</span> &#123;</span></span><br><span class="line"><span class="undefined">    flex-direction: column;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    private: &#123;</span></span><br><span class="line"><span class="javascript">      showVar: <span class="literal">true</span>,</span></span><br><span class="line"><span class="undefined">      conditionVar: 1</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    onInit () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$page.setTitleBar(&#123; <span class="attr">text</span>: <span class="string">'指令if与指令show'</span> &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    onClickShow () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.showVar = !<span class="keyword">this</span>.showVar</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    onClickCondition () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.conditionVar = ++<span class="keyword">this</span>.conditionVar % <span class="number">3</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>当<code>if/elif</code>指令的值为<code>false</code>时，节点会从页面中移除，当<code>if/elif</code>指令值为<code>true</code>，组件会动态插入节点中；</li><li>当<code>show</code>指令的值为<code>true</code>时，节点可见， - 当其值为<code>false</code>时，组件不可见，但节点仍会保留在页面DOM结构中</li></ul><p><strong>组件block</strong></p><blockquote><p>block组件是表达逻辑区块的组件，没有对应的Native组件。可以使用<block>实现更为灵活的”列表/条件渲染”。如在<block>上使用for指令和if指令</block></block></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tutorial-page"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">onclick</span>=<span class="string">"toggleCityList"</span>&gt;</span>点击：控制是否显示城市<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"city"</span> <span class="attr">for</span>=<span class="string">"city in cities"</span> <span class="attr">if</span>=<span class="string">"&#123;&#123;showCityList === 1&#125;&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span>&gt;</span>城市：&#123;&#123;city.name&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">block</span> <span class="attr">if</span>=<span class="string">"&#123;&#123;city.showSpots&#125;&#125;"</span> <span class="attr">for</span>=<span class="string">"&#123;&#123;city.spots&#125;&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span>&gt;</span>景点：&#123;&#123;$item.name&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.tutorial-page</span> &#123;</span></span><br><span class="line"><span class="undefined">    flex-direction: column;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.city</span> &#123;</span></span><br><span class="line"><span class="undefined">    flex-direction: column;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123;dataDirective&#125; <span class="keyword">from</span> <span class="string">'../../Common/js/data'</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    private: &#123;</span></span><br><span class="line"><span class="undefined">      showCityList: 1,</span></span><br><span class="line"><span class="undefined">      cities: dataDirective</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    onInit () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$page.setTitleBar(&#123; <span class="attr">text</span>: <span class="string">'组件block'</span> &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    toggleCityList () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.showCityList = <span class="keyword">this</span>.showCityList === <span class="number">1</span> ? <span class="number">0</span> : <span class="number">1</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>组件slot</strong></p><blockquote><p>slot节点用于向开发者额外开发的自定义ux组件中插入内容</p></blockquote><ul><li>通常自定义组件的模板中提供<code>slot</code>组件，当该组件被引入到页面组件中后，开发者可以灵活定义该自定义组件内部的子内容</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//自定义组件part1.ux</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- par1.ux --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123; header &#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123; footer &#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    props: [</span></span><br><span class="line"><span class="javascript">      <span class="string">'header'</span>, <span class="string">'footer'</span></span></span><br><span class="line"><span class="undefined">    ]</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">//自定义组件使用者页面index.ux</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- index.ux --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">src</span>=<span class="string">"./part1"</span>&gt;</span><span class="tag">&lt;/<span class="name">import</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">part1</span> <span class="attr">class</span>=<span class="string">"component"</span> <span class="attr">header</span>=<span class="string">"&#123;&#123;header&#125;&#125;"</span> <span class="attr">footer</span>=<span class="string">"&#123;&#123;footer&#125;&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span>slot节点内容<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">part1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.component</span> &#123;</span></span><br><span class="line"><span class="undefined">    flex-direction: column;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    private: &#123;</span></span><br><span class="line"><span class="javascript">      header: <span class="string">'HEAD'</span>,</span></span><br><span class="line"><span class="javascript">      footer: <span class="string">'FOOT'</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    onInit () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$page.setTitleBar(&#123; <span class="attr">text</span>: <span class="string">'组件slot'</span> &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在子组件中使用<code>slot</code>组件，使得子组件接纳调用者传入的子内容，从而动态渲染子组件，得到最终的页面</p></blockquote><h1 id="三、生命周期"><a href="#三、生命周期" class="headerlink" title="三、生命周期"></a>三、生命周期</h1><h2 id="3-1-APP的生命周期"><a href="#3-1-APP的生命周期" class="headerlink" title="3.1 APP的生命周期"></a>3.1 APP的生命周期</h2><blockquote><p>当前为APP的生命周期提供了两个回调函数：<code>onCreate</code>, <code>onDestroy</code>；可在<code>app.ux</code>中定义回调函数</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-7761414ce847115c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  natives</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'./util/asyncNatives'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  onCreate () &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">'Application onCreate'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  onDestroy () &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">'Application onDestroy'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 暴露给所有页面，在页面中通过：this.$app.$def.method1()访问</span></span><br><span class="line">  method1 () &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">'这是APP的方法'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 暴露给所有页面，在页面中通过：this.$app.$def.data1访问</span></span><br><span class="line">  data1: &#123;</span><br><span class="line">    name: <span class="string">'这是APP存的数据'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  natives</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在<code>app.ux</code>中，开发者可以做一些独立于页面的操作。比如：引入公共的JS资源，然后暴露给所有页面</li><li>在<code>app.ux</code>中，通过<code>this.$def</code>访问<code>app.ux</code>中定义的数据和方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.info(<span class="string">`获取：APP文件中的数据：<span class="subst">$&#123;<span class="keyword">this</span>.$def.data1.name&#125;</span>`</span>)</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">`执行：APP文件中的方法`</span>, <span class="keyword">this</span>.$def.method1())</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">`获取：manifest.json的应用名称：<span class="subst">$&#123;<span class="keyword">this</span>.$def.manifest.name&#125;</span>`</span>)</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">`获取：manifest.json的config.data的数据：<span class="subst">$&#123;<span class="keyword">this</span>.$data.name&#125;</span>`</span>)</span><br></pre></td></tr></table></figure><blockquote><p>在<code>pageName.ux</code>中，通过<code>this.$app.$def</code>访问<code>app.ux</code>中定义的数据和方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.info(<span class="string">`获取：APP文件中的数据：<span class="subst">$&#123;<span class="keyword">this</span>.$app.$def.data1.name&#125;</span>`</span>)</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">`执行：APP文件中的方法`</span>, <span class="keyword">this</span>.$app.$def.method1())</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">`获取：manifest.json的应用名称：<span class="subst">$&#123;<span class="keyword">this</span>.$app.$def.manifest.name&#125;</span>`</span>)</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">`获取：manifest.json的config.data的数据：<span class="subst">$&#123;<span class="keyword">this</span>.$app.$data.name&#125;</span>`</span>)</span><br></pre></td></tr></table></figure><p><strong>关于$app与$app.$def</strong></p><ul><li>前者代表框架为开发者暴露提供的APP对象；后者代表开发者在<code>app.ux</code>中导出的对象，放置业务相关的全局数据和方法</li><li>前者对象拥有<code>onCreate</code>, <code>onDestroy</code>生命周期；当应用启动时会执行<code>onCreate</code>方法，里面执行<code>this.variable1</code>的赋值是在<code>$app</code>对象上</li><li>后者对象中的<code>onCreate</code>, <code>onDestroy</code>方法并不会执行，作用仅仅只是把方法复制到前者对象上而已</li><li>这些全局方法在页面中：既可以通过<code>this.$app.method1()</code>调用，也可以通过<code>this.$app.$def.method1()</code>调用；不同之处在于前者可以取到之前赋值的<code>variable1</code>变量，而后者不可以取到（因为之前的赋值是在<code>$app</code>对象上执行的）</li></ul><h2 id="3-2-页面生命周期"><a href="#3-2-页面生命周期" class="headerlink" title="3.2 页面生命周期"></a>3.2 页面生命周期</h2><p><img src="https://upload-images.jianshu.io/upload_images/1480597-70b55809168cd48a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>onInit()</strong></p><blockquote><p>表示ViewModel的数据已经准备好，可以开始使用页面中的数据</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">private: &#123;</span><br><span class="line">  <span class="comment">// 生命周期的文本列表</span></span><br><span class="line">  lcList: []</span><br><span class="line">&#125;,</span><br><span class="line">onInit () &#123;</span><br><span class="line">  <span class="keyword">this</span>.$page.setTitleBar(&#123; <span class="attr">text</span>: <span class="string">'生命周期'</span> &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.lcList.push(<span class="string">'onInit'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`触发：onInit`</span>)</span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`执行：获取ViewModel的lcList属性：<span class="subst">$&#123;<span class="keyword">this</span>.lcList&#125;</span>`</span>)   <span class="comment">// 执行：获取ViewModel的lcList属性：onInit</span></span><br><span class="line">  <span class="comment">// $app信息</span></span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`获取：manifest.json的config.data的数据：<span class="subst">$&#123;<span class="keyword">this</span>.$app.$data.name&#125;</span>`</span>)</span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`获取：APP文件中的数据：<span class="subst">$&#123;<span class="keyword">this</span>.$app.$def.data1.name&#125;</span>`</span>)</span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`执行：APP文件中的方法`</span>, <span class="keyword">this</span>.$app.$def.method1())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>onReady()</strong></p><blockquote><p>表示ViewModel的模板已经编译完成，可以开始获取DOM节点（如：this.$element(idxxx)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">onReady () &#123;</span><br><span class="line">  <span class="keyword">this</span>.lcList.push(<span class="string">'onReady'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`触发：onReady`</span>)</span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`执行：获取模板节点：<span class="subst">$&#123;<span class="keyword">this</span>.$rootElement()&#125;</span>`</span>)   <span class="comment">// 执行：获取模板节点：&lt;div attr=&#123;&#125; style=&#123;"flexDirection":"column"&#125;&gt;...&lt;/div&gt;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>onShow(), onHide()</strong></p><blockquote><p>页面被切换隐藏时调用onHide()，页面被切换重新显示时调用onShow()</p></blockquote><ul><li>判断页面的显示状态，可以调用<code>ViewModel</code>的<code>$visible</code>属性：<code>true</code>表示显示，<code>false</code>表示隐藏</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">onShow () &#123;</span><br><span class="line">  <span class="keyword">this</span>.lcList.push(<span class="string">'onShow'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`触发：onShow`</span>)</span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`执行：获取页面显示状态属性：<span class="subst">$&#123;<span class="keyword">this</span>.$visible&#125;</span>`</span>)  <span class="comment">// true</span></span><br><span class="line">&#125;,</span><br><span class="line">onHide () &#123;</span><br><span class="line">  <span class="keyword">this</span>.lcList.push(<span class="string">'onHide'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`触发：onHide`</span>)</span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`执行：获取页面显示状态属性：<span class="subst">$&#123;<span class="keyword">this</span>.$visible&#125;</span>`</span>)  <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>onDestroy()</strong></p><blockquote><p>页面被销毁时调用，被销毁的可能原因有：用户从当前页面返回到上一页，或者用户打开了太多的页面，框架自动销毁掉部分页面，避免占用资源</p></blockquote><ul><li>所以，页面销毁时应该做一些释放资源的操作，如：取消接口订阅监听<code>geolocation.unsubscribe()</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">onDestroy () &#123;</span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`触发：onDestroy`</span>)</span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`执行：页面要被销毁，销毁状态：<span class="subst">$&#123;<span class="keyword">this</span>.$valid&#125;</span>，应该做取消接口订阅监听的操作: geolocation.unsubscribe()`</span>)    <span class="comment">// true，即将销毁</span></span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">`执行：页面已被销毁，不会执行`</span>)                <span class="comment">// 页面已销毁，不会执行</span></span><br><span class="line">  &#125;.bind(<span class="keyword">this</span>), <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>onBackPress()</strong></p><blockquote><p>当用户点击返回实体按键、左上角返回菜单、调用返回API时触发该事件</p></blockquote><ul><li>如果事件响应方法最后返回true表示不返回，自己处理业务逻辑（完毕后开发者自行调用API返回）；否则：不返回数据，或者返回其它数据：表示遵循系统逻辑：返回到上一页</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">onBackPress () &#123;</span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`触发：onBackPress`</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// true：表示自己处理；否则默认返回上一页</span></span><br><span class="line">  <span class="comment">// return true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>返回上一页的接口API：<code>router.back()</code></p></blockquote><p><strong>onMenuPress()</strong></p><blockquote><p>当使用原生的顶部标题栏时，可以通过manifest.json中的menu属性配置是否显示右上角的菜单</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">onMenuPress () &#123;</span><br><span class="line">  <span class="keyword">this</span>.lcList.push(<span class="string">'onMenuPress'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`触发：onMenuPress`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>A页面的生命周期接口的调用顺序</strong></p><ul><li>打开页面A：<code>onInit()</code> -&gt; <code>onReady()</code> -&gt; <code>onShow()</code></li><li>在页面A打开页面B：<code>onHide()</code></li><li>从页面B返回页面A：<code>onShow()</code></li><li>A页面返回：<code>onBackPress() -&gt; onHide() -&gt; onDestroy()</code></li></ul><h1 id="四、置顶对象"><a href="#四、置顶对象" class="headerlink" title="四、置顶对象"></a>四、置顶对象</h1><ul><li><code>$app</code> 应用对象</li><li><code>$app.$def</code> 获取在<code>app.ux</code>中暴露的对象</li><li><code>$app.$data</code> 获取在<code>manifest.json</code>的<code>config.data</code>中声明的全局数据</li><li><code>$page</code> 页面对象</li><li><code>$page.action</code> 获取打开当前页面的<code>action</code>。仅在当前页面是通过<code>filter</code>匹配的方式打开时有效，否则为<code>undefined</code>。参见<code>manifest</code></li><li><code>$page.uri</code> 获取打开当前页面的<code>uri</code>。仅在当前页面是通过<code>filter</code>匹配的方式打开时有效，否则为<code>undefined</code></li><li><code>$page.setTitleBar</code> 设置页面标题</li><li><code>$valid</code> 页面对象是否有效</li><li><code>$visible</code> 页面是否处于用户可见状态</li></ul><blockquote><p><code>this.$page.setTitleBar</code> 参数属性包括</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  text: <span class="string">'Hello QuickApp'</span>,        <span class="comment">//标题栏文字</span></span><br><span class="line">  textColor: <span class="string">'#ffff'</span>,            <span class="comment">//文字颜色</span></span><br><span class="line">  backgroundColor: <span class="string">'#434343'</span>,    <span class="comment">//背景颜色</span></span><br><span class="line">  backgroundOpacity: <span class="string">'0.8'</span>,      <span class="comment">//背景透明度</span></span><br><span class="line">  menu: <span class="literal">false</span>,      <span class="comment">//是否在标题栏右上角显示菜单按钮 | 设置当前</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五、全局对象"><a href="#五、全局对象" class="headerlink" title="五、全局对象"></a>五、全局对象</h1><ul><li><code>$element</code> 获取指定id的组件dom对象，如果没有指定id，则返回根组件<code>dom</code>对象用法：<code>this.$element(&#39;xxx&#39;)</code>获取id为xxx的组件实例对象 <code>this.$element()</code> 获取根组件实例对象</li><li><code>$root</code> 获取顶层<code>ViewModel</code></li><li><code>$parent</code> 获取父亲<code>ViewModel</code></li><li><code>$child</code> 获取指定id的自定义组件的<code>ViewModel</code>用法：<code>this.$child(&#39;xxx&#39;)</code> 获取<code>id</code>为<code>xxx</code>的<code>div</code>组件<code>ViewModel</code></li><li><code>$vm(弃用) 请使用上面</code>this.$child(‘xxx’)`替代</li><li><code>$forceUpdate</code> 强制页面刷新</li><li><code>$set</code> 添加数据属性，必须在<code>onInit</code>函数中使用，用法：<code>this.$set(&#39;key&#39;,value)</code></li><li><code>$delete</code> 删除数据属性，如果在<code>onInit</code>函数中使用，用法：<code>this.$delete(&#39;key&#39;)</code></li></ul><h1 id="六、元素属性方法"><a href="#六、元素属性方法" class="headerlink" title="六、元素属性方法"></a>六、元素属性方法</h1><blockquote><p>注意，获取元素应该在页面已渲染后，如 onReady 事件中或 onReady 事件执行完以后</p></blockquote><ul><li><code>$set</code> 添加数据属性，用法：<code>this.$vm(&#39;id&#39;).$set(&#39;key&#39;,value)</code></li><li><code>$delete</code>删除数据属性，用法：<code>this.$vm(&#39;id&#39;).$delete(&#39;key&#39;)</code></li><li><code>$on</code> 在当前页面注册监听事件， 可监听<code>$emit()</code>、 <code>$dispatch()</code>、 <code>$broadcast()</code>等触发的自定义事件，不能用于注册组件节点的事件响应</li><li><code>$off</code> 移除事件监听，参数 <code>fnHandler</code> 为可选，传递仅移除指定的响应函数，不传递则移除此事件的所有监听</li><li><code>$emit</code> 触发当前实例监听事件函数，与 <code>$on()</code> 配合使用</li></ul><h1 id="七、页面设计"><a href="#七、页面设计" class="headerlink" title="七、页面设计"></a>七、页面设计</h1><p><strong>布局和尺寸</strong></p><ul><li>采用<code>border-box</code> 模型且不支持 <code>box-sizing</code> 属性</li><li>目前仅支持长度单位<code>px</code>和<code>%</code></li><li>设计稿1px / 设计稿基准宽度 = 框架样式1px / 项目配置基准宽度(项目配置基准宽度:<code>/src/manifest.json</code> 中 <code>config.designWidth</code> 的值，默认<code>750</code>)</li></ul><p><strong>CSS</strong></p><ul><li>可以使用内联样式、<code>tag</code>选择器、<code>class</code>选择器、id选择器来为组件设置样式</li><li>仅可以使用并列选择、后代选择器、子代选择器</li><li>支持<code>@import</code>引入外部样式、内联样式、行内样式</li><li>颜色值不支持缩写，伪类支持不完全（支持<code>:disabled</code>,<code>:checked</code>,<code>:focus</code>等)</li></ul><h1 id="八、组件"><a href="#八、组件" class="headerlink" title="八、组件"></a>八、组件</h1><blockquote><p><code>&lt;text&gt;</code>、<code>&lt;a&gt;</code>、<code>&lt;span&gt;</code>、<code>&lt;label&gt;</code>组件为文本容器组件，其它组件不能直接放置文本内容</p></blockquote><p><strong><code>&lt;div&gt;</code>: 和 HTML 一样</strong></p><blockquote><p>支持样式 flex-direction, flex-wrap, justify-content, align-items, align-content</p></blockquote><p><strong><code>&lt;popup&gt;</code>: 气泡框</strong></p><ul><li>支持属性 <code>target</code> 和 <code>placement</code></li><li>支持样式 <code>mask-color</code></li><li>支持事件 <code>visibilitychange</code></li><li>自组件只能是<code>&lt;text&gt;</code></li></ul><p><strong><code>&lt;refresh&gt;</code>: 下拉刷新</strong></p><ul><li>支持属性 <code>offset</code>和 <code>refreshing</code></li><li>支持样式 <code>background-color</code> 和 <code>progress-color</code></li><li>支持事件 <code>refresh</code></li></ul><p><strong><code>&lt;richtext&gt;</code>: 富文本编辑器</strong></p><ul><li>支持属性 <code>type(值为 html)</code></li><li>支持<code>div</code>样式, <code>height</code> 无效</li><li>不支持子组件</li></ul><blockquote><p>更多详情 <a href="https://doc.quickapp.cn/widgets/div.html" target="_blank" rel="noopener">https://doc.quickapp.cn/widgets/div.html</a></p></blockquote><h1 id="九、页面切换和参数传递"><a href="#九、页面切换和参数传递" class="headerlink" title="九、页面切换和参数传递"></a>九、页面切换和参数传递</h1><h2 id="9-1-参数传递"><a href="#9-1-参数传递" class="headerlink" title="9.1 参数传递"></a>9.1 参数传递</h2><p><strong>传递方法1</strong></p><blockquote><p><code>&lt;a&gt;</code>标签配合 <code>queryString</code> 传递参数, 这个和前端一致</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/src/home/index.html?key=2333"</span>&gt;</span>跳转页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 添加变量参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/PageParams/receiveparams?key=&#123;&#123;title&#125;&#125;"</span>&gt;</span>携带参数key2跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>传递方法2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 导入模块</span><br><span class="line">import router from &apos;@system.router&apos;</span><br></pre></td></tr></table></figure><blockquote><p>通过 <code>router</code> 接口：<code>router.push()</code>, <code>router.replace()</code>, 接受一个如下结构的对象，用法这个和前端 <code>router</code> 一致。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  url: <span class="string">'/src/home/index.html'</span>,</span><br><span class="line">  params: &#123; <span class="attr">key</span>: <span class="number">2333</span> <span class="comment">/* 需要传递的参数 */</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>接收参数</strong></p><blockquote><p>上述2种传递参数的方法，其接收方法一致，在接收参数页面的 <code>protected</code>对象中获取即可（可设置默认值）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">   protected: &#123;</span><br><span class="line">     key: <span class="string">''</span></span><br><span class="line">   &#125;,</span><br><span class="line">   onInit () &#123;</span><br><span class="line">     <span class="keyword">this</span>.$page.setTitleBar(&#123; <span class="attr">text</span>: <span class="string">'接收参数'</span> &#125;)</span><br><span class="line"></span><br><span class="line">     <span class="comment">// js中输出页面传递的参数</span></span><br><span class="line">     <span class="built_in">console</span>.info(<span class="string">'key: '</span> + <span class="keyword">this</span>.key)</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>回传参数</strong></p><blockquote><p>开发者可能会遇到需要在页面之间回传参数的需求</p></blockquote><ul><li>假设存在页面A和页面B，先从页面A跳转至页面B，然后从页面B返回到页面A时，需要传递参数<br>= 此时，组件a和接口router传参不能满足需求，可以借助于app级别的对象：this.$app.$data</li></ul><blockquote><p>页面A实现代码如下</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tutorial-page"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/PageParams/returnParams/pageb"</span>&gt;</span>跳转到页面B<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.tutorial-page</span> &#123;</span></span><br><span class="line"><span class="undefined">    flex-direction: column;</span></span><br><span class="line"><span class="undefined">    justify-content: center;</span></span><br><span class="line"><span class="undefined">    align-items: center;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">  a &#123;</span></span><br><span class="line"><span class="undefined">    margin-top: 75px;</span></span><br><span class="line"><span class="undefined">    font-size: 30px;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#09ba07</span>;</span></span><br><span class="line"><span class="undefined">    text-decoration: underline;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    private: &#123;</span></span><br><span class="line"><span class="javascript">      msg: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    onInit () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$page.setTitleBar(&#123; <span class="attr">text</span>: <span class="string">'页面A'</span> &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    onShow () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 页面被切换显示时，从数据中检查是否有页面B传递来的数据</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (<span class="keyword">this</span>.$app.$data.dataPageB &amp;&amp; <span class="keyword">this</span>.$app.$data.dataPageB.gotoPage === <span class="string">'pageA'</span>) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 从数据中获取回传给本页面的数据</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> data = <span class="keyword">this</span>.$app.$data.dataPageB.params</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.msg = data.msg</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>页面B实现代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tutorial-page"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span>页面B<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">style</span>=<span class="string">"width: 450px;"</span> <span class="attr">placeholder</span>=<span class="string">"请输入回传给页面A的信息"</span> <span class="attr">onchange</span>=<span class="string">"updateMsg"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.tutorial-page</span> &#123;</span></span><br><span class="line"><span class="undefined">    flex-direction: column;</span></span><br><span class="line"><span class="undefined">    justify-content: center;</span></span><br><span class="line"><span class="undefined">    align-items: center;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    private: &#123;</span></span><br><span class="line"><span class="javascript">      msg: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    onInit () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$page.setTitleBar(&#123; <span class="attr">text</span>: <span class="string">'页面B'</span> &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    onHide () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 页面被切换隐藏时，将要传递的数据对象写入</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$app.$data.dataPageB = &#123;</span></span><br><span class="line"><span class="javascript">        gotoPage: <span class="string">'pageA'</span>,</span></span><br><span class="line"><span class="undefined">        params: &#123;</span></span><br><span class="line"><span class="javascript">          msg: <span class="keyword">this</span>.msg</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    updateMsg (e) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 更新input输入的信息文本</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.msg = e.text</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9-2-页面间通信"><a href="#9-2-页面间通信" class="headerlink" title="9.2 页面间通信"></a>9.2 页面间通信</h2><blockquote><p><a href="https://doc.quickapp.cn/framework/script.html" target="_blank" rel="noopener">https://doc.quickapp.cn/framework/script.html</a></p></blockquote><blockquote><p>会利用到一个构造函数 <code>new BroadcastChannel(string)</code>, 它接受一个字符串参数，作为实例的频道名称。它的实例具有以下属性和方法</p></blockquote><ul><li><code>name</code> 频道名称,区分不同的消息频道(注意：不同频道之间不可通信)。</li><li><code>postMessage</code> 用于在当前频道中广播消息</li><li><code>onmessage</code> 订阅消息。在频道中接收到广播消息之后，会给所有订阅者派发消息事件</li><li><code>close</code> 关闭当前的频道</li></ul><blockquote><p>其中 <code>onmessage</code> 事件有2个属性(通过 <code>event</code> 对象访问)</p></blockquote><ul><li><code>type</code> message</li><li><code>data</code> 接收到的消息内容</li></ul><h1 id="十、组件通信"><a href="#十、组件通信" class="headerlink" title="十、组件通信"></a>十、组件通信</h1><p><strong>父组件到子组件</strong></p><ul><li>子组件通过 <code>props</code> 获取父组件传入的值，见上文 template 部分</li><li>通过 <code>this.watch(props, callback)</code> 监控传入数据变化并调用回调函数</li><li>父组件通过<code>this.$broadcast()</code>完成事件触发，子组件通过<code>$on()</code>绑定事件并响应</li></ul><p><strong>子组件到父组件</strong></p><ul><li>父子组件传对象类型属于引用传递，可以直接修改父组件传入对象改变父组件数据</li><li>子组件通过<code>this.$dispatch()</code>完成事件触发，父组件通过<code>$on()</code>绑定事件并响应</li><li>子组件通过<code>this.$emit()</code>触发在节点上绑定的事件来执行父组件的方法</li></ul><blockquote><ul><li>注：<code>this.$broadcast()</code>、<code>this.$emit()</code> 和 <code>this.$dispatch()</code>参数一致</li><li>注：触发时传递参数，再接收时使用<code>event.detail</code>来获取参数</li><li>注：当传递结束后，可以调用<code>event.stop()</code>来结束传递</li></ul></blockquote><h1 id="十一、Deeplink"><a href="#十一、Deeplink" class="headerlink" title="十一、Deeplink"></a>十一、Deeplink</h1><blockquote><p>配合<code>&lt;web&gt;</code>标签框架支持通过链接从外部打开应用，格式</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//hapjs.org/app/&lt;package&gt;/[path][?key=value]</span></span><br><span class="line">https:<span class="comment">//hapjs.org/app/&lt;package&gt;/[path][?key=value]</span></span><br><span class="line">hap:<span class="comment">//app/&lt;package&gt;/[path][?key=value]</span></span><br></pre></td></tr></table></figure><ul><li><code>package</code>: 应用包名，必选</li><li><code>path</code>: 应用内页面的<code>path</code>，可选，默认为首页</li><li><code>key-value</code>: 希望传给页面的参数，可选，可以有多个</li></ul><blockquote><p>从传统网页调起需引入以下脚本</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&apos;//statres.quickapp.cn/quickapp/js/routerinline.min.js&apos;/&gt;</span><br></pre></td></tr></table></figure><h1 id="十二、事件监听与触发"><a href="#十二、事件监听与触发" class="headerlink" title="十二、事件监听与触发"></a>十二、事件监听与触发</h1><blockquote><p><code>$on</code> 用于监听自定义事件；<code>$off</code>移除对应的事件监听</p></blockquote><p><strong>$on(evtName, fnHandler)</strong></p><blockquote><p>在当前页面注册监听事件， 可监听<code>$emit()</code>、 <code>$dispatch()</code>、 <code>$broadcast()</code>等触发的自定义事件，不能用于注册组件节点的事件响应</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    onInit()&#123;</span><br><span class="line">      <span class="keyword">this</span>.$on(<span class="string">'customEvtType1'</span>, <span class="keyword">this</span>.customEvtType1Handler)</span><br><span class="line">    &#125;,</span><br><span class="line">    customEvtType1Handler(evt)&#123;</span><br><span class="line">      <span class="comment">// 事件类型，事件参数</span></span><br><span class="line">      <span class="built_in">console</span>.info(<span class="string">`触发事件：类型：<span class="subst">$&#123;evt.type&#125;</span>, 参数： <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(evt.detail)&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>$off(evtName, fnHandler)</strong></p><blockquote><p>移除事件监听，参数 fnHandler 为可选，传递仅移除指定的响应函数，不传递则移除此事件的所有监听</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    removeEventHandler () &#123;</span><br><span class="line">      <span class="comment">// 不传递fnHandler：移除所有监听</span></span><br><span class="line">      <span class="keyword">this</span>.$off(<span class="string">'customEvtType1'</span>)</span><br><span class="line">      <span class="comment">// 传递fnHandler：移除指定的监听函数</span></span><br><span class="line">      <span class="keyword">this</span>.$off(<span class="string">'customEvtType1'</span>, <span class="keyword">this</span>.customEvtType1Handler)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>触发ViewModel事件</strong></p><blockquote><p>页面的交互中可能会遇到一些非手动触发的需求，$emit() 通过触发当前实例上的事件达到动态触发事件的行为</p></blockquote><p><strong>$emit(evtName, evtDetail)</strong></p><ul><li>触发当前实例监听事件函数，与 <code>$on()</code> 配合使用</li><li>注意：<code>$emit()</code> 目前只触发 <code>$on</code> 所监听的事件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    emitEvent () &#123;</span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">'customEvtType1'</span>, &#123; <span class="attr">params</span>: <span class="string">'参数内容'</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>监听原生组件事件</strong></p><ul><li>原生组件支持一系列事件，如通用事件（如：click, disappear）、组件专有事件（如：focus）</li></ul><blockquote><ul><li>在响应函数执行时通过target获取，如：onClickHandler</li><li>在响应函数绑定时传递参数，如：onClickHandler2</li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tutorial-page"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">id</span>=<span class="string">"elNode1"</span> <span class="attr">class</span>=<span class="string">"&#123;&#123; elClassName + 1 &#125;&#125;"</span> <span class="attr">disabled</span>=<span class="string">"false"</span> <span class="attr">onclick</span>=<span class="string">"onClickHandler"</span>&gt;</span>组件节点1<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">id</span>=<span class="string">"elNode2"</span> <span class="attr">class</span>=<span class="string">"class-static-1 &#123;&#123; elClassName + 2 &#125;&#125;"</span> <span class="attr">onclick</span>=<span class="string">"onClickHandler2('参数1', argName)"</span>&gt;</span>组件节点2<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.tutorial-page</span> &#123;</span></span><br><span class="line"><span class="undefined">    flex-direction: column;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    private: &#123;</span></span><br><span class="line"><span class="javascript">      elClassName: <span class="string">'class-dynamic'</span>,</span></span><br><span class="line"><span class="javascript">      argName: <span class="string">'动态参数'</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    onClickHandler (evt) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 事件类型，参数详情</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.info(<span class="string">`触发事件：类型：<span class="subst">$&#123;evt.type&#125;</span>, 详情： <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(evt.detail)&#125;</span>`</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (evt.target) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.info(<span class="string">`触发事件：节点：<span class="subst">$&#123;evt.target.id&#125;</span>, <span class="subst">$&#123;evt.target.attr.disabled&#125;</span>`</span>)</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    onClickHandler2 (arg1, arg2, evt) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 事件类型，事件参数，target</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.info(<span class="string">`触发事件：类型：<span class="subst">$&#123;evt.type&#125;</span>, 参数： <span class="subst">$&#123;arg1&#125;</span>, <span class="subst">$&#123;arg2&#125;</span>`</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>触发原生组件事件</strong></p><blockquote><p>通过<code>$emitElement()</code>完成事件的动态触发</p></blockquote><ul><li><strong>$emitElement(evtName, evtDetail, id)</strong></li></ul><blockquote><p>可以触发指定组件<code>id</code>的事件，通过<code>evt.detail</code>获取传递的参数；该方法对自定义组件无效</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tutorial-page"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">onclick</span>=<span class="string">"emitElement"</span>&gt;</span>触发组件节点的事件：click<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">id</span>=<span class="string">"elNode1"</span> <span class="attr">class</span>=<span class="string">"&#123;&#123; elClassName + 1 &#125;&#125;"</span> <span class="attr">disabled</span>=<span class="string">"false"</span> <span class="attr">onclick</span>=<span class="string">"onClickHandler"</span>&gt;</span>组件节点1<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">id</span>=<span class="string">"elNode2"</span> <span class="attr">class</span>=<span class="string">"class-static-1 &#123;&#123; elClassName + 2 &#125;&#125;"</span> <span class="attr">onclick</span>=<span class="string">"onClickHandler2('参数1', argName)"</span>&gt;</span>组件节点2<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.tutorial-page</span> &#123;</span></span><br><span class="line"><span class="undefined">    flex-direction: column;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    private: &#123;</span></span><br><span class="line"><span class="javascript">      elClassName: <span class="string">'class-dynamic'</span>,</span></span><br><span class="line"><span class="javascript">      argName: <span class="string">'动态参数'</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    onClickHandler (evt) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 事件类型，参数详情</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.info(<span class="string">`触发事件：类型：<span class="subst">$&#123;evt.type&#125;</span>, 详情： <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(evt.detail)&#125;</span>`</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (evt.target) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.info(<span class="string">`触发事件：节点：<span class="subst">$&#123;evt.target.id&#125;</span>, <span class="subst">$&#123;evt.target.attr.disabled&#125;</span>`</span>)</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    onClickHandler2 (arg1, arg2, evt) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 事件类型，事件参数，target</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.info(<span class="string">`触发事件：类型：<span class="subst">$&#123;evt.type&#125;</span>, 参数： <span class="subst">$&#123;arg1&#125;</span>, <span class="subst">$&#123;arg2&#125;</span>`</span>);</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    emitElement () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 注意：通过此类方式的事件不会携带target属性，开发者可以通过detail参数实现</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$emitElement(<span class="string">'click'</span>, &#123; <span class="attr">params</span>: <span class="string">'参数内容'</span> &#125;, <span class="string">'elNode1'</span>)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="十三、一些问题"><a href="#十三、一些问题" class="headerlink" title="十三、一些问题"></a>十三、一些问题</h1><ul><li>自定义属性名不能采用驼峰命名，否则值永远是 <code>undefined</code></li><li><code>show</code> 属性并不好用，没起什么作用</li><li>类似 <code>onInit</code> 等等函数是页面生命周期，不是组件生命周期，不会因为组件状态变化而执行</li><li><code>display</code>类型只有 <code>flex</code> 和 <code>none</code></li><li>子盒子不能将父盒子撑高</li><li>不遵循盒子模型，类似但不完全等同于 <code>border-box</code></li></ul><h1 id="十四、快应用开发资源"><a href="#十四、快应用开发资源" class="headerlink" title="十四、快应用开发资源"></a>十四、快应用开发资源</h1><ul><li><a href="https://github.com/l455202325/APIDemo" target="_blank" rel="noopener">快应用API Demo 集合 QuickAPP</a></li><li><a href="https://github.com/yesvods/awesome-quick-app" target="_blank" rel="noopener">awesome-quick-app</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;MD原文件 &lt;a href=&quot;https://github.com/poetries/poetries.github.io/blob/dev/source/_posts/quick-app-summary.md&quot; target=&quot;_blank&quot; r
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="快应用" scheme="http://blog.poetries.top/tags/%E5%BF%AB%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript数组方法总结篇</title>
    <link href="http://blog.poetries.top/2018/08/18/javaScript-arr-summary/"/>
    <id>http://blog.poetries.top/2018/08/18/javaScript-arr-summary/</id>
    <published>2018-08-18T10:40:43.000Z</published>
    <updated>2018-08-27T04:06:20.122Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、数组预览图"><a href="#一、数组预览图" class="headerlink" title="一、数组预览图"></a>一、数组预览图</h3><p><img src="https://upload-images.jianshu.io/upload_images/1480597-3067afe2cc23ff1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="数组方法"></p><h3 id="二、会改变原数组的方法"><a href="#二、会改变原数组的方法" class="headerlink" title="二、会改变原数组的方法"></a>二、会改变原数组的方法</h3><h4 id="2-1-push"><a href="#2-1-push" class="headerlink" title="2.1 push()"></a>2.1 push()</h4><ul><li>方法在数组的尾部添加一个或多个元素，并返回数组的长度</li></ul><blockquote><p>参数: item1, item2, …, itemX ,要添加到数组末尾的元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> length = arr.push(<span class="string">'末尾1'</span>,<span class="string">'末尾2'</span>); <span class="comment">// 返回数组长度</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr,length)</span><br><span class="line"></span><br><span class="line"><span class="comment">// [1, 2, 3, "末尾1", "末尾2"] 5</span></span><br></pre></td></tr></table></figure><blockquote><p>返回值： 数组的长度</p></blockquote><h4 id="2-2-pop"><a href="#2-2-pop" class="headerlink" title="2.2  pop()"></a>2.2  pop()</h4><ul><li>方法删除数组的最后一个元素，减小数组长度并返回它删除的值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//组合使用push()和pop()能够用JavaScript数组实现先进后出的栈</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stack = [];</span><br><span class="line"></span><br><span class="line">stack.push(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">// 返回长度2，这时stack的值是[1,2]</span></span><br><span class="line"></span><br><span class="line">stack.pop() <span class="comment">// 返回删除的值2，这时stack的值是[1]</span></span><br></pre></td></tr></table></figure><blockquote><p>返回值： 从数组中删除的元素(当数组为空时返回undefined)。</p></blockquote><h4 id="2-3-unshift"><a href="#2-3-unshift" class="headerlink" title="2.3 unshift()"></a>2.3 unshift()</h4><blockquote><p>方法在数组的头部添加一个或多个元素，并将已存在的元素移动到更高索引的位置来获得足够的空间，最后返回数组新的长度</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> length = arr.unshift(<span class="number">1</span>,<span class="number">2</span>); <span class="comment">// 返回长度是5</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr, length)</span><br><span class="line"></span><br><span class="line"><span class="comment">//[1, 2, 3, 4, 5] 5</span></span><br></pre></td></tr></table></figure><blockquote><p>返回值： 返回数组新的长度</p></blockquote><h4 id="2-4-shift"><a href="#2-4-shift" class="headerlink" title="2.4  shift()"></a>2.4  shift()</h4><blockquote><p>方法删除数组的第一个元素并将其返回，然后把所有随后的元素下移一个位置来填补数组头部的空缺，返回值是删除的元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> item = arr.shift(); <span class="comment">// 返回删除的值1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr, item)</span><br><span class="line"></span><br><span class="line"><span class="comment">// [2, 3] 1</span></span><br></pre></td></tr></table></figure><blockquote><p>返回值： 从数组中删除的元素; 如果数组为空则返回undefined</p></blockquote><h4 id="2-5-splice"><a href="#2-5-splice" class="headerlink" title="2.5 splice()"></a>2.5 splice()</h4><blockquote><p>方法是在数组中插入或删除元素的通用方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// start不超过数组长度(以下操作是连续的)</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">arr.splice(<span class="number">2</span>) <span class="comment">// arr是[1,2]，返回值是[3,4,5]</span></span><br><span class="line"></span><br><span class="line">arr.splice(<span class="number">1</span>,<span class="number">1</span>) <span class="comment">// arr是[1]，返回值是[2]</span></span><br><span class="line"></span><br><span class="line">arr.splice(<span class="number">0</span>,<span class="number">3</span>) <span class="comment">// arr是[]，返回值是[1],因为此时数组从第0位开始不够3位，所以是删除从0开始到最后的所有元素。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// start大于数组长度(以下操作是连续的)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">arr.splice(<span class="number">5</span>) <span class="comment">// arr是[1,2,3,4,5]，返回值是[]</span></span><br><span class="line"></span><br><span class="line">arr.splice(<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>) <span class="comment">// arr是[1,2,3,4,5,6]，返回值是[]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arr.splice(<span class="number">5</span>,<span class="number">3</span>,<span class="number">7</span>) <span class="comment">// arr是[1,2,3,4,5,7] 返回值是[6]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// start是负数(以下操作是连续的)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">arr.splice(<span class="number">-3</span>,<span class="number">2</span>); <span class="comment">// arr是[1,2,5], 返回值是[3,4]</span></span><br><span class="line">arr.splice(<span class="number">-4</span>); <span class="comment">// arr是[],返回值是[1,2,5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入数组时，是插入数组本身，而不是数组元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">arr.splice(<span class="number">1</span>,<span class="number">0</span>,[<span class="number">2</span>,<span class="number">3</span>]) <span class="comment">// arr是[1,[2,3],4,5]，返回值是[]</span></span><br></pre></td></tr></table></figure><h4 id="2-6-sort"><a href="#2-6-sort" class="headerlink" title="2.6 sort()"></a>2.6 sort()</h4><blockquote><p><code>sort()</code> 方法将数组中的元素排序并返回排序后的数组</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stringArray = [<span class="string">"Blue"</span>, <span class="string">"Humpback"</span>, <span class="string">"Beluga"</span>];</span><br><span class="line"><span class="keyword">var</span> numberArray = [<span class="number">40</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">200</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compareNumbers</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'stringArray:'</span> + stringArray.join());</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Sorted:'</span> + stringArray.sort());</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'numberArray:'</span> + numberArray.join());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有使用比较函数时，数字并不会按照我们设想的那样排序</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Sorted without a compare function:'</span>+ numberArray.sort());</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Sorted with compareNumbers:'</span>+ numberArray.sort(compareNumbers));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印如下</span></span><br><span class="line"><span class="comment">// stringArray: Blue,Humpback,Beluga</span></span><br><span class="line"><span class="comment">// Sorted: Beluga,Blue,Humpback</span></span><br><span class="line"><span class="comment">// numberArray: 40,1,5,200</span></span><br><span class="line"><span class="comment">// Sorted without a compare function: 1,200,40,5</span></span><br><span class="line"><span class="comment">// Sorted with compareNumbers: 1,5,40,200</span></span><br></pre></td></tr></table></figure><blockquote><p>返回值： 返回排序后的数组。原数组已经被排序后的数组代替</p></blockquote><h4 id="2-7-reverse"><a href="#2-7-reverse" class="headerlink" title="2.7  reverse()"></a>2.7  reverse()</h4><blockquote><p>方法将数组中的元素颠倒顺序，返回逆序的数组</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">arr.reverse() <span class="comment">// arr是[3,2,1]，返回值是[3,2,1]</span></span><br></pre></td></tr></table></figure><blockquote><p>返回值： 返回顺序颠倒后的数组。原数组已经被排序后的数组代替</p></blockquote><h4 id="2-8-fill"><a href="#2-8-fill" class="headerlink" title="2.8 fill()"></a>2.8 fill()</h4><blockquote><p>方法用一个固定值填充一个数组中从起始索引到终止索引内的全部元素</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.fill(value[, start[, end]])</span><br></pre></td></tr></table></figure><ul><li><code>value</code> 用来填充数组元素的值。</li><li><code>start</code> (可选) 起始索引，默认值为0。</li><li><code>end</code> (可选) 终止索引，默认值为 this.length。</li><li>如果 start 是个负数, 则开始索引会被自动计算成为 <code>length+start</code>, 其中 length 是 this 对象的 <code>length</code>属性值. 如果 end 是个负数, 则结束索引会被自动计算成为 <code>length+end</code></li></ul><blockquote><p>返回值： 修改后的数组</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>); <span class="comment">// [4, 4, 4]</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>, <span class="number">1</span>); <span class="comment">// [1, 4, 4]</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>); <span class="comment">// [1, 4, 3]</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>, <span class="number">3</span>, <span class="number">3</span>); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>, <span class="number">-3</span>, <span class="number">-2</span>); <span class="comment">// [4, 2, 3]</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>, <span class="literal">NaN</span>, <span class="literal">NaN</span>); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>(<span class="number">3</span>).fill(<span class="number">4</span>); <span class="comment">// [4, 4, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//fill 方法故意被设计成通用方法, 该方法不要求 this 是数组对象。</span></span><br><span class="line"></span><br><span class="line">[].fill.call(&#123; <span class="attr">length</span>: <span class="number">3</span> &#125;, <span class="number">4</span>); <span class="comment">// &#123;0: 4, 1: 4, 2: 4, length: 3&#125;</span></span><br></pre></td></tr></table></figure><h3 id="三、不改变原数组的方法"><a href="#三、不改变原数组的方法" class="headerlink" title="三、不改变原数组的方法"></a>三、不改变原数组的方法</h3><h4 id="3-1-slice"><a href="#3-1-slice" class="headerlink" title="3.1 slice()"></a>3.1 slice()</h4><blockquote><p>方法返回一个从开始到结束（不包括结束）选择的数组的一部分浅拷贝到一个新数组对象。且原始数组不会被修改</p></blockquote><ul><li>返回值： 一个含有提取元素的新数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr1 = arr.slice(<span class="number">1</span>,<span class="number">3</span>); <span class="comment">// arr是[1,2,3,4,5]， arr1是[2,3]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = arr.slice(<span class="number">-2</span>,<span class="number">-1</span>); <span class="comment">// arr是[1,2,3,4,5], arr2是[4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始位置在结束位置后面，得到的数组是空</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr3 = arr.slice(<span class="number">-2</span>, <span class="number">-3</span>); <span class="comment">// arr是[1,2,3,4,5], arr3是[]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr4 = arr.slice(<span class="number">2</span>, <span class="number">1</span>); <span class="comment">// arr是[1,2,3,4,5], arr4是[]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果元素是个对象引用 （不是实际的对象），slice 会拷贝这个对象引用到新的数组里。两个对象引用都引用了同一个对象。如果被引用的对象发生改变，则新的和原来的数组中的这个元素也会发生改变。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [&#123;<span class="attr">name</span>: <span class="string">'xiaoming'</span>&#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr1 = arr.slice(); <span class="comment">// arr是[&#123;name: xiaoming&#125;]，arr1是[&#123;name: 'xiaoming'&#125;]</span></span><br><span class="line"></span><br><span class="line">arr1[<span class="number">0</span>].name = <span class="string">'xiaogang'</span>; <span class="comment">// arr是[&#123;name: 'xiaogang'&#125;]，arr1是[&#123;name: 'xiaogang'&#125;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于字符串、数字及布尔值来说（不是 String、Number 或者 Boolean 对象），slice 会拷贝这些值到新的数组里。在别的数组里修改这些字符串或数字或是布尔值，将不会影响另一个数组。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr1 = arr.slice(); <span class="comment">// arr是[1,2,3]，arr1是[1,2,3]</span></span><br><span class="line"></span><br><span class="line">arr1[<span class="number">1</span>] = <span class="string">"two"</span>; <span class="comment">// arr是[1,2,3]，arr1是[1,"tow",3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当然，如果向两个数组任一中添加了新元素（简单或者引用类型），则另一个不会受到影响</span></span><br></pre></td></tr></table></figure><h4 id="3-2-join"><a href="#3-2-join" class="headerlink" title="3.2  join()"></a>3.2  join()</h4><blockquote><p>方法将数组（或一个类数组对象）中所有元素都转化为字符串并连接在一起，返回最后生成的字符串</p></blockquote><ul><li>返回值： 一个所有数组元素连接的字符串。如果 arr.length 为0，则返回空字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str1 = num.join(); <span class="comment">// 1,2,3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str2 = num.join(<span class="string">', '</span>) <span class="comment">// 1, 2, 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str3 = num.join(<span class="string">''</span>) <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//所有的数组元素被转换成字符串，再用一个分隔符将这些字符串连接起来。如果元素是undefined 或者null， 则会转化成空字符串。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num = [<span class="number">1</span>,<span class="literal">null</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> str1 = num.join(); <span class="comment">// 1,,3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果数组中的元素是数组，会将里面的数组也调用join()</span></span><br><span class="line"><span class="keyword">let</span> num = [[<span class="number">1</span>,<span class="number">2</span>],<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str1 = num.join(<span class="string">'-'</span>); <span class="comment">// 1,2-3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果数组中的元素是对象，对象会被转为[object Object]字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num = [&#123;<span class="attr">num</span>: <span class="number">1</span>&#125;,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str1 = num.join(<span class="string">'-'</span>); <span class="comment">// [object Object]-2-3</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 扁平化简单的二维数组</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">11</span>, [<span class="number">22</span>, <span class="number">33</span>], [<span class="number">44</span>, <span class="number">55</span>], <span class="number">66</span>];</span><br><span class="line"><span class="keyword">const</span> flatArr = arr.join().split(<span class="string">','</span>); <span class="comment">// ["11", "22", "33", "44", "55", "66"]</span></span><br></pre></td></tr></table></figure><h4 id="3-3-toString"><a href="#3-3-toString" class="headerlink" title="3.3 toString()"></a>3.3 toString()</h4><blockquote><p>方法将数组的每个元素转化为字符串(如有必要将调用元素的<code>toString()</code>方法)并且输出用逗号分割的字符串列表。返回一个字符串表示数组中的元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].toString(); <span class="comment">// 1,2,3</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>,[<span class="number">2</span>,<span class="string">'c'</span>]].toString(); <span class="comment">//1,2,c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上与不使用任何参数调用join()方法返回的字符串是一样的。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下的这个例子要跟下面的toLocaleString对照看</span></span><br><span class="line"></span><br><span class="line">[&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;,<span class="number">1</span>,<span class="keyword">new</span> <span class="built_in">Date</span>()].toString() <span class="comment">//"[object Object],1,Sat Jul 07 2018 18:43:45 GMT+0800 (中国标准时间)"</span></span><br></pre></td></tr></table></figure><blockquote><p>注意： 当数组和字符串操作的时候，js 会调用这个方法将数组自动转换成字符串</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1,2,3]+&apos;abc&apos; //1,2,3abc</span><br></pre></td></tr></table></figure><blockquote><p>返回值： 返回一个字符串表示数组中的元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 扁平化简单的二维数组</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">11</span>, [<span class="number">22</span>, <span class="number">33</span>], [<span class="number">44</span>, <span class="number">55</span>], <span class="number">66</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> flatArr = arr.toString().split(<span class="string">','</span>); <span class="comment">// ["11", "22", "33", "44", "55", "66"]</span></span><br></pre></td></tr></table></figure><h4 id="3-4-toLocaleString"><a href="#3-4-toLocaleString" class="headerlink" title="3.4  toLocaleString()"></a>3.4  toLocaleString()</h4><blockquote><p>数组中的元素将使用各自的 toLocaleString 方法转成字符串，这些字符串将使用一个特定语言环境的字符串（例如一个逗号 “,”）隔开</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组中的元素将会使用各自的 toLocaleString 方法：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object: Object.prototype.toLocaleString()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Number: Number.prototype.toLocaleString()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Date: Date.prototype.toLocaleString()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> prices = [<span class="string">'￥7'</span>, <span class="number">500</span>, <span class="number">8123</span>, <span class="number">12</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不带参数</span></span><br><span class="line"></span><br><span class="line">prices.toLocaleString(); <span class="comment">// "￥7,500,8,123,12"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//带参数</span></span><br><span class="line"></span><br><span class="line">prices.toLocaleString(<span class="string">'ja-JP'</span>, &#123; <span class="attr">style</span>: <span class="string">'currency'</span>, <span class="attr">currency</span>: <span class="string">'JPY'</span> &#125;); <span class="comment">// "￥7,500,8,123,12"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//MDN上的举例中说是 "￥7,￥500,￥8,123,￥12"，在浏览器和Node中验证了返回的都是 "￥7,500,8,123,12" 啊！</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下的这个例子要跟上面的toString对照看</span></span><br><span class="line"></span><br><span class="line">[&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;,<span class="number">1</span>,<span class="keyword">new</span> <span class="built_in">Date</span>()].toLocaleString() <span class="comment">//"[object Object],1,2018/7/7 下午6:45:00"</span></span><br></pre></td></tr></table></figure><blockquote><p>返回值： 表示数组元素的字符串</p></blockquote><h4 id="3-5-concat"><a href="#3-5-concat" class="headerlink" title="3.5  concat()"></a>3.5  concat()</h4><blockquote><p>它的元素包括调用concat()的原始数组的元素和concat()的每个参数，但是要注意，concat()不会递归扁平化数组的数组，concat()也不会修改调用的数组</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].concat([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]) <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"></span><br><span class="line">[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>].concat(<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>],[[<span class="number">4</span>,<span class="number">5</span>]]) <span class="comment">// ["a", "b", "c", 1, 2, 3, [4,5]]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// concat方法不会改变this或任何作为参数提供的数组，而是返回一个浅拷贝,所以原始数组和新数组都引用相同的对象。 如果引用的对象被修改，新数组和原始数组都会变。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">2</span>,obj];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">1</span>].concat(arr1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr1,arr2) <span class="comment">//[2,&#123;a:1&#125;],[1,2,&#123;a:1&#125;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//记录下上面的打印结果之后修改obj</span></span><br><span class="line"></span><br><span class="line">obj.a = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr1,arr2) <span class="comment">////[2,&#123;a:2&#125;],[1,2,&#123;a:2&#125;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 说了是浅拷贝，而且原数组也不改变，那我们就可以用它来实现数组的浅拷贝功能</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第一种</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num2 = num1.concat();</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num2 = [].concat(num1);</span><br><span class="line">num2[<span class="number">0</span>] = <span class="string">'a'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num1,num2); <span class="comment">// [1, 2, 3] ["a", 2, 3]</span></span><br></pre></td></tr></table></figure><h4 id="3-6-isArray"><a href="#3-6-isArray" class="headerlink" title="3.6 isArray()"></a>3.6 isArray()</h4><blockquote><p>用于确定传递的值是否是一个 Array</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面的函数调用都返回 true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray([]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray([<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="keyword">new</span> <span class="built_in">Array</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里注意：Array.prototype 也是一个数组,一个属性值不是索引的数组。[constructor: ƒ, concat: ƒ, find: ƒ, findIndex: ƒ, pop: ƒ, …]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="built_in">Array</span>.prototype);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面的函数调用都返回 false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray();</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray(&#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="literal">undefined</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="number">17</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="string">'Array'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray(&#123; <span class="attr">__proto__</span>: <span class="built_in">Array</span>.prototype &#125;);</span><br></pre></td></tr></table></figure><h3 id="四、数组遍历、映射、过滤、检测、简化等方法"><a href="#四、数组遍历、映射、过滤、检测、简化等方法" class="headerlink" title="四、数组遍历、映射、过滤、检测、简化等方法"></a>四、数组遍历、映射、过滤、检测、简化等方法</h3><h4 id="4-1-forEach"><a href="#4-1-forEach" class="headerlink" title="4.1 forEach()"></a>4.1 forEach()</h4><blockquote><p>方法从头到尾遍历数组，为每个元素调用指定的函数</p></blockquote><ul><li><code>callback</code> 为数组中每个元素执行的函数，该函数接收三个参数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、 空元素不遍历,undefined和null是会遍历的。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> numberArr = [<span class="number">1</span>,<span class="number">2</span>,,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">numberArr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value,index,array</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value,index,array)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印信息如下，可见空元素是不会遍历的</span></span><br><span class="line"><span class="comment">//1 0 [1, 2, empty, 3]</span></span><br><span class="line"><span class="comment">//2 1 [1, 2, empty, 3]</span></span><br><span class="line"><span class="comment">//3 3 [1, 2, empty, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> nullArr = [<span class="number">1</span>,<span class="number">2</span>,<span class="literal">null</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">nullArr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value,index,array</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value,index,array)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印信息如下，null是会遍历的</span></span><br><span class="line"><span class="comment">//1 0 (4) [1, 2, null, 3]</span></span><br><span class="line"><span class="comment">//2 1 (4) [1, 2, null, 3]</span></span><br><span class="line"><span class="comment">//null 2 (4) [1, 2, null, 3]</span></span><br><span class="line"><span class="comment">//3 3 (4) [1, 2, null, 3]</span></span><br><span class="line"><span class="comment">//2、已删除的项不会被遍历到。如果已访问的元素在迭代时被删除了,之后的元素将被跳过</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> numberArr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">numberArr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value,index,array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(index === <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> numberArr[<span class="number">2</span>]; <span class="comment">//删除第三项</span></span><br><span class="line">    <span class="comment">//或者numberArr.pop()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(value,index,array)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印信息如下：</span></span><br><span class="line"><span class="comment">// 1 0 (3) [1, 2, empty]</span></span><br><span class="line"><span class="comment">// 2 1 (3) [1, 2, empty]</span></span><br><span class="line"><span class="keyword">let</span> numberArr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">numberArr1.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value,index,array</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(index === <span class="number">1</span>) &#123;</span><br><span class="line">    numberArr1.shift() <span class="comment">//遍历到第二项的时候，删除第一项</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(value,index,array)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印信息如下,遍历到第二项的时候，删除第一项，会跳过第三项</span></span><br><span class="line"><span class="comment">// 1 0 (4) [1, 2, 3, 4]</span></span><br><span class="line"><span class="comment">// 2 1 (3) [2, 3, 4]</span></span><br><span class="line"><span class="comment">// 4 2 (3) [2, 3, 4]</span></span><br><span class="line"><span class="comment">// 3、forEach 遍历的范围在第一次调用 callback 前就会确定。调用forEach 后添加到数组中的项不会被 callback 访问到。如果已经存在的值被改变，则传递给 callback 的值是 forEach 遍历到他们那一刻的值。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value,index,array</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(index === <span class="number">0</span>) &#123;</span><br><span class="line">        arr.push(<span class="string">'新增的不会被遍历到'</span>)</span><br><span class="line">        arr[<span class="number">2</span>] = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(value,index,array)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 0 (4) [1, 2, 4, "新增的不会被遍历到"]</span></span><br><span class="line"><span class="comment">// 2 1 (4) [1, 2, 4, "新增的不会被遍历到"]</span></span><br><span class="line"><span class="comment">// 4 2 (4) [1, 2, 4, "新增的不会被遍历到"]</span></span><br><span class="line"><span class="comment">// 4、使用thisArg参数 和 箭头函数使用thisArg</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">arr</span>: <span class="string">'thisArg'</span>&#125;</span><br><span class="line"></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.arr)</span><br><span class="line">&#125;,obj)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印三次 'thisArg'</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">arr</span>: <span class="string">'thisArg'</span>&#125;</span><br><span class="line">arr.forEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.arr)</span><br><span class="line">&#125;,obj)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印三次 undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5、forEach无法中途退出循环，只能用return退出本次回调，进行下一次回调</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = arr.forEach(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(value == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(value)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result) <span class="comment">// undefined ，即使中间return vlaue，也还是undefined</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印value的值如下，说明return 并不能终止循环</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h4 id="4-2-map"><a href="#4-2-map" class="headerlink" title="4.2 map()"></a>4.2 map()</h4><blockquote><p>方法创建一个新数组，其结果是该数组中的每个元素都调用一个callback函数后返回的结果</p></blockquote><ul><li>返回值： 一个新数组，每个元素都是回调函数的结果</li><li>不要用 <code>map</code> 代替 <code>forEach</code>,<code>map</code> 会创建一个新的数组，占用内存。如果你不用 <code>map</code> 的返回值，那你就应当使用 <code>forEach</code></li></ul><h4 id="4-3-filter"><a href="#4-3-filter" class="headerlink" title="4.3 filter()"></a>4.3 filter()</h4><ul><li>方法返回的数组元素是调用的数组的一个子集。传入的函数时用来逻辑判定的，该函数返回 true 或 false,如果返回值为true或能转化为true的值，那么传递给判断函数的元素就是这个子集的成员，它将被添加倒一个作为返回值的数组中</li><li>返回值： 一个新的通过测试的元素的集合的数组，如果没有通过测试则返回空数组</li></ul><h4 id="4-4-every"><a href="#4-4-every" class="headerlink" title="4.4 every()"></a>4.4 every()</h4><blockquote><p>方法测试数组的所有元素是否都通过了指定函数的测试。当且仅当针对数组中的所有元素调用判定函数都返回true，它才返回true。</p></blockquote><ul><li>空数组上调用every方法，返回 true，因为空数组没有元素，所以空数组中所有元素都符合给定的条件</li><li>返回值： 一个布尔值，当所有的元素都符合条件才返回true，否则返回false</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">12</span>,<span class="number">34</span>,<span class="number">5</span>,<span class="number">23</span>,<span class="number">44</span>];</span><br><span class="line"><span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> result = arr.every(<span class="function"><span class="keyword">function</span> (<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    num++;</span><br><span class="line">    <span class="keyword">return</span> element &gt; <span class="number">10</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result,num) <span class="comment">// 打印 false 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可见发现5这个小于10的元素后，遍历立即终止，num为3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">12</span>,<span class="number">34</span>,,<span class="number">23</span>,<span class="number">44</span>];</span><br><span class="line"><span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> result = arr.every(<span class="function"><span class="keyword">function</span> (<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">num++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> element &gt; <span class="number">10</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result,num) <span class="comment">// 打印 true 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不会遍历没有赋值的索引位置，所以num为4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = [].every(<span class="function"><span class="keyword">function</span> (<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> element &gt; <span class="number">10</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result) <span class="comment">// 打印 true</span></span><br></pre></td></tr></table></figure><h4 id="4-5-some"><a href="#4-5-some" class="headerlink" title="4.5 some()"></a>4.5 some()</h4><blockquote><p>方法测试数组中的某些元素是否通过由提供的函数实现的测试。当数组中至少有一个元素调用判定函数返回true，它就返回true，当且仅当数组中的所有元素调用判定函数都返回false，它才返回false</p></blockquote><ul><li>空数组调用some，返回false</li><li>返回值： 只要数组中的任意一个元素在回调函数中返回的是真值，就返回true，否则为false</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个简单的例子说明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isBiggerThan10</span>(<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(index)</span><br><span class="line">    <span class="keyword">return</span> element &gt; <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>].some(isBiggerThan10); <span class="comment">// 返回值是false，打印的index是0,1,2,3,4</span></span><br><span class="line"></span><br><span class="line">[<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>].some(isBiggerThan10); <span class="comment">// 返回值是true，打印的index是0，找到符合元素之后立即返回</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现一个跟includes方法类似的功能</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">include</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> arr.some(<span class="function">(<span class="params">element</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> element === value</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">include(<span class="number">2</span>) <span class="comment">// true</span></span><br><span class="line">include(<span class="number">4</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = [].some(<span class="function"><span class="keyword">function</span> (<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> element &gt; <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result) <span class="comment">// 打印 false</span></span><br></pre></td></tr></table></figure><h4 id="4-6-reduce-和-reduceRight"><a href="#4-6-reduce-和-reduceRight" class="headerlink" title="4.6 reduce() 和 reduceRight()"></a>4.6 reduce() 和 reduceRight()</h4><blockquote><p>这两个方法使用指定的函数将数组元素进行组合，生成单个值。这在函数式编程中是常见的操作，也可以称为“注入”和“折叠”。reduceRight() 和 reduce() 工作原理是一样的，不同的是reduceRight() 按照数组索引从高到低（从右到左）处理数组，而不是从低到高</p></blockquote><ul><li>如果数组为空且没有提供initialValue，会抛出TypeError 。如果数组仅有一个元素（无论位置如何）并且没有提供initialValue， 或者有提供initialValue但是数组为空，那么此唯一值将被返回并且callback不会被执行</li><li>返回值： 函数累计处理的结果</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sum = arr.reduce(<span class="function">(<span class="params">x,y</span>) =&gt;</span> x + y,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sum) <span class="comment">// 15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 看一下initialValue传和不传的区别</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">accumulator,currentValue,currentIndex,arr</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(currentIndex)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> accumulator + currentValue;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1,2,3,4,5 没传入initialValue，索引是从1开始</span></span><br><span class="line"></span><br><span class="line">arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">accumulator,currentValue,currentIndex,arr</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(currentIndex)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> accumulator + currentValue;</span><br><span class="line">&#125;,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 0,1,2,3,4,5 传入initialValue，索引从0开始</span></span><br><span class="line"><span class="comment">// 应用到二维数组展开</span></span><br><span class="line"><span class="keyword">let</span> arr = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].reduce(</span><br><span class="line">    (a, b) =&gt; a.concat(b)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br><span class="line"><span class="comment">// [0, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h4 id="4-7-indexof"><a href="#4-7-indexof" class="headerlink" title="4.7  indexof()"></a>4.7  indexof()</h4><blockquote><p>方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1</p></blockquote><ul><li>注意： <code>indexOf</code> 使用严格相等（即 <code>===</code>）比较 <code>searchElement</code> 和数组中的元素。而且<code>indexOf()</code>不能识别 <code>NaN</code></li><li>返回值： 首个被找到的元素在数组中的索引位置; 若没有找到则返回 -1</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">9</span>];</span><br><span class="line">array.indexOf(<span class="number">2</span>) <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">array.indexOf(<span class="number">7</span>) <span class="comment">// -1</span></span><br><span class="line">array.indexOf(<span class="number">9</span>, <span class="number">2</span>) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">array.indexOf(<span class="number">9</span>, <span class="number">3</span>) <span class="comment">// -1</span></span><br><span class="line"></span><br><span class="line">array.indexOf(<span class="number">2</span>, <span class="number">-1</span>) <span class="comment">// -1</span></span><br><span class="line"></span><br><span class="line">array.indexOf(<span class="number">2</span>, <span class="number">-3</span>) <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">array.indexOf(<span class="number">2</span>, <span class="number">-4</span>) <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> array1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="literal">NaN</span>];</span><br><span class="line"></span><br><span class="line">array1.indexOf(<span class="literal">NaN</span>) <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><h4 id="4-8-includes"><a href="#4-8-includes" class="headerlink" title="4.8 includes()"></a>4.8 includes()</h4><blockquote><p>方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回false。 ES7新增</p></blockquote><ul><li>返回值： 一个布尔值，根据情况，如果包含则返回 true，否则返回false</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>); <span class="comment">// true</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">4</span>); <span class="comment">// false</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">3</span>, <span class="number">3</span>); <span class="comment">// false</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">3</span>, <span class="number">-1</span>); <span class="comment">// true</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">3</span>, <span class="number">-4</span>); <span class="comment">// true</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="literal">NaN</span>].includes(<span class="literal">NaN</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="4-9-find-和-findIndex"><a href="#4-9-find-和-findIndex" class="headerlink" title="4.9 find() 和 findIndex()"></a>4.9 find() 和 findIndex()</h4><blockquote><p>find 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined。findIndex 方法返回数组中满足提供的测试函数的第一个元素的索引。否则返回-1</p></blockquote><ul><li><code>find</code> 方法，当某个元素通过 callback 的测试时，返回数组中的一个值，否则返回 undefined。</li><li><code>findIndex</code>方法，返回数组中满足提供的测试函数的第一个元素的索引。否则返回-1</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// find</span></span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">10</span>].find(<span class="function">(<span class="params">n</span>) =&gt;</span> n &lt; <span class="number">0</span>); <span class="comment">// 返回元素-5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">10</span>,<span class="literal">NaN</span>].find(<span class="function">(<span class="params">n</span>) =&gt;</span> <span class="built_in">Object</span>.is(<span class="literal">NaN</span>, n)); <span class="comment">// 返回元素NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// findIndex</span></span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">10</span>].findIndex(<span class="function">(<span class="params">n</span>) =&gt;</span> n &lt; <span class="number">0</span>); <span class="comment">// 返回索引2</span></span><br><span class="line"><span class="keyword">let</span> b = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">10</span>,<span class="literal">NaN</span>].findIndex(<span class="function">(<span class="params">n</span>) =&gt;</span> <span class="built_in">isNaN</span>(n)); <span class="comment">// 返回索引4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 稀疏数组</span></span><br><span class="line"><span class="keyword">let</span> a =[<span class="number">1</span>,,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">a.find(<span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(index++) <span class="comment">//0,1,2 第二次是empty也会调用一次，而且返回为true，立即退出</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> n === <span class="number">3</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="4-10-其他"><a href="#4-10-其他" class="headerlink" title="4.10 其他"></a>4.10 其他</h4><ul><li><code>keys()</code>方法返回一个新的Array迭代器，它包含数组中每个索引的键</li><li><code>values()</code> 方法返回一个新的Array迭代器，它包含数组中每个索引的值</li><li><code>entries()</code>方法返回一个新的Array迭代器，该对象包含数组中每个索引的键/值对</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、数组预览图&quot;&gt;&lt;a href=&quot;#一、数组预览图&quot; class=&quot;headerlink&quot; title=&quot;一、数组预览图&quot;&gt;&lt;/a&gt;一、数组预览图&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Immutable之回顾</title>
    <link href="http://blog.poetries.top/2018/08/13/immutable-review/"/>
    <id>http://blog.poetries.top/2018/08/13/immutable-review/</id>
    <published>2018-08-13T12:00:24.000Z</published>
    <updated>2018-08-27T04:06:20.122Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Immutable几种数据结构"><a href="#一、Immutable几种数据结构" class="headerlink" title="一、Immutable几种数据结构"></a>一、Immutable几种数据结构</h2><p><img src="https://upload-images.jianshu.io/upload_images/1480597-3275d98aea9c495c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Immutable几种数据结构"></p><h2 id="二、fromJS"><a href="#二、fromJS" class="headerlink" title="二、fromJS"></a>二、fromJS</h2><p><img src="https://upload-images.jianshu.io/upload_images/1480597-7e32935b6f0a992d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="fromJS"></p><h2 id="三、toJS"><a href="#三、toJS" class="headerlink" title="三、toJS"></a>三、toJS</h2><p><img src="https://upload-images.jianshu.io/upload_images/1480597-2dcb4403cb5dedda.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="toJS"></p><h2 id="四、Is"><a href="#四、Is" class="headerlink" title="四、Is"></a>四、Is</h2><p><img src="https://upload-images.jianshu.io/upload_images/1480597-d9bfcdafb2a6f811.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Is"></p><h2 id="五、数据读取"><a href="#五、数据读取" class="headerlink" title="五、数据读取"></a>五、数据读取</h2><p><img src="https://upload-images.jianshu.io/upload_images/1480597-d2ddb1f7ebbeb23f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="数据读取"></p><h2 id="六、数据修改"><a href="#六、数据修改" class="headerlink" title="六、数据修改"></a>六、数据修改</h2><p><img src="https://upload-images.jianshu.io/upload_images/1480597-c2a867804ae9d504.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="数据修改"></p><h2 id="七、List中的各种删除与插入"><a href="#七、List中的各种删除与插入" class="headerlink" title="七、List中的各种删除与插入"></a>七、List中的各种删除与插入</h2><p><img src="https://upload-images.jianshu.io/upload_images/1480597-706d3f73f1dce76a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="List中的各种删除与插入"></p><h2 id="八、关于merge"><a href="#八、关于merge" class="headerlink" title="八、关于merge"></a>八、关于merge</h2><p><img src="https://upload-images.jianshu.io/upload_images/1480597-77524b0bdcca757e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="关于merge"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、Immutable几种数据结构&quot;&gt;&lt;a href=&quot;#一、Immutable几种数据结构&quot; class=&quot;headerlink&quot; title=&quot;一、Immutable几种数据结构&quot;&gt;&lt;/a&gt;一、Immutable几种数据结构&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Immutable" scheme="http://blog.poetries.top/tags/Immutable/"/>
    
  </entry>
  
  <entry>
    <title>小程序之登录</title>
    <link href="http://blog.poetries.top/2018/08/12/wx-login/"/>
    <id>http://blog.poetries.top/2018/08/12/wx-login/</id>
    <published>2018-08-12T16:01:20.000Z</published>
    <updated>2018-08-27T04:06:20.130Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、登录流程"><a href="#一、登录流程" class="headerlink" title="一、登录流程"></a>一、登录流程</h2><p><img src="http://upload-images.jianshu.io/upload_images/1781505-f4bda834cc1d7210.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>小程序内通过<code>wx.login</code>接口获得<code>code</code></li><li>将<code>code</code>传入后台，后台对微信服务器发起一个<code>https</code>请求换取<code>openid</code>、<code>session_key</code>(解密<code>encryptedData</code>、<code>iv</code>得到的)</li><li>后台生成一个自身的<code>3rd_session</code>（以此为<code>key</code>值保持<code>openid</code>和<code>session_key</code>），返回给前端。PS:微信方的<code>openid</code>和<code>session_key</code>并没有发回给前端小程序 </li><li>小程序拿到<code>3rd_session</code>之后保持在本地</li><li>小程序请求登录区内接口，通过<code>wx.checkSession</code>检查登录态，如果失效重新走上述登录流程，否则待上<code>3rd_session</code>到后台进行登录验证</li></ul><blockquote><p>通过上面<code>wx.login</code>和<code>wx.getUserInfo</code>两个api拿到相应的信息,并通过上方接口传给自己的服务器. </p></blockquote><p><strong>登录获取用户信息</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wx.login(&#123;</span><br><span class="line">    success(res)&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(res)</span><br><span class="line">       <span class="comment">//code:"fda41033Z0fdak3dfae01dffaaWXQA1vwQ4dfae0Akg3e0Z0k3E"</span></span><br><span class="line">       <span class="comment">//errMsg:"login:ok"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wx.getUserInfo(&#123;</span><br><span class="line">   success(res)&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(res)</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><p>返回的信息</p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-2f4df6ebf02b9e33.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="userInfo"></p><p><strong>需要传输的信息有7个参数</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">appid  小程序唯一标识</span><br><span class="line">secret  小程序的 app secret</span><br><span class="line">js_code  <span class="comment">//wx.login登录时获取的 code,用于后续获取session_key</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//下面两个参数用户服务器端签名校验用户信息的</span></span><br><span class="line">signature 使用 sha1( rawData + sessionkey ) 得到字符串，用于校验用户信息。</span><br><span class="line">rawData  不包括敏感信息的原始数据字符串，用于计算签名。</span><br><span class="line"></span><br><span class="line"><span class="comment">//下面两个参数是用于解密获取openId和UnionId的</span></span><br><span class="line">encryptedData  包括敏感数据在内的完整用户信息的加密数据</span><br><span class="line">iv 加密算法的初始向量</span><br></pre></td></tr></table></figure><ul><li>可精简为以下三个参数. </li><li>其余的签名校验的参数可省略,而<code>appid</code>和<code>secret</code>可以直接写在服务器.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">js_code <span class="comment">//  wx.login登录时获取的 code,用于后续获取session_key</span></span><br><span class="line">encryptedData  包括敏感数据在内的完整用户信息的加密数据</span><br><span class="line">iv 加密算法的初始向量</span><br></pre></td></tr></table></figure><blockquote><p>服务端处理返回token、sessionId过程省略…</p></blockquote><h2 id="二、登录态校验"><a href="#二、登录态校验" class="headerlink" title="二、登录态校验"></a>二、登录态校验</h2><blockquote><p>主要用到<code>checkSession</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">wx.checkSession(&#123;</span><br><span class="line">    success: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'warning wx.checkSession OK, but no viewerId'</span>, res);</span><br><span class="line">    &#125;,</span><br><span class="line">    fail: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'wx.checkSession failed:'</span>, res);</span><br><span class="line">    &#125;,</span><br><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        wx.login(&#123;</span><br><span class="line">            success: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'wx.login success:'</span>, res);</span><br><span class="line">                <span class="comment">// 登录自有系统</span></span><br><span class="line">                API.login.wechat(&#123;</span><br><span class="line">                    js_code: res.code</span><br><span class="line">                &#125;, d =&gt; &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'private login response:'</span>, d);</span><br><span class="line">                    <span class="keyword">if</span> (d.code === <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">'private login success:'</span>, d);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">let</span> viewerId = d.data.user.user_id;</span><br><span class="line">                        _m.globalData.viewerId = viewerId;</span><br><span class="line"></span><br><span class="line">                        wx.setStorageSync(<span class="string">'user_id'</span>, viewerId);</span><br><span class="line"></span><br><span class="line">                        callback &amp;&amp; callback();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="built_in">console</span>.error(<span class="string">'get user_id error'</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    ignoreError: <span class="literal">true</span></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            fail: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'wx.login failed:'</span>, res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="三、完整登录代码示例"><a href="#三、完整登录代码示例" class="headerlink" title="三、完整登录代码示例"></a>三、完整登录代码示例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CONFIG = <span class="built_in">require</span>(<span class="string">'./config.js'</span>)</span><br><span class="line">App(&#123;</span><br><span class="line">    globalData:&#123;</span><br><span class="line">        viewerId:<span class="literal">null</span>,</span><br><span class="line">        userInfo:<span class="literal">null</span></span><br><span class="line">    &#125;,</span><br><span class="line">    onLaunch()&#123;</span><br><span class="line">        <span class="comment">// 注册当前用户</span></span><br><span class="line">        <span class="keyword">this</span>.register()</span><br><span class="line">    &#125;,</span><br><span class="line">    login: <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> _m = <span class="keyword">this</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 开发环境重复使用就好</span></span><br><span class="line">        <span class="keyword">if</span> (!viewerId &amp;&amp; CONFIG.IS_DEBUG) &#123;</span><br><span class="line">            viewerId = wx.getStorageSync(<span class="string">'user_id'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 先检查是否有登录态，且获取过用户数据；否则触发一次登录</span></span><br><span class="line">        <span class="keyword">if</span> (viewerId) &#123;</span><br><span class="line">            _m.globalData.viewerId = viewerId;</span><br><span class="line">            callback &amp;&amp; callback();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            wx.checkSession(&#123;</span><br><span class="line">                success: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'warning wx.checkSession OK, but no viewerId'</span>, res);</span><br><span class="line">                &#125;,</span><br><span class="line">                fail: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'wx.checkSession failed:'</span>, res);</span><br><span class="line">                &#125;,</span><br><span class="line">                complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    wx.login(&#123;</span><br><span class="line">                        success: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                            <span class="built_in">console</span>.log(<span class="string">'wx.login success:'</span>, res);</span><br><span class="line">                            <span class="comment">// 登录自有系统</span></span><br><span class="line">                            API.login.wechat(&#123;</span><br><span class="line">                                js_code: res.code</span><br><span class="line">                            &#125;, d =&gt; &#123;</span><br><span class="line">                                <span class="built_in">console</span>.log(<span class="string">'private login response:'</span>, d);</span><br><span class="line">                                <span class="keyword">if</span> (d.code === <span class="number">0</span>) &#123;</span><br><span class="line">                                    <span class="built_in">console</span>.log(<span class="string">'private login success:'</span>, d);</span><br><span class="line">    </span><br><span class="line">                                    <span class="keyword">let</span> viewerId = d.data.user.user_id;</span><br><span class="line">                                    _m.globalData.viewerId = viewerId;</span><br><span class="line">    </span><br><span class="line">                                    wx.setStorageSync(<span class="string">'user_id'</span>, viewerId);</span><br><span class="line">    </span><br><span class="line">                                    callback &amp;&amp; callback();</span><br><span class="line">                                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                    <span class="built_in">console</span>.error(<span class="string">'get user_id error'</span>);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;, &#123;</span><br><span class="line">                                ignoreError: <span class="literal">true</span></span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125;,</span><br><span class="line">                        fail: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                            <span class="built_in">console</span>.log(<span class="string">'wx.login failed:'</span>, res);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    register: <span class="function"><span class="keyword">function</span>(<span class="params">needTry, callback</span>)</span>&#123;</span><br><span class="line">        !callback &amp;&amp; (callback = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">this</span>.login(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">// 如果曾经授权过，则不用再请求了</span></span><br><span class="line">            <span class="comment">/*try &#123;</span></span><br><span class="line"><span class="comment">                let registedTime = wx.getStorageSync('REGISTED.'+ this.globalData.viewerId);</span></span><br><span class="line"><span class="comment">                // 7天内授权过的不再请求，不再更新资料</span></span><br><span class="line"><span class="comment">                if (registedTime &amp;&amp; ((new Date).getTime()-registedTime) &lt; 604800000) &#123;</span></span><br><span class="line"><span class="comment">                    callback();</span></span><br><span class="line"><span class="comment">                    return;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125; catch (e) &#123;&#125;*/</span></span><br><span class="line">        </span><br><span class="line">            wx.getUserInfo(&#123;</span><br><span class="line">                success: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">let</span> params = &#123;&#125;;</span><br><span class="line">        </span><br><span class="line">                    <span class="keyword">this</span>.globalData.userInfo = res.userInfo;</span><br><span class="line">                    params.owner = &#123;</span><br><span class="line">                        id: <span class="keyword">this</span>.globalData.viewerId,</span><br><span class="line">        </span><br><span class="line">                        connected_profile: &#123;</span><br><span class="line">                            nickname : res.userInfo.nickName||<span class="string">''</span>,  <span class="comment">// 用户昵称</span></span><br><span class="line">                            profile_pic_url: res.userInfo.avatarUrl||<span class="string">''</span>,  <span class="comment">// 头像， avatarUrl</span></span><br><span class="line">                            language : res.userInfo.language||<span class="string">''</span>,  <span class="comment">// 语言, "zh_TW"</span></span><br><span class="line">                            gender : res.userInfo.gender,</span><br><span class="line">                            geo: &#123;</span><br><span class="line">                                country: res.userInfo.country,</span><br><span class="line">                                province: res.userInfo.province,</span><br><span class="line">                                city: res.userInfo.city</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    API.profile.update(params, (d) =&gt; &#123;</span><br><span class="line">                        <span class="comment">// 静默注册</span></span><br><span class="line">                        <span class="keyword">if</span>(d.code === <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                wx.setStorageSync(<span class="string">'USERINFO.'</span>+ <span class="keyword">this</span>.globalData.viewerId, <span class="keyword">this</span>.globalData.userInfo);</span><br><span class="line">                                wx.setStorageSync(<span class="string">'REGISTED.'</span>+ <span class="keyword">this</span>.globalData.viewerId, (<span class="keyword">new</span> <span class="built_in">Date</span>).getTime());</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">        </span><br><span class="line">                            callback();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, &#123;</span><br><span class="line">                        ignoreError: <span class="literal">true</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;,</span><br><span class="line">                fail: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'get user info failed: not authorized.'</span>, <span class="built_in">arguments</span>);</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// 强制弹一次授权</span></span><br><span class="line">                    <span class="keyword">if</span> (needTry) &#123;</span><br><span class="line">                        wx.openSetting(&#123;</span><br><span class="line">                            success: <span class="function">(<span class="params">res</span>)=&gt;</span> &#123;</span><br><span class="line">                                <span class="keyword">if</span> (res.authSetting[<span class="string">'scope.userInfo'</span>]) &#123;</span><br><span class="line">                                    wx.showToast(&#123;</span><br><span class="line">                                        title: LANG.AuthorizeSuccess,</span><br><span class="line">                                        duration: CONFIG.SHOWTOAST_DURATION,</span><br><span class="line">                                    &#125;);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;,</span><br><span class="line">                            fail: <span class="function">(<span class="params">res</span>)=&gt;</span> &#123;</span><br><span class="line">                                <span class="built_in">console</span>.log(<span class="string">'user not permit to authorize.'</span>, <span class="built_in">arguments</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                withCredentials: <span class="literal">false</span><span class="comment">// 不包含openid 等敏感信息</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.login(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">// 塞入常规环境数据</span></span><br><span class="line">            <span class="keyword">let</span> pageInstance = <span class="keyword">this</span>.getCurrentPageInstance(),</span><br><span class="line">                context, screenWidth, screenHeight;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*if (this.globalData.device.system_info) &#123;</span></span><br><span class="line"><span class="comment">                screenWidth = this.globalData.device.system_info.screen_width;</span></span><br><span class="line"><span class="comment">                screenHeight = this.globalData.device.system_info.screen_height;</span></span><br><span class="line"><span class="comment">            &#125; else &#123;</span></span><br><span class="line"><span class="comment">                let systemInfo = wx.getSystemInfoSync();</span></span><br><span class="line"><span class="comment">                if (systemInfo) &#123;</span></span><br><span class="line"><span class="comment">                    screenWidth = systemInfo.screenWidth;</span></span><br><span class="line"><span class="comment">                    screenHeight = systemInfo.screenHeight;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;*/</span></span><br><span class="line">            context = &#123;</span><br><span class="line">                LANG: LANG,</span><br><span class="line">                CDN: CONFIG.CDN_HOST,</span><br><span class="line">                isNoContent: <span class="literal">false</span>,</span><br><span class="line">                HashtagType: CONFIG.HashtagType,</span><br><span class="line">                VerbType: CONFIG.VerbType,</span><br><span class="line">                GridImageWidthMode: CONFIG.GridImageWidthMode,</span><br><span class="line">                STICKER_MAKER_ENABLED: CONFIG.STICKER_MAKER_ENABLED,</span><br><span class="line">                UGC_ENABLED: CONFIG.UGC_ENABLED,</span><br><span class="line">                UGC_IMAGE_COUNT_LIMIT: CONFIG.UGC_IMAGE_COUNT_LIMIT,</span><br><span class="line">                ReviewStateText: CONFIG.ReviewStateText,</span><br><span class="line"></span><br><span class="line">                networkType: <span class="keyword">this</span>.globalData.device.network ? <span class="keyword">this</span>.globalData.device.network.network_type : NetworkType.UNKNOWN,</span><br><span class="line"></span><br><span class="line">                IS_DEV: CONFIG.IS_DEV,</span><br><span class="line">                IS_SHOW_CONSOLE: CONFIG.IS_SHOW_CONSOLE,</span><br><span class="line">                DEBUG_DATA: [],</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 全部配置都放开读</span></span><br><span class="line">                CONFIG: CONFIG,</span><br><span class="line"></span><br><span class="line">                videoPlayStatus: &#123;&#125;,</span><br><span class="line">                </span><br><span class="line">                CURRENT_PAGE: pageInstance.data.PAGE,</span><br><span class="line"></span><br><span class="line">                hideVideo: <span class="literal">false</span>,  <span class="comment">// 因为小程序中video不能被任何元素遮挡，所以增加此变量，用于一些浮层展示时，隐藏视频</span></span><br><span class="line">                </span><br><span class="line">                updated_time: (<span class="keyword">new</span> <span class="built_in">Date</span>).getTime()  <span class="comment">// 页面上次更新时间</span></span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            pageInstance.setData(&#123;</span><br><span class="line">                context: context</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.sendLaunchEvent();</span><br><span class="line"></span><br><span class="line">            callback &amp;&amp; callback();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、登录流程&quot;&gt;&lt;a href=&quot;#一、登录流程&quot; class=&quot;headerlink&quot; title=&quot;一、登录流程&quot;&gt;&lt;/a&gt;一、登录流程&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_image
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="小程序" scheme="http://blog.poetries.top/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>小程序之自定义组件</title>
    <link href="http://blog.poetries.top/2018/08/12/wx-component/"/>
    <id>http://blog.poetries.top/2018/08/12/wx-component/</id>
    <published>2018-08-12T15:43:20.000Z</published>
    <updated>2018-08-27T04:06:20.130Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、创建自定义组件"><a href="#一、创建自定义组件" class="headerlink" title="一、创建自定义组件"></a>一、创建自定义组件</h2><blockquote><p>类似于页面，一个自定义组件由 <code>json</code> <code>wxml</code> <code>wxss</code> <code>js</code> 4个文件组成。要编写一个自定义组件，首先需要在 json 文件中进行自定义组件声明（将 component 字段设为 true 可这一组文件设为自定义组件）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;component&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、使用自定义组件"><a href="#二、使用自定义组件" class="headerlink" title="二、使用自定义组件"></a>二、使用自定义组件</h2><blockquote><p>使用已注册的自定义组件前，首先要在页面的 json 文件中进行引用声明。此时需要提供每个自定义组件的标签名和对应的自定义组件文件路径</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"usingComponents"</span>: &#123;</span><br><span class="line">    <span class="string">"component-tag-name"</span>: <span class="string">"path/to/the/custom/component"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这样，在页面的 wxml 中就可以像使用基础组件一样使用自定义组件。节点名即自定义组件的标签名，节点属性即传递给组件的属性值。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;view&gt;</span><br><span class="line">  &lt;!-- 以下是对一个自定义组件的引用 --&gt;</span><br><span class="line">  &lt;component-tag-name inner-text=&quot;Some text&quot;&gt;&lt;/component-tag-name&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><h2 id="三、组件模版"><a href="#三、组件模版" class="headerlink" title="三、组件模版"></a>三、组件模版</h2><ul><li>在组件模板中可以提供一个 <code>&lt;slot&gt;</code>节点，用于承载组件引用时提供的子节点</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 组件模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span>这里是组件的内部节点<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引用组件的页面模版 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component-tag-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这部分内容将被放置在组件 &lt;slot&gt; 的位置上 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span>这里是插入到组件slot中的内容<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">component-tag-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>模版数据绑定</strong></p><blockquote><p>可以使用数据绑定，这样就可以向子组件的属性传递动态数据</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引用组件的页面模版 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component-tag-name</span> <span class="attr">prop-a</span>=<span class="string">"&#123;&#123;dataFieldA&#125;&#125;"</span> <span class="attr">prop-b</span>=<span class="string">"&#123;&#123;dataFieldB&#125;&#125;"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这部分内容将被放置在组件 &lt;slot&gt; 的位置上 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span>这里是插入到组件slot中的内容<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">component-tag-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>组件wxml的slot</strong></p><ul><li>在组件的<code>wxml</code>中可以包含 <code>slot</code> 节点，用于承载组件使用者提供的<code>wxml</code>结构。</li><li>默认情况下，一个组件的<code>wxml</code>中只能有一个<code>slot</code>。需要使用多<code>slot</code>时，可以在组件js中声明启用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Component(&#123;</span><br><span class="line">  options: &#123;</span><br><span class="line">    multipleSlots: <span class="literal">true</span> <span class="comment">// 在组件定义时的选项中启用多slot支持</span></span><br><span class="line">  &#125;,</span><br><span class="line">  properties: &#123; <span class="comment">/* ... */</span> &#125;,</span><br><span class="line">  methods: &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>此时，可以在这个组件的wxml中使用多个slot，以不同的 name 来区分</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 组件模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"before"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span>这里是组件的内部细节<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"after"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>使用时，用 slot 属性来将节点插入到不同的slot上</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引用组件的页面模版 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component-tag-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这部分内容将被放置在组件 &lt;slot name="before"&gt; 的位置上 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">slot</span>=<span class="string">"before"</span>&gt;</span>这里是插入到组件slot name="before"中的内容<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这部分内容将被放置在组件 &lt;slot name="after"&gt; 的位置上 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">slot</span>=<span class="string">"after"</span>&gt;</span>这里是插入到组件slot name="after"中的内容<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">component-tag-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四、Component构造器"><a href="#四、Component构造器" class="headerlink" title="四、Component构造器"></a>四、Component构造器</h2><blockquote><p>Component构造器可用于定义组件，调用Component构造器时可以指定组件的属性、数据、方法等</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">Component(&#123;</span><br><span class="line"></span><br><span class="line">  behaviors: [],</span><br><span class="line"></span><br><span class="line">  properties: &#123;</span><br><span class="line">    myProperty: &#123; <span class="comment">// 属性名</span></span><br><span class="line">      type: <span class="built_in">String</span>, <span class="comment">// 类型（必填），目前接受的类型包括：String, Number, Boolean, Object, Array, null（表示任意类型）</span></span><br><span class="line">      value: <span class="string">''</span>, <span class="comment">// 属性初始值（可选），如果未指定则会根据类型选择一个</span></span><br><span class="line">      observer: <span class="function"><span class="keyword">function</span>(<span class="params">newVal, oldVal, changedPath</span>) </span>&#123;</span><br><span class="line">         <span class="comment">// 属性被改变时执行的函数（可选），也可以写成在methods段中定义的方法名字符串, 如：'_propertyChange'</span></span><br><span class="line">         <span class="comment">// 通常 newVal 就是新设置的数据， oldVal 是旧数据</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    myProperty2: <span class="built_in">String</span> <span class="comment">// 简化的定义方式</span></span><br><span class="line">  &#125;,</span><br><span class="line">  data: &#123;&#125;, <span class="comment">// 私有数据，可用于模版渲染</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 生命周期函数，可以为函数，或一个在methods段中定义的方法名</span></span><br><span class="line">  attached: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">  moved: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">  detached: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line">    onMyButtonTap: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">        <span class="comment">// 更新属性和数据的方法与更新页面数据的方法类似</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 内部方法建议以下划线开头</span></span><br><span class="line">    _myPrivateMethod: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="comment">// 这里将 data.A[0].B 设为 'myPrivateData'</span></span><br><span class="line">      <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">        <span class="string">'A[0].B'</span>: <span class="string">'myPrivateData'</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    _propertyChange: <span class="function"><span class="keyword">function</span>(<span class="params">newVal, oldVal</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>在 properties 定义段中，属性名采用驼峰写法（propertyName）；</li><li>在 wxml 中，指定属性值时则对应使用连字符写法（<code>component-tag-name property-name=&quot;attr value&quot;</code>），应用于数据绑定时采用驼峰写法（<code>attr=&quot;&quot;</code>）</li></ul><h2 id="五、组件间通信与事件"><a href="#五、组件间通信与事件" class="headerlink" title="五、组件间通信与事件"></a>五、组件间通信与事件</h2><p><strong>组件间通信</strong></p><blockquote><p>组件间的基本通信方式有以下几种。</p></blockquote><ul><li>WXML 数据绑定：用于父组件向子组件的指定属性设置数据</li><li>事件：用于子组件向父组件传递数据，可以传递任意数据。</li><li>如果以上两种方式不足以满足需要，父组件还可以通过 <code>this.selectComponent</code> 方法获取子组件实例对象，这样就可以直接访问组件的任意数据和方法</li></ul><p><strong>监听事件</strong></p><ul><li>自定义组件可以触发任意的事件，引用组件的页面可以监听这些事件</li><li>监听自定义组件事件的方法与监听基础组件事件的方法完全一致</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 当自定义组件触发“myevent”事件时，调用“onMyEvent”方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component-tag-name</span> <span class="attr">bindmyevent</span>=<span class="string">"onMyEvent"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 或者可以写成 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component-tag-name</span> <span class="attr">bind:myevent</span>=<span class="string">"onMyEvent"</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  onMyEvent: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    e.detail <span class="comment">// 自定义组件触发事件时提供的detail对象</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>触发事件</strong></p><blockquote><p>自定义组件触发事件时，需要使用 <code>triggerEvent</code> 方法，指定事件名、<code>detail</code>对象和事件选项</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在自定义组件中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">"onTap"</span>&gt;</span>点击这个按钮将触发“myevent”事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Component(&#123;</span><br><span class="line">  properties: &#123;&#125;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    onTap: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> myEventDetail = &#123;&#125; <span class="comment">// detail对象，提供给事件监听函数</span></span><br><span class="line">      <span class="keyword">var</span> myEventOption = &#123;&#125; <span class="comment">// 触发事件的选项</span></span><br><span class="line">      <span class="keyword">this</span>.triggerEvent(<span class="string">'myevent'</span>, myEventDetail, myEventOption)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="六、自定义组件案例"><a href="#六、自定义组件案例" class="headerlink" title="六、自定义组件案例"></a>六、自定义组件案例</h2><blockquote><p>实现一个弹框</p></blockquote><ul><li>在component下新建popup文件夹</li></ul><p><img src="https://user-gold-cdn.xitu.io/2018/3/14/16223cc683fa5afc?w=295&amp;h=676&amp;f=png&amp;s=15505" alt=""></p><p>popup.wxml</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"wx-popup"</span> <span class="attr">hidden</span>=<span class="string">"&#123;&#123;flag&#125;&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">'popup-container'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"wx-popup-title"</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"wx-popup-con"</span>&gt;</span>&#123;&#123;content&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"wx-popup-btn"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"btn-no"</span> <span class="attr">bindtap</span>=<span class="string">'_error'</span>&gt;</span>&#123;&#123;btn_no&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"btn-ok"</span> <span class="attr">bindtap</span>=<span class="string">'_success'</span>&gt;</span>&#123;&#123;btn_ok&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>popup.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">Component(&#123;</span><br><span class="line">  options: &#123;</span><br><span class="line">    multipleSlots: <span class="literal">true</span> <span class="comment">// 在组件定义时的选项中启用多slot支持</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 组件的属性列表</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  properties: &#123;</span><br><span class="line">    title: &#123;            <span class="comment">// 属性名</span></span><br><span class="line">      type: <span class="built_in">String</span>,     <span class="comment">// 类型（必填），目前接受的类型包括：String, Number, Boolean, Object, Array, null（表示任意类型）</span></span><br><span class="line">      value: <span class="string">'标题'</span>     <span class="comment">// 属性初始值（可选），如果未指定则会根据类型选择一个</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 弹窗内容</span></span><br><span class="line">    content: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      value: <span class="string">'内容'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 弹窗取消按钮文字</span></span><br><span class="line">    btn_no: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      value: <span class="string">'取消'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 弹窗确认按钮文字</span></span><br><span class="line">    btn_ok: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      value: <span class="string">'确定'</span></span><br><span class="line">    &#125; </span><br><span class="line">  &#125;,</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 组件的初始数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    flag: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 组件的方法列表</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">//隐藏弹框</span></span><br><span class="line">    hidePopup: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">        flag: !<span class="keyword">this</span>.data.flag</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//展示弹框</span></span><br><span class="line">    showPopup () &#123;</span><br><span class="line">      <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">        flag: !<span class="keyword">this</span>.data.flag</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 内部私有方法建议以下划线开头</span></span><br><span class="line"><span class="comment">    * triggerEvent 用于触发事件</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    _error () &#123;</span><br><span class="line">      <span class="comment">//触发取消回调</span></span><br><span class="line">      <span class="keyword">this</span>.triggerEvent(<span class="string">"error"</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    _success () &#123;</span><br><span class="line">      <span class="comment">//触发成功回调</span></span><br><span class="line">      <span class="keyword">this</span>.triggerEvent(<span class="string">"success"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>在首页用这个组件需要配置一下，首先建一个名为index.json的文件，里边配置”usingComponents”，就是需要引入到首页</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"usingComponents"</span>: &#123;</span><br><span class="line">    <span class="string">"popup"</span>: <span class="string">"/component/popup/popup"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>引入到首页</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"userinfo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">"showPopup"</span>&gt;</span> 点我 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">popup</span> <span class="attr">id</span>=<span class="string">'popup'</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">title</span>=<span class="string">'小组件'</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">content</span>=<span class="string">'学会了吗'</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">btn_no</span>=<span class="string">'没有'</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">btn_ok</span>=<span class="string">'学会了'</span></span></span><br><span class="line"><span class="tag">      <span class="attr">bind:error</span>=<span class="string">"_error"</span>  </span></span><br><span class="line"><span class="tag">      <span class="attr">bind:success</span>=<span class="string">"_success"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">popup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>配置index.js操作点击事件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="comment">//获取应用实例</span></span><br><span class="line"><span class="keyword">const</span> app = getApp()</span><br><span class="line"> </span><br><span class="line">Page(&#123;</span><br><span class="line">  onReady: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//获得popup组件</span></span><br><span class="line">    <span class="keyword">this</span>.popup = <span class="keyword">this</span>.selectComponent(<span class="string">"#popup"</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"> </span><br><span class="line">  showPopup() &#123;</span><br><span class="line">    <span class="keyword">this</span>.popup.showPopup();</span><br><span class="line">  &#125;,</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//取消事件</span></span><br><span class="line">  _error() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'你点击了取消'</span>);</span><br><span class="line">    <span class="keyword">this</span>.popup.hidePopup();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//确认事件</span></span><br><span class="line">  _success() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'你点击了确定'</span>);</span><br><span class="line">    <span class="keyword">this</span>.popup.hidePopup();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、创建自定义组件&quot;&gt;&lt;a href=&quot;#一、创建自定义组件&quot; class=&quot;headerlink&quot; title=&quot;一、创建自定义组件&quot;&gt;&lt;/a&gt;一、创建自定义组件&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;类似于页面，一个自定义组件由 &lt;code&gt;json&lt;/co
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="小程序" scheme="http://blog.poetries.top/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>业务中处理数据结构常用的JS方法</title>
    <link href="http://blog.poetries.top/2018/08/12/js-map-reduce-find-filter/"/>
    <id>http://blog.poetries.top/2018/08/12/js-map-reduce-find-filter/</id>
    <published>2018-08-12T11:11:43.000Z</published>
    <updated>2018-08-27T04:06:20.122Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、由map、filter、reduce、find展开"><a href="#一、由map、filter、reduce、find展开" class="headerlink" title="一、由map、filter、reduce、find展开"></a>一、由map、filter、reduce、find展开</h2><p><strong>filter</strong></p><blockquote><p>filter方法可以筛除数组和类似结构中不满足条件的元素，并返回满足条件的元素组成的数组。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> integers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">const</span> evenIntegers = integers.filter(<span class="function"><span class="params">i</span> =&gt;</span> i%<span class="number">2</span> === <span class="number">0</span>);</span><br><span class="line"><span class="comment">// evenIntegers的值为[2, 4, 6]</span></span><br></pre></td></tr></table></figure><p><strong>find</strong></p><blockquote><p>find返回数组或类似结构中满足条件的第一个元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> posts = [</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">'Title 1'</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">title</span>: <span class="string">'Title 2'</span>&#125;</span><br><span class="line">];</span><br><span class="line"><span class="comment">// 找出id为1的posts</span></span><br><span class="line"><span class="keyword">const</span> title = posts.find(<span class="function"><span class="params">p</span> =&gt;</span> p.id === <span class="number">1</span>).title;</span><br></pre></td></tr></table></figure><p><strong>map</strong></p><blockquote><p>map方法的作用在于处理流式数据，比如数组。我们可以把它想象成所有元素都要经过的一个转换器。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> integers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">const</span> twoXIntegers = integers.map(<span class="function"><span class="params">i</span> =&gt;</span> i*<span class="number">2</span>);</span><br><span class="line"><span class="comment">// twoXIntegers现在是 [2, 4, 6, 8, 12, 14]，而integers不发生变化。</span></span><br></pre></td></tr></table></figure><p><strong>reduce</strong></p><blockquote><p>当你想要将多个数据放进一个实例中时，你可以使用一个reducer</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> posts = [</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">upVotes</span>: <span class="number">2</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">upVotes</span>: <span class="number">89</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">upVotes</span>: <span class="number">1</span>&#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> totalUpvotes = posts.reduce(<span class="function">(<span class="params">totalUpvotes, currentPost</span>) =&gt;</span>     </span><br><span class="line">  totalUpvotes + currentPost.upVotes, <span class="comment">//reducer函数</span></span><br><span class="line">  <span class="number">0</span> <span class="comment">// 初始化投票数为0</span></span><br><span class="line">);</span><br><span class="line"><span class="built_in">console</span>.log(totalUpvotes)<span class="comment">//输出投票总数：92</span></span><br></pre></td></tr></table></figure><ul><li>传给<code>reduce</code>的第一个参数函数还可以增加2个参数：</li><li>第三个参数：每个元素在原数据结构中的位置，比如数组下标。</li><li>第四个参数：调用reduce方法的数据集合，比如例子中的posts</li></ul><p><strong>some</strong></p><blockquote><p>some找到数组中符合条件的一项就不会在找，类似于<code>find</code>只找第一项</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1,2,3,4,5].some(v=&gt;v&gt;4) // true 符合有某一项满足条件</span><br></pre></td></tr></table></figure><p><strong>every</strong></p><blockquote><p><code>every</code>数组中每个条件都为真才会返回真</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1,2,3,4,5].every(v=&gt;v&gt;1) // false 数组中每一项都大于1才会返回true</span><br></pre></td></tr></table></figure><h2 id="二、向对象数组添加新元素"><a href="#二、向对象数组添加新元素" class="headerlink" title="二、向对象数组添加新元素"></a>二、向对象数组添加新元素</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> books = [];</span><br><span class="line"><span class="keyword">const</span> newBook = &#123;<span class="attr">title</span>: <span class="string">'Alice in wonderland'</span>, <span class="attr">id</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> updatedBooks = [...books, newBook];</span><br><span class="line"><span class="comment">//updatedBooks的值为[&#123;title: 'Alice in wonderland', id: 1&#125;]</span></span><br></pre></td></tr></table></figure><h2 id="三、为一个数组创建视图"><a href="#三、为一个数组创建视图" class="headerlink" title="三、为一个数组创建视图"></a>三、为一个数组创建视图</h2><blockquote><p>如果需要实现用户从购物车中删除物品，但是又不想破坏原来的购物车列表，可以使用filter方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myId = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">const</span> userIds = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> allButMe = userIds.filter(<span class="function"><span class="params">id</span> =&gt;</span> id !== myId);</span><br><span class="line"><span class="comment">// allButMe is [1, 5, 7, 3]</span></span><br></pre></td></tr></table></figure><h2 id="四、向数组中新增元素"><a href="#四、向数组中新增元素" class="headerlink" title="四、向数组中新增元素"></a>四、向数组中新增元素</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> books = [<span class="string">'Positioning by Trout'</span>, <span class="string">'War by Green'</span>];</span><br><span class="line"><span class="keyword">const</span> newBooks = [...books, <span class="string">'HWFIF by Carnegie'</span>];</span><br><span class="line"><span class="comment">// newBooks are now ['Positioning by Trout', 'War by Green', 'HWFIF // by Carnegie']</span></span><br></pre></td></tr></table></figure><h2 id="五、为对象新增一组键值对"><a href="#五、为对象新增一组键值对" class="headerlink" title="五、为对象新增一组键值对"></a>五、为对象新增一组键值对</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;<span class="attr">name</span>: <span class="string">'Shivek Khurana'</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> updatedUser = &#123;...user, <span class="attr">age</span>: <span class="number">23</span>&#125;;</span><br><span class="line"><span class="comment">//updatedUser的值为：&#123;name: 'Shivek Khurana', age: 23&#125;</span></span><br></pre></td></tr></table></figure><h2 id="六、使用变量作为键名为对象添加键值对"><a href="#六、使用变量作为键名为对象添加键值对" class="headerlink" title="六、使用变量作为键名为对象添加键值对"></a>六、使用变量作为键名为对象添加键值对</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dynamicKey = <span class="string">'wearsSpectacles'</span>;</span><br><span class="line"><span class="keyword">const</span> user = &#123;<span class="attr">name</span>: <span class="string">'Shivek Khurana'</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> updatedUser = &#123;...user, [dynamicKey]: <span class="literal">true</span>&#125;;</span><br><span class="line"><span class="comment">// updatedUser is &#123;name: 'Shivek Khurana', wearsSpectacles: true&#125;</span></span><br></pre></td></tr></table></figure><h2 id="七、修改数组中满足条件的元素对象"><a href="#七、修改数组中满足条件的元素对象" class="headerlink" title="七、修改数组中满足条件的元素对象"></a>七、修改数组中满足条件的元素对象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> posts = [</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">'Title 1'</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">title</span>: <span class="string">'Title 2'</span>&#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> updatedPosts = posts.map(<span class="function"><span class="params">p</span> =&gt;</span> p.id !== <span class="number">1</span> ?</span><br><span class="line">  p : &#123;...p, <span class="attr">title</span>: <span class="string">'Updated Title 1'</span>&#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">updatedPosts is now </span></span><br><span class="line"><span class="comment">[</span></span><br><span class="line"><span class="comment">  &#123;id: 1, title: 'Updated Title 1'&#125;,</span></span><br><span class="line"><span class="comment">  &#123;id: 2, title: 'Title 2'&#125;</span></span><br><span class="line"><span class="comment">];</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="八、找出数组中满足条件的元素"><a href="#八、找出数组中满足条件的元素" class="headerlink" title="八、找出数组中满足条件的元素"></a>八、找出数组中满足条件的元素</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> posts = [</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">'Title 1'</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">title</span>: <span class="string">'Title 2'</span>&#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> postInQuestion = posts.find(<span class="function"><span class="params">p</span> =&gt;</span> p.id === <span class="number">2</span>);</span><br><span class="line"><span class="comment">// postInQuestion now holds &#123;id: 2, title: 'Title 2'&#125;</span></span><br></pre></td></tr></table></figure><h2 id="九、删除目标对象的一组属性"><a href="#九、删除目标对象的一组属性" class="headerlink" title="九、删除目标对象的一组属性"></a>九、删除目标对象的一组属性</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法一</span></span><br><span class="line"><span class="keyword">const</span> user = &#123;<span class="attr">name</span>: <span class="string">'Shivek Khurana'</span>, <span class="attr">age</span>: <span class="number">23</span>, <span class="attr">password</span>: <span class="string">'SantaCl@use'</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> userWithoutPassword = <span class="built_in">Object</span>.keys(user)</span><br><span class="line">  .filter(<span class="function"><span class="params">key</span> =&gt;</span> key !== <span class="string">'password'</span>)</span><br><span class="line">  .map(<span class="function"><span class="params">key</span> =&gt;</span> &#123;[key]: user[key]&#125;)</span><br><span class="line">  .reduce(<span class="function">(<span class="params">accumulator, current</span>) =&gt;</span> </span><br><span class="line">    (&#123;...accumulator, ...current&#125;),</span><br><span class="line">    &#123;&#125;</span><br><span class="line">  )</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line"><span class="keyword">const</span> user = &#123;<span class="attr">name</span>: <span class="string">'Shivek Khurana'</span>, <span class="attr">age</span>: <span class="number">23</span>, <span class="attr">password</span>: <span class="string">'SantaCl@use'</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> userWithoutPassword = <span class="function">(<span class="params">(&#123;name, age&#125;</span>) =&gt;</span> (&#123;name, age&#125;))(user);</span><br><span class="line"></span><br><span class="line"><span class="comment">// userWithoutPassword becomes &#123;name: 'Shivek Khurana', age: 23&#125;</span></span><br></pre></td></tr></table></figure><h2 id="十、将对象转化成请求串"><a href="#十、将对象转化成请求串" class="headerlink" title="十、将对象转化成请求串"></a>十、将对象转化成请求串</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> params = &#123;<span class="attr">color</span>: <span class="string">'red'</span>, <span class="attr">minPrice</span>: <span class="number">8000</span>, <span class="attr">maxPrice</span>: <span class="number">10000</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> query = <span class="string">'?'</span> + <span class="built_in">Object</span>.keys(params)</span><br><span class="line">  .map(<span class="function"><span class="params">k</span> =&gt;</span>   </span><br><span class="line">    <span class="built_in">encodeURIComponent</span>(k) + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(params[k])</span><br><span class="line">  )</span><br><span class="line">  .join(<span class="string">'&amp;'</span>)</span><br><span class="line">;</span><br><span class="line"><span class="comment">// encodeURIComponent将对特殊字符进行编码。</span></span><br><span class="line"><span class="comment">// query is now "color=red&amp;minPrice=8000&amp;maxPrice=10000"</span></span><br></pre></td></tr></table></figure><h2 id="十一、获取数组中某一对象的下标"><a href="#十一、获取数组中某一对象的下标" class="headerlink" title="十一、获取数组中某一对象的下标"></a>十一、获取数组中某一对象的下标</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> posts = [</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">13</span>, <span class="attr">title</span>: <span class="string">'Title 221'</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">5</span>, <span class="attr">title</span>: <span class="string">'Title 102'</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">131</span>, <span class="attr">title</span>: <span class="string">'Title 18'</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">55</span>, <span class="attr">title</span>: <span class="string">'Title 234'</span>&#125;</span><br><span class="line">];</span><br><span class="line"><span class="comment">// 找到id为131的元素</span></span><br><span class="line"><span class="keyword">const</span> requiredIndex = posts.findIndex(<span class="function"><span class="params">obj</span>=&gt;</span>obj.id===<span class="number">131</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、由map、filter、reduce、find展开&quot;&gt;&lt;a href=&quot;#一、由map、filter、reduce、find展开&quot; class=&quot;headerlink&quot; title=&quot;一、由map、filter、reduce、find展开&quot;&gt;&lt;/a&gt;一、由ma
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="API" scheme="http://blog.poetries.top/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>在小程序中集成redux/immutable/thunk第三方库</title>
    <link href="http://blog.poetries.top/2018/08/11/wx-redux/"/>
    <id>http://blog.poetries.top/2018/08/11/wx-redux/</id>
    <published>2018-08-11T05:30:43.000Z</published>
    <updated>2018-08-27T04:06:20.130Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><blockquote><p>小程序给我们暴露了两个参数<code>require</code>和<code>module</code>，<code>require</code>用来在模块中加载其他模块，<code>module</code>用来将模块中的方法暴露出去</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>所以只要需要让第三方库的代码使用这种形式的<code>export</code>就可以了</p></blockquote><h3 id="二、构建Redux的微信小程序包"><a href="#二、构建Redux的微信小程序包" class="headerlink" title="二、构建Redux的微信小程序包"></a>二、构建Redux的微信小程序包</h3><blockquote><p>打一个<code>Redux</code>包，让它可以兼容微信小城的加载方式</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/reactjs/redux.git</span><br><span class="line"></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 详细内容可以到redux项目的package.json中查看</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这些命令是是使用webpack构建UMD模式的包。也就是说所有的代码，包括依赖的库都会被打包到一个文件中，并且自带一段模块加载代码，文件可以在dist目录下找到</span></span><br><span class="line">npm run build:umd &amp;&amp; npm run build:umd</span><br></pre></td></tr></table></figure><blockquote><p>用编辑器打开<code>dist</code>目录下的<code>redux.js</code>文件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">webpackUniversalModuleDefinition</span>(<span class="params">root, factory</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> exports === <span class="string">'object'</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">module</span> === <span class="string">'object'</span>)</span><br><span class="line">        <span class="built_in">module</span>.exports = factory();</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd)</span><br><span class="line">        define([], factory);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> exports === <span class="string">'object'</span>)</span><br><span class="line">        exports[<span class="string">"Redux"</span>] = factory();</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        root[<span class="string">"Redux"</span>] = factory();</span><br><span class="line">&#125;)(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">...  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>这段代码是用来加载模块的，里面的factory函数的返回的内容是用webpack提供的loader组织起来的redux的代码和第三方依赖。</li><li>如果我们把这个文件拷贝到小程序中，只需要让程序能正常进入第三行代码，就能把Redux加载进来</li><li>将第二行代码：<code>if(typeof exports === &#39;object&#39; &amp;&amp; typeof module === &#39;object&#39;)</code> 修改成：<code>if(typeof module === &#39;object&#39;)</code></li><li>这样修改的原因是，在微信小程序的环境中是没有exports变量的，所以就没办法正确进入这个分支，删除之后就可以正确进入</li><li>我们拷贝到<code>libs</code>目录下，那么我们在程序中使用时，只要当做是一个本地模块去<code>require</code>就可以了 <code>var redux = require(&#39;./libs/redux.js&#39;)</code></li><li>我们可以通过类似的方法，使用<code>Webpack</code>打包第三方库，就可以集成任何库了</li></ul><h3 id="三、集成Redux-devtools"><a href="#三、集成Redux-devtools" class="headerlink" title="三、集成Redux-devtools"></a>三、集成Redux-devtools</h3><blockquote><p>因为微信小程序的开发环境是定制的，暂时没有发现办法直接安装<code>redux-devtool</code>的插件</p></blockquote><p><strong>安装remote-redux-devtools</strong></p><ul><li>原版的<code>remote-redux-devtools</code>使用的一个<code>websocket</code>的依赖会使用原生的<code>WebSocket</code>，小程序是不支持的，所以需要改成小程序的<code>websocket</code>实现,修改好的代码 <a href="https://github.com/poetries/wx-redux-immutable-template/blob/master/wx-redux-immutable-template/public/libs/remote-redux-devtools.js" target="_blank" rel="noopener">https://github.com/poetries/wx-redux-immutable-template/blob/master/wx-redux-immutable-template/public/libs/remote-redux-devtools.js</a></li><li>把代码下载到工程目录里面就可以用了</li></ul><p><strong>安装和启动remotedev-server</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g remotedev-server</span><br><span class="line">remotedev --hostname=localhost --port=5678</span><br></pre></td></tr></table></figure><blockquote><p>因为没办法用<code>npm</code>安装到本地（微信小程序会尝试去加载项目目录中的所有js），所以这里使用全局安装，第二条命令是启动<code>remotedev-server</code>，<code>hostname</code>和<code>port</code>分别指定为<code>localhost</code>和<code>5678</code></p></blockquote><p><strong>集成devtool</strong></p><blockquote><p>在<code>store</code>下集成<code>devtool</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;createStore, compose&#125; = <span class="built_in">require</span>(<span class="string">'./libs/redux.js'</span>);</span><br><span class="line"><span class="keyword">const</span> devTools = <span class="built_in">require</span>(<span class="string">'./libs/remote-redux-devtools.js'</span>).default;</span><br><span class="line"><span class="keyword">const</span> reducer = <span class="built_in">require</span>(<span class="string">'./reducers/index.js'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">configureStore</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> createStore(reducer, compose(devTools(&#123;</span><br><span class="line">    hostname: <span class="string">'localhost'</span>,</span><br><span class="line">    port: <span class="number">5678</span>,</span><br><span class="line">    secure: <span class="literal">false</span></span><br><span class="line">  &#125;)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = configureStore;</span><br></pre></td></tr></table></figure><blockquote><p>把<code>devtool</code>使用<code>redux</code>的<code>compose</code>加到<code>store</code>中去。<code>hostname</code>和<code>port</code>是指定为之前启动<code>remotedev-server</code>启动时候指定的参数。保存之后重启一下小程序，如果没有报错的话就OK了</p></blockquote><ul><li>可以在浏览器中访问<code>localhost:5678</code></li></ul><h3 id="四、小程序中集成immutable"><a href="#四、小程序中集成immutable" class="headerlink" title="四、小程序中集成immutable"></a>四、小程序中集成immutable</h3><blockquote><p><code>Immutable</code> 是 <code>Facebook</code> 开发的不可变数据集合。不可变数据一旦创建就不能被修改，是的应用开发更简单，允许使用函数式编程技术，比如惰性评估。微信小程序无法直接使用<code>Immutable.js</code>，下面就来说说微信小程序如何使用第三方库<code>Immutable.js</code></p></blockquote><p><strong>Immutable使用了UMD模块化规范</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">global, factory</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">typeof</span> exports === <span class="string">'object'</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">module</span> !== <span class="string">'undefined'</span> ? <span class="built_in">module</span>.exports = factory() :</span><br><span class="line"> <span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd ? define(factory) :</span><br><span class="line"> (global.Immutable = factory());</span><br><span class="line">&#125;(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="string">'use strict'</span>;<span class="keyword">var</span> SLICE$<span class="number">0</span> = <span class="built_in">Array</span>.prototype.slice;</span><br><span class="line"></span><br><span class="line">....</span><br><span class="line"></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><blockquote><p>修改<code>Immutable</code>代码，注释原有模块导出语句，使用<code>module.exports = factory()</code> 强制导出</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">global, factory</span>) </span>&#123;</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> typeof exports === 'object' &amp;&amp; typeof module !== 'undefined' ? module.exports = factory() :</span></span><br><span class="line"><span class="comment"> typeof define === 'function' &amp;&amp; define.amd ? define(factory) :</span></span><br><span class="line"><span class="comment"> (global.Immutable = factory());</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"> <span class="built_in">module</span>.exports = factory();</span><br><span class="line"></span><br><span class="line">&#125;(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br></pre></td></tr></table></figure><blockquote><p>导入修改好的<code>immutable</code>到小程序中即可 <a href="https://github.com/poetries/wx-redux-immutable-template/blob/master/wx-redux-immutable-template/public/libs/immutable.js" target="_blank" rel="noopener">https://github.com/poetries/wx-redux-immutable-template/blob/master/wx-redux-immutable-template/public/libs/immutable.js</a></p></blockquote><h3 id="五、小程序集成redux、immutable模板"><a href="#五、小程序集成redux、immutable模板" class="headerlink" title="五、小程序集成redux、immutable模板"></a>五、小程序集成redux、immutable模板</h3><blockquote><p><a href="https://github.com/poetries/wx-redux-immutable-template" target="_blank" rel="noopener">https://github.com/poetries/wx-redux-immutable-template</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;小程序给我们暴露了两个参数&lt;code&gt;require&lt;/code&gt;和&lt;code&gt;module&lt;/c
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="小程序" scheme="http://blog.poetries.top/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="redux" scheme="http://blog.poetries.top/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>小程序入门总结篇</title>
    <link href="http://blog.poetries.top/2018/08/09/xiaochengxu-note/"/>
    <id>http://blog.poetries.top/2018/08/09/xiaochengxu-note/</id>
    <published>2018-08-09T08:20:20.000Z</published>
    <updated>2018-08-27T04:06:20.130Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、小程序代码组成"><a href="#一、小程序代码组成" class="headerlink" title="一、小程序代码组成"></a>一、小程序代码组成</h2><p><img src="https://upload-images.jianshu.io/upload_images/1519620-e7b4608440bc35a5.png?imageMogr2/auto-orient/" alt=""></p><p><strong>须知</strong></p><ul><li><code>App()</code> 必须在 <code>app.js</code> 中注册，且不能注册多个。</li><li>编译后的代码包大小需小于 <code>1MB</code>，否则代码包将上传失败。</li><li>每个页面需要手动在<code>app.json</code>中进行注册，否则不能访问。</li><li><code>app.json</code>中<code>pages</code>数组的第一项代表小程序的初始页面，小程序中新增/减少页面，都需要对 <code>pages</code> 数组进行修改。</li><li>直接修改 <code>this.data</code>无效，无法改变页面的状态，还会造成数据不一致。</li><li>单次设置的数据不能超过<code>1024kB</code>，请尽量避免一次设置过多的数据。</li><li>不要尝试修改页面栈，会导致路由以及页面状态错误。</li><li><code>tabBar</code>只能配置最少2个、最多5个，<code>tab</code> 按数组的顺序排序。</li><li>小程序页面只能同时打开 5 个，如果交互流程较长难以支持。</li><li>同时只能存在 5 个<code>url</code>请求。</li><li>无法跳转小程序以外的<code>url</code>。</li><li>没有<code>cookie</code>。</li><li>没有开放加载<code>web</code>页面</li><li>没有a标签链接，不可嵌套<code>iframe</code></li><li>没有<code>window</code>变量，但微信提供了wx全局方法集</li><li>事件绑定和条件渲染类似<code>Angular</code>，全部写在<code>WXML</code>中</li></ul><h3 id="1-1-主体"><a href="#1-1-主体" class="headerlink" title="1.1 主体"></a>1.1 主体</h3><blockquote><p>由<code>app.js</code>、<code>app.json</code>、<code>app.wxss</code>三个文件组成，放在根目录</p></blockquote><ul><li><code>app.js</code> 根目录的<code>app.js</code>很有用,因为在它内部注册的变量或方法，都是可以被所有页面获取到。可以监听并处理小程序的生命周期、声明全局变量。其余的<code>.js</code>文 件可以通过<code>var app = getApp()</code> 获取其实例，调用其中定义的方法和变量，但不可以调用生命周期的方法</li><li><code>app.json</code>是小程序的全局配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pages 配置小程序的组成页面，第一个代表小程序的初始页面</span><br><span class="line">window  设置小程序的状态栏、标题栏、导航条、窗口背景颜色</span><br><span class="line">tabBar  配置小程序tab栏的样式和对应的页面</span><br></pre></td></tr></table></figure><ul><li><code>app.wxss</code> 是小程序的公共样式表，可以在其他<code>.wxss</code>文件中直接使用</li></ul><blockquote><p><code>app.json</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"pages"</span>: [ <span class="comment">//设置页面的路径</span></span><br><span class="line">  <span class="string">"pages/index/index"</span>, <span class="comment">//不需要写index.wxml,index.js,index,wxss,框架会自动寻找并整合</span></span><br><span class="line">  <span class="string">"pages/logs/logs"</span></span><br><span class="line">],</span><br><span class="line"><span class="string">"window"</span>: &#123; <span class="comment">//设置默认窗口的表现形式</span></span><br><span class="line">  <span class="string">"navigationBarBackgroundColor"</span>: <span class="string">"#ffffff"</span>, <span class="comment">//顶部导航栏背景色</span></span><br><span class="line">  <span class="string">"navigationBarTextStyle"</span>: <span class="string">"black"</span>, <span class="comment">//顶部导航文字的颜色 black/white</span></span><br><span class="line">  <span class="string">"navigationBarTitleText"</span>: <span class="string">"微信接口功能演示"</span>, <span class="comment">//顶部导航的显示文字</span></span><br><span class="line">  <span class="string">"backgroundColor"</span>: <span class="string">"#eeeeee"</span>, <span class="comment">//窗口的背景色</span></span><br><span class="line">  <span class="string">"backgroundTextStyle"</span>: <span class="string">"light"</span>, <span class="comment">//下拉背景字体、loading 图的样式，仅支持 dark/light</span></span><br><span class="line">  <span class="string">"enablePullDownRefresh"</span>: <span class="string">"false"</span>， <span class="comment">//是否支持下拉刷新 ，不支持的话就直接不写！</span></span><br><span class="line">  <span class="string">"disableScroll"</span>: <span class="literal">true</span>, <span class="comment">//  设置true不能上下滚动，true/false，注意！只能在 page.json 中有效，无法在 app.json 中设置该项。</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"tabBar"</span>: &#123; <span class="comment">//底部tab或者顶部tab的表现，是个数组，最少配置2个，最多5个</span></span><br><span class="line">  <span class="string">"list"</span>: [&#123; <span class="comment">//设置tab的属性，最少2个，最多5个</span></span><br><span class="line">    <span class="string">"pagePath"</span>: <span class="string">"pages/index/index"</span>, <span class="comment">//点击底部 tab 跳转的路径</span></span><br><span class="line">    <span class="string">"text"</span>: <span class="string">"首页"</span>, <span class="comment">//tab 按钮上的文字</span></span><br><span class="line">    <span class="string">"iconPath"</span>: <span class="string">"../img/a.png"</span>, <span class="comment">//tab图片的路径</span></span><br><span class="line">    <span class="string">"selectedIconPath"</span>: <span class="string">"../img/a.png"</span> <span class="comment">//tab 在当前页，也就是选中状态的路径</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="string">"pagePath"</span>: <span class="string">"pages/logs/logs"</span>,</span><br><span class="line">    <span class="string">"text"</span>: <span class="string">"日志"</span></span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="string">"color"</span>: <span class="string">"red"</span>, <span class="comment">//tab 的字体颜色</span></span><br><span class="line">  <span class="string">"selectedColor"</span>: <span class="string">"#673ab7"</span>, <span class="comment">//当前页 tab 的颜色，也就是选中页的</span></span><br><span class="line">  <span class="string">"backgroundColor"</span>: <span class="string">"#2196f3"</span>, <span class="comment">//tab 的背景色</span></span><br><span class="line">  <span class="string">"borderStyle"</span>: <span class="string">"white"</span>, <span class="comment">//边框的颜色 black/white</span></span><br><span class="line">  <span class="string">"position"</span>: <span class="string">"bottom"</span> <span class="comment">//tab处于窗口的位置 top/bottom</span></span><br><span class="line">  &#125;,</span><br><span class="line"><span class="string">"networkTimeout"</span>: &#123; <span class="comment">//默认都是 60000 秒一分钟</span></span><br><span class="line">    <span class="string">"request"</span>: <span class="number">10000</span>, <span class="comment">//请求网络超时时间 10000 秒</span></span><br><span class="line">    <span class="string">"downloadFile"</span>: <span class="number">10000</span>， <span class="comment">//链接服务器超时时间 10000 秒</span></span><br><span class="line">      <span class="string">"uploadFile"</span>: <span class="string">"10000"</span>, <span class="comment">//上传图片 10000 秒</span></span><br><span class="line">    <span class="string">"downloadFile"</span>: <span class="string">"10000"</span> <span class="comment">//下载图片超时时间 10000 秒</span></span><br><span class="line">  &#125;,</span><br><span class="line"><span class="string">"debug"</span>: <span class="literal">true</span> <span class="comment">//项目上线后，建议关闭此项，或者不写此项</span></span><br></pre></td></tr></table></figure><h3 id="1-2-pages"><a href="#1-2-pages" class="headerlink" title="1.2 pages"></a>1.2 pages</h3><blockquote><p><code>pages</code>文件夹里是小程序的各个页面，每个界面一般都由<code>.wxml</code>、<code>.wxss</code>、<code>.js</code>、<code>.json</code>四个文件组成，四个文件必须是相同的名字和路径</p></blockquote><ul><li><code>.js</code> 是页面的脚本代码，通过<code>Page()</code>函数注册页面。可以指定页面的初始数据、生命周期、事件处理等 </li><li><code>.wxml</code> 是页面的布局文件，只能使用微信定义的组件 </li><li><code>.wxss</code> 是样式表，需要注意<ul><li>尺寸单位：<code>rpx</code> 可以根据屏幕的宽带进行自适应</li><li>样式导入：<code>@import</code>导入外联样式表，如：<code>@import &quot;test.wxss&quot;</code>;</li><li>定义在<code>app.wxss</code>中的全局样式，作用于每个页面。定义在<code>page</code>的<code>.wxss</code>文件只作用于对应的页面，会覆盖<code>app.wxss</code>中相同的选择器</li></ul></li><li><code>.json</code> 是页面的配置文件，只能设置<code>app.json</code>中的<code>window</code>配置内容，会覆盖<code>app.json</code>中<code>window</code>的相同配置项，即使不配置任何东西也需要写<code>{}</code>,否则会报错</li></ul><h3 id="1-3-utils"><a href="#1-3-utils" class="headerlink" title="1.3 utils"></a>1.3 utils</h3><blockquote><p><code>utils</code> 里面包含一些公共的代码抽取的<code>js</code>文件，作为模块方便使用。模块通过<code>module.exports</code>对外暴露接口</p></blockquote><ul><li>其他地方使用是<code>var utils = require(&#39;../../utils/util.js&#39;)</code> 进行引用</li></ul><h2 id="二、视图层-WXML"><a href="#二、视图层-WXML" class="headerlink" title="二、视图层 WXML"></a>二、视图层 WXML</h2><h3 id="2-1-数据绑定"><a href="#2-1-数据绑定" class="headerlink" title="2.1 数据绑定"></a>2.1 数据绑定</h3><blockquote><p>传统的视图和数据绑定</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-5c24282ab5c92ea3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>那么微信小程序是通过什么方法来管理视图和对象绑定的呢,状态模式-单向数据流</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-1212f4ef9f8b9b86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>数据流向是单向的，即视图变化不会影响对象状态</p></blockquote><ul><li>用户触发事件不仅要考虑当前<code>UI</code>元素更新，还会通过当前元素更新其他视图。</li><li>所以视图上的数据都必须用过事件传递给对象，只有用户操作视图，才能获取到数据，并更新对象状态</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/1480597-cf9e543ac2446352.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p><code>.wxml</code> 中的动态数据都来自<code>Page</code>中的<code>data</code>。数据绑定使用数据绑定使用双大括号将变量包起来，可以作用于内容、组件属性(需要在双引号之内)、控制属性(需要在双引号之内)、关键字(需要在双引号之内)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">        message: <span class="string">"Hello"</span>,</span><br><span class="line">        id:<span class="number">0</span>,</span><br><span class="line">        status: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;view&gt; &#123;&#123;message&#125;&#125; &lt;/view&gt;</span><br><span class="line">&lt;view id=&quot;item-&#123;&#123;id&#125;&#125;&quot;&gt; &lt;/view&gt;</span><br><span class="line">&lt;view wx:if=&quot;&#123;&#123;status&#125;&#125;&quot;&gt; &lt;/view&gt;</span><br><span class="line">&lt;view hidden=&quot;&#123;&#123;status&#125;&#125;&quot;&gt; &lt;/checkbox&gt;</span><br></pre></td></tr></table></figure><blockquote><p>还可以进行简单的运算在大括号里</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;view hidden=&quot;&#123;&#123;status ? true : false&#125;&#125;&quot;&gt; Hidden &lt;/view&gt;</span><br><span class="line">&lt;view&gt; &#123;&#123;a + b&#125;&#125; + c &lt;/view&gt; </span><br><span class="line">&lt;view wx:if=&quot;&#123;&#123;num &gt; 6&#125;&#125;&quot;&gt; &lt;/view&gt;</span><br><span class="line">&lt;view&gt;&#123;&#123;&quot;hello&quot; + word&#125;&#125;&lt;/view&gt;</span><br></pre></td></tr></table></figure><h3 id="2-2-条件渲染"><a href="#2-2-条件渲染" class="headerlink" title="2.2 条件渲染"></a>2.2 条件渲染</h3><blockquote><p>用 <code>wx:if=””</code>来判断是否渲染代码块</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;view wx:if=&quot;&#123;&#123;status&#125;&#125;&quot;&gt; isShow &lt;/view&gt;</span><br></pre></td></tr></table></figure><blockquote><p>还可以添加<code>else</code>块</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;view wx:if=&quot;&#123;&#123;num &gt; 5&#125;&#125;&quot;&gt; A &lt;/view&gt;</span><br><span class="line">&lt;view wx:elif=&quot;&#123;&#123;num &gt; 2&#125;&#125;&quot;&gt; B &lt;/view&gt;</span><br><span class="line">&lt;view wx:else&gt; C &lt;/view&gt;</span><br></pre></td></tr></table></figure><h3 id="2-3-列表渲染"><a href="#2-3-列表渲染" class="headerlink" title="2.3 列表渲染"></a>2.3 列表渲染</h3><ul><li>在组件上使用 <code>wx:for</code>属性绑定一个数组，就可以渲染组件了 </li><li>默认情况下数组的当前下标变量名为<code>index</code>,当前项的变量名为<code>item</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;view wx:for=&quot;&#123;&#123;array&#125;&#125;&quot;&gt;</span><br><span class="line">  &#123;&#123;index&#125;&#125;: &#123;&#123;item.message&#125;&#125;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    array: [<span class="string">"AA"</span>,<span class="string">"BB"</span>,<span class="string">"CC"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>使用 <code>wx:for-item</code> 可以指定数组当前元素的变量名，使用 <code>wx:for-index</code> 可以指定数组当前下标的变量名</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;view wx:for=&quot;&#123;&#123;array&#125;&#125;&quot; wx:for-index=&quot;num&quot; wx:for-item=&quot;itemName&quot;&gt;</span><br><span class="line">  &#123;&#123;num&#125;&#125;: &#123;&#123;itemName&#125;&#125;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><h3 id="2-4-模板template"><a href="#2-4-模板template" class="headerlink" title="2.4 模板template"></a>2.4 模板template</h3><ul><li><code>name</code> 定义组件模版的名称，引用模版的时候使用 <code>is</code> 属性指定模版的名字，<code>is</code> 可以进行简单的三目运算，需要传入模版需要的 <code>data</code> 数据。</li><li>因为模版拥有自己的作用域，所以只能使用 <code>data</code> 传入数据，而不接受双花括号的写法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template name=&quot;msgItem&quot;&gt;</span><br><span class="line">&lt;view&gt;</span><br><span class="line">&lt;text&gt; &#123;&#123;index&#125;&#125;: &#123;&#123;msg&#125;&#125; &lt;/text&gt;</span><br><span class="line">&lt;text&gt; Time: &#123;&#123;time&#125;&#125; &lt;/text&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 其他代码 --&gt;</span><br><span class="line">&lt;template is=&quot;msgItem&quot; data=&quot;&#123;&#123;...item&#125;&#125;&quot;/&gt;</span><br></pre></td></tr></table></figure><h3 id="2-5-公共模块的引用"><a href="#2-5-公共模块的引用" class="headerlink" title="2.5 公共模块的引用"></a>2.5 公共模块的引用</h3><ul><li><code>WXML</code> 提供 <code>import</code> 和 <code>include</code> 两种文件引用方式。</li><li><code>import</code> 有作用域的概念，不能多重引用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- B.wxml --&gt;</span><br><span class="line">&lt;import src=&quot;a.wxml&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- A.wxml --&gt;</span><br><span class="line">&lt;template name=&quot;A&quot;&gt;</span><br><span class="line"> &lt;text&gt; A template &lt;/text&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><blockquote><p><code>include</code> 就可以多重引用</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--引用 header、其中 header.wxml 中也引用了 footer.wxml--&gt;</span><br><span class="line">&lt;include src=&quot;header.wxml&quot;/&gt;</span><br><span class="line">&lt;view&gt; body &lt;/view&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- header.wxml --&gt;</span><br><span class="line">&lt;view&gt; header &lt;/view&gt;</span><br><span class="line">&lt;include src=&quot;footer.wxml&quot;/&gt;</span><br></pre></td></tr></table></figure><h3 id="2-6-事件"><a href="#2-6-事件" class="headerlink" title="2.6 事件"></a>2.6 事件</h3><ul><li>名称以 <code>bind</code> 开头的事件不阻止冒泡，名称以 <code>catch</code> 开头的事件冒泡是阻止的。如 <code>bindTap</code> 和 <code>catchTab</code></li><li>在 <code>WXM</code>L 中，可以使用 <code>dataset</code> 定义<code>data</code>中的数据，会通过事件传递。它的事件以 <code>data-</code>开头，多个单词以 - 链接，如 <code>data-a-b</code></li></ul><h2 id="三、生命周期"><a href="#三、生命周期" class="headerlink" title="三、生命周期"></a>三、生命周期</h2><h3 id="3-1-App-应用生命周期"><a href="#3-1-App-应用生命周期" class="headerlink" title="3.1 App()应用生命周期"></a>3.1 App()应用生命周期</h3><p><img src="https://image-static.segmentfault.com/180/943/1809436873-58730c9dc69d2_articlex" alt=""></p><ul><li>用户首次打开小程序，触发 <code>onLaunch</code>（全局只触发一次）。</li><li>小程序初始化完成后，触发<code>onShow</code>方法，监听小程序显示。</li><li>小程序从前台进入后台，触发 <code>onHide</code>方法。</li><li>小程序从后台进入前台显示，触发 <code>onShow</code>方法。</li><li>小程序后台运行一定时间，或系统资源占用过高，会被销毁。</li><li>小程序出错，触发<code>onError</code></li></ul><blockquote><p>前台、后台定义： 当用户点击左上角关闭，或者按了设备 Home 键离开微信，小程序并没有直接销毁，而是进入了后台；当再次进入微信或再次打开小程序，又会从后台进入前台</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//app.js</span></span><br><span class="line">App(&#123;</span><br><span class="line">  onLaunch: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">      <span class="comment">//小程序初始化(全局只触发一次)</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onShow: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">//小程序显示</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onHide: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">//小程序隐藏</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onError: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">      <span class="comment">//小程序错误</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//其他 开发者可以添加任意的函数或数据到 Object 参数中，用 this 可以访问</span></span><br></pre></td></tr></table></figure><h3 id="3-2-Page页面生命周期"><a href="#3-2-Page页面生命周期" class="headerlink" title="3.2 Page页面生命周期"></a>3.2 Page页面生命周期</h3><blockquote><p>每个页面也有自己的生命周期</p></blockquote><p><img src="https://image-static.segmentfault.com/237/296/2372965507-58730caad9549_articlex" alt=""></p><ul><li>小程序注册完成后，加载页面，触发<code>onLoad</code>方法。</li><li>页面载入后触发<code>onShow</code>方法，显示页面。</li><li>首次显示页面，会触发<code>onReady</code>方法，渲染页面元素和样式，一个页面只会调用一次。</li><li>当小程序后台运行或跳转到其他页面时，触发<code>onHide</code>方法。</li><li>当小程序有后台进入到前台运行或重新进入页面时，触发<code>onShow</code>方法。</li><li>当使用重定向方法<code>wx.redirectTo(OBJECT)</code>或关闭当前页返回上一页<code>wx.navigateBack()</code>，触发<code>onUnload</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//页面加载-----(一个页面只会调用一次)</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onReady: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//页面渲染-----(一个页面只会调用一次)</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onShow: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//页面显示-----(每次打开页面都会调用一次)</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onHide: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//页面隐藏-----(当navigateTo或底部tab切换时调用)</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onUnload: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//页面卸载-----(当redirectTo或navigateBack的时候调用)</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//其他 开发者可以添加任意的函数或数据到 object 参数中，在页面的函数中用 this 可以访问</span></span><br></pre></td></tr></table></figure><h3 id="3-3-应用生命周期影响页面生命周期"><a href="#3-3-应用生命周期影响页面生命周期" class="headerlink" title="3.3 应用生命周期影响页面生命周期"></a>3.3 应用生命周期影响页面生命周期</h3><p><img src="https://upload-images.jianshu.io/upload_images/1480597-ac90d7e8add10c54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li>小程序初始化完成后，页面首次加载触发<code>onLoad</code>，只会触发一次。</li><li>当小程序进入到后台，先执行页面<code>onHide</code>方法再执行应用<code>onHide</code>方法。</li><li>当小程序从后台进入到前台，先执行应用<code>onShow</code>方法再执行页面<code>onShow</code>方法</li></ul><h2 id="四、小程序限制"><a href="#四、小程序限制" class="headerlink" title="四、小程序限制"></a>四、小程序限制</h2><h3 id="4-1-程序限制"><a href="#4-1-程序限制" class="headerlink" title="4.1 程序限制"></a>4.1 程序限制</h3><ul><li>脚本内不能使用<code>window</code>等对象</li><li><code>zepto/jquery</code> 会使用到<code>window</code>对象和<code>document</code>对象，所以无法使用。</li><li>样式表不支持级联选择器</li><li>本地资源无法通过 <code>css</code> 获取 <code>background-image</code>可以使用网络图片，或者 <code>base64</code>，或者使用标签</li><li>不支持 <code>A</code> 标签，无法打开普通网页</li></ul><h3 id="4-2-数量限制"><a href="#4-2-数量限制" class="headerlink" title="4.2 数量限制"></a>4.2 数量限制</h3><ul><li>底部或顶部可以添加<code>tab</code>按钮区域 <code>tabBar</code> 是一个数组，只能配置最少2个、最多5个 <code>tab</code>，<code>tab</code>按数组的顺序排序。</li><li>一个应用同时只能打开5个页面</li><li>小程序的<code>wx.request</code>请求最开始最大并发数是5个，后来，估计随着用小程序的越来越多，总之，就是增加到了10个</li></ul><h3 id="4-3-大小限制"><a href="#4-3-大小限制" class="headerlink" title="4.3 大小限制"></a>4.3 大小限制</h3><ul><li><code>tabBar</code> 上面的按钮 <code>iconPath</code> 图片路径，<code>icon</code>大小限制为<code>40kb</code></li><li><code>tabBar</code> 上面的按钮 <code>selectedIconPath</code>选中时的图片路径，<code>icon</code> 大小限制为<code>40kb</code></li><li><code>setData</code> 页面传递数据单次设置的数据不能超过<code>1024kB</code></li><li><code>setStorage</code> 本地缓存最大为<code>10MB</code></li><li>小程序源码打包后的大小限制为<code>1M</code></li></ul><h2 id="五、路由"><a href="#五、路由" class="headerlink" title="五、路由"></a>五、路由</h2><ul><li>微信路由接口有三个，分别是<code>wx.redirectTo</code>、<code>wx.navigateTo</code>和<code>wx.switchTab</code><br><code>wx.navigateTo</code>全局最多调用5次</li><li>如果某页面设置为<code>tab</code>页，则只支持<code>wx.switchTab</code>，不支持其他两种路由方式访问</li></ul><h3 id="5-1-哪些情况会触发页面跳转"><a href="#5-1-哪些情况会触发页面跳转" class="headerlink" title="5.1 哪些情况会触发页面跳转"></a>5.1 哪些情况会触发页面跳转</h3><ul><li>小程序启动，初始化第一个页面</li><li>打开新页面，调用 API <code>wx.navigateTo</code> 或使用<code>&lt;navigator /&gt;</code>组件</li><li>页面重定向，调用 API <code>wx.redirectTo</code> 或使用<code>&lt;navigator /&gt;</code>组件</li><li>页面返回，调用 API <code>wx.navigateBack</code>或用户按左上角返回按钮</li><li><code>tarbar</code>切换</li></ul><h3 id="5-2-如何跳转页面"><a href="#5-2-如何跳转页面" class="headerlink" title="5.2 如何跳转页面"></a>5.2 如何跳转页面</h3><ul><li>使用<code>wx.navigateTo</code>接口跳转,原页面保留</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wx.navigateTo(&#123;</span><br><span class="line">  <span class="comment">//目的页面地址</span></span><br><span class="line">  url: <span class="string">'pages/logs/index'</span>,</span><br><span class="line">  success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;&#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>使用<code>wx.redirectTo</code>接口跳转，关闭原页面,不能返回</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wx.redirectTo(&#123;</span><br><span class="line">  <span class="comment">//目的页面地址</span></span><br><span class="line">  url: <span class="string">'pages/logs/index'</span>,</span><br><span class="line">  success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;&#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="5-3-使用组件"><a href="#5-3-使用组件" class="headerlink" title="5.3 使用组件"></a>5.3 使用组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;navigator url=&quot;pages/logs/index&quot; hover-class=&quot;navigator-hover&quot;&gt;跳转&lt;/navigator&gt;</span><br></pre></td></tr></table></figure><blockquote><p>当该组件添加<code>redirect</code>属性时，等同于<code>wx.redirectTo</code>接口；默认<code>redirect</code>属性为<code>false</code>，等同于<code>wx.navigateTo</code>接口</p></blockquote><p>用户点击左上角返回按钮，或调用<code>wx.navigateBack</code>接口返回上一页</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.navigateBack(&#123;</span><br><span class="line">    delta: <span class="number">1</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p><code>delta</code>为1时表示返回上一页，为2时表示上上一页，以此类推；如果dalta大于已打开的页面总数，则返回到首页。返回后，元界面会销毁</p></blockquote><h3 id="5-4-页面跳转传值"><a href="#5-4-页面跳转传值" class="headerlink" title="5.4 页面跳转传值"></a>5.4 页面跳转传值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url?key=value&amp;key1=value1</span><br></pre></td></tr></table></figure><blockquote><p>传递的参数没有被<code>URIEncode</code>,传递中文没有乱码</p></blockquote><h3 id="5-5-如何正确使用页面跳转"><a href="#5-5-如何正确使用页面跳转" class="headerlink" title="5.5 如何正确使用页面跳转"></a>5.5 如何正确使用页面跳转</h3><blockquote><p>官方规定小程序最多只能有五个页面同时存在，意思是在不关闭页面的情况，最多新开五个页面，页面深度为5</p></blockquote><ul><li>对于可逆操作，使用<code>wx.navigateTo</code>,比如从首页跳转到二级页面，从二级页面返回是不需要重新渲染首页</li><li>对于不可逆操作，使用<code>wx.redirectTo</code>,比如用户登录成功后，关闭登录页面，不能返回到登录界面。</li><li>对于一些介绍性等不常用页面<code>wx.redirectTo</code>或<code>wx.navigatrBack</code></li><li>不要在首页使用<code>wx.redirectTo</code>，这样会导致应用无法返回首页</li></ul><h3 id="5-6-页面栈"><a href="#5-6-页面栈" class="headerlink" title="5.6 页面栈"></a>5.6 页面栈</h3><ul><li>页面栈以栈（先进后出）的形式维护页面与页面之间的关系</li><li>小程序提供了<code>getCurrentPages()</code>函数获取页面栈，第一个元素为首页，最后一个元素为当前页面</li></ul><p><strong>使用wx.navigateTo每新开一个页面，页面栈大小加1,直到页面栈大小为5为止</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-6cf7cccb6c5213fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>使用wx.navigateTo重复打开界面</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-c1236072261f0108.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>假如使用wx.navigateTo从四级页面跳转到二级页面，此时会在页面栈顶添加一个与二级页面初始状态一样的界面，但两个页面状态是独立的。页面栈大小会加1，如果页面栈大小为5，则wx.navigateTo无效</p></blockquote><p><strong>使用wx.redirectTo重定向</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-5db240ac56b7d403.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>假如使用wx.redirectTo从四级页面重定向到二级页面，此时会将关闭四级页面，并使用二级页面替换四级页面，但两个页面状态是独立的。此时的页面栈大小不变，请注意和使用wx.navigateTo的区别</p></blockquote><p><strong>使用wx.navigateBack返回</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-4ec22f18f2e38491.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>总结</strong></p><ul><li><code>wx.navigateTo</code>会增加页面栈大小，直到页面栈大小为5</li><li><code>wx.redirectTo</code>不会增加页面栈大小</li><li><code>wx.navigateBack</code>会减少页面栈大小，直到页面栈大小为1</li></ul><h2 id="六、数据通信"><a href="#六、数据通信" class="headerlink" title="六、数据通信"></a>六、数据通信</h2><h3 id="6-1-页面之间的通信"><a href="#6-1-页面之间的通信" class="headerlink" title="6.1 页面之间的通信"></a>6.1 页面之间的通信</h3><ul><li>使用全局变量 <code>app.globalData</code></li><li>使用本地缓存 <code>wx.setStorageSync</code></li><li><code>url</code>传递**</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A页面-传递数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要注意的是，wx.switchTab 中的 url 不能传参数。</span></span><br><span class="line">wx.navigateTo(&#123;</span><br><span class="line">   url:<span class="string">'../pageD/pageD?name=raymond&amp;gender=male'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// B页面-接收数据//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过onLoad的option...</span></span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line">onLoad: <span class="function"><span class="keyword">function</span>(<span class="params">option</span>)</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(option.name +<span class="string">'is'</span>+ option.gender)<span class="comment">// raymond is male</span></span><br><span class="line">  <span class="keyword">this</span>.setData(&#123;<span class="attr">option</span>: option &#125;)</span><br><span class="line">&#125;&#125;)</span><br></pre></td></tr></table></figure><h3 id="6-2-参数传递"><a href="#6-2-参数传递" class="headerlink" title="6.2 参数传递"></a>6.2 参数传递</h3><h4 id="6-2-1-小程序传递参数的方式"><a href="#6-2-1-小程序传递参数的方式" class="headerlink" title="6.2.1 小程序传递参数的方式"></a>6.2.1 小程序传递参数的方式</h4><p><strong>1、通过在<code>App.js</code>中设置全局变量</strong></p><blockquote><p>通常把不会更改的数据放在<code>app.js</code>的<code>Data</code>中，在各个页面中都可以通过<code>APP</code>实例获取<code>Data</code>数据</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = getApp();</span><br><span class="line"><span class="keyword">var</span> data = app.data;</span><br></pre></td></tr></table></figure><p><strong>2、通过拼接<code>URL</code>直接传递</strong></p><blockquote><p><code>wx.navigateTo({})</code>中<code>URL</code>携带参数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.navigateTo(&#123;</span><br><span class="line">  url: &apos;test?id=1&apos;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>在wxml中使用<code>navigator</code>跳转url传递参数</strong></p><blockquote><p>代码如下，将要传递到另一个页面的字符串testId的值赋值到url中</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;navigator class=&quot;test-item&quot; url=&quot;../../pages/test/test?testId=&#123;&#123;testData.testId&#125;&#125;&quot;&gt;&lt;/navigator&gt;</span><br></pre></td></tr></table></figure><blockquote><p>在<code>js</code>页面中<code>onLoad</code>方法中接收</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> testId = options.testId</span><br><span class="line">      <span class="built_in">console</span>.log(testId)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong><code>navigator</code>跳转<code>url</code>传递数组</strong></p><blockquote><p>如果一个页面要将一个数组，如相册列表传递到另一个页面</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;navigator class=&quot;test-item&quot; url=&quot;../../pages/test/test?albumList=&#123;&#123;testData.albumList&#125;&#125;&quot;&gt;&lt;/navigator&gt;</span><br></pre></td></tr></table></figure><blockquote><p>传递到js后从<code>options</code>中得到的是个字符串，每个图片的url通过’,’分隔，所以此时还需要对其进行处理，重新组装为数组</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">         <span class="comment">// 相册列表数据</span></span><br><span class="line">        albumList: [],</span><br><span class="line">    &#125;,    </span><br><span class="line">    onLoad: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">        that.setData(&#123;</span><br><span class="line">            albumList: options.albumList.split(<span class="string">","</span>)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>3、在wxml中绑定事件后，通过<code>data-hi=&quot;参数&quot;</code>的方式传递</strong></p><blockquote><p>这种方式一般是在wxml中绑定事件，同时设置需要传递的数据，如果需要传递多个，可以写多个<code>data-[参数]</code>的方式进行传递</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;view bindtap=&quot;clickMe&quot; data-testId=&#123;&#123;testId&#125;&#125;&quot;&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><blockquote><p>在js页面中自定义方法clickMe中接收</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">    clickMe: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> testId = event.currentTarget.dataset.testid;</span><br><span class="line">        wx.navigateTo(&#123;</span><br><span class="line">            url: <span class="string">'../../pages/test/test'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>wxml中配置data-albumlist传递数组</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;view bindtap=&quot;clickMe&quot; data-albumlist=&#123;&#123;testData.albumList&#125;&#125;&quot;&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">在js页面中自定义方法clickMe中接收</span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line">    clickMe: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> albumList = event.currentTarget.dataset.albumlist.split(<span class="string">","</span>);</span><br><span class="line">        wx.navigateTo(&#123;</span><br><span class="line">            url: <span class="string">'../../pages/test/test'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>4、通过数据缓存存储再获取</strong></p><blockquote><p><code>wx.setStorageSync(KEY,DATA)</code>存储数据</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">  wx.setStorageSync(&apos;key&apos;, &apos;value&apos;)</span><br><span class="line">&#125; catch (e) &#123;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>wx.getStorageSync(KEY)</code>获取数据</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> value = wx.getStorageSync(<span class="string">'key'</span>)</span><br><span class="line">  <span class="keyword">if</span> (value) &#123;</span><br><span class="line">    <span class="comment">// Do something with return value</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">   <span class="comment">// Do something when catch error</span></span><br><span class="line">&#125;</span><br><span class="line">或</span><br><span class="line">wx.getStorage(&#123;</span><br><span class="line">  key: <span class="string">'key'</span>,</span><br><span class="line">  success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(res.data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="七、疑问汇总"><a href="#七、疑问汇总" class="headerlink" title="七、疑问汇总"></a>七、疑问汇总</h2><p><strong>为什么脚本内不能使用window等对象</strong></p><ul><li>页面的脚本逻辑是在<code>JsCore</code>中运行，JsCore是一个没有窗口对象的环境，所以不能在脚本中使用<code>window</code>，也无法在脚本中操作组件</li></ul><p><strong>为什么 zepto/jquery 无法使用</strong></p><ul><li><code>zepto/jquery</code> 会使用到<code>window</code>对象和<code>document</code>对象，所以无法使用</li></ul><p><strong>wx.navigateTo无法打开页面</strong></p><ul><li>一个应用同时只能打开5个页面，当已经打开了5个页面之后，<code>wx.navigateTo</code>不能正常打开新页面。请避免多层级的交互方式，或者使用<code>wx.redirectTo</code></li></ul><p><strong>样式表不支持级联选择器</strong></p><ul><li><code>WXSS</code>支持以<code>.</code>开始的类选择器</li></ul><p><strong>本地资源无法通过 css 获取</strong></p><ul><li><code>background-image</code>：可以使用网络图片，或者 <code>base64</code>，或者使用<code>&lt;image/&gt;</code>标签</li></ul><p><strong>如何修改窗口的背景色</strong></p><ul><li>使用 page 标签选择器，可以修改顶层节点的样式</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">page</span> &#123; </span><br><span class="line">  <span class="attribute">display</span>: block; </span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100%</span>; </span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>为什么上传不成功</strong></p><ul><li>为了提升体验流畅度，编译后的代码包大小需小于 1MB ，大于 1MB 的代码包将上传失败</li></ul><p><strong>HTTPS 请求不成功</strong></p><ul><li>tls 仅支持 1.2 及以上版本</li></ul><p><strong>微信小程序支持fetch或者promise吗?</strong></p><ul><li><code>promise</code>工具目前不支持，<code>fetch</code> 客户端不支持 工具下个版本保持统一</li></ul><p><strong>wx.request的POST方法的参数传输服务器接收不到的bug</strong></p><ul><li><code>wx.request post</code> 的 <code>content-type</code> 默认为 <code>‘application/json &#39;</code></li><li>如果服务器没有用到 <code>json</code> 解释的话，可以把 <code>content-type</code> 设置回 <code>urlencoded</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wx.request(&#123;</span><br><span class="line">....</span><br><span class="line">method: <span class="string">"POST"</span>,</span><br><span class="line">header: &#123;</span><br><span class="line"><span class="string">"content-type"</span>: <span class="string">"application/x-www-form-urlencoded"</span></span><br><span class="line">&#125;,</span><br><span class="line">...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>wx.uploadFile在手机上返回http码403</strong></p><ul><li>安卓的微信升级到6.5.2及其以上版本</li></ul><p><strong>小程序SVG支持吗?</strong></p><ul><li><code>image</code>的src放远程svg可以，<code>background-image</code>里也可以</li></ul><p><strong>ipad不能使用小程序？</strong></p><ul><li>暂时不支持ipad打开小程序</li></ul><p><strong>请问小程序页内支持长按保存图片或分享图片吗？</strong></p><ul><li>目前没有这个功能</li></ul><p><strong>微信小程序不支持cookie</strong></p><ul><li>使用<code>Reids</code>存储<code>session</code></li></ul><p><strong>有些手机不支持Object.assign方法，如果使用了该方法会出现莫名其妙的报错（并不会提示Object.assign is not function，而是导致调用了Object.assign方法的方法不能被调用）！</strong></p><blockquote><p>直接写一个合并对象的方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">assignObject</span>(<span class="params">o, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n.hasOwnProperty(p) &amp;&amp; (!o.hasOwnProperty(p)))</span><br><span class="line">            o[p] = n[p];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="八、小程序组件"><a href="#八、小程序组件" class="headerlink" title="八、小程序组件"></a>八、小程序组件</h2><p> <img src="https://upload-images.jianshu.io/upload_images/1480597-62a5f00053f5f0d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、小程序代码组成&quot;&gt;&lt;a href=&quot;#一、小程序代码组成&quot; class=&quot;headerlink&quot; title=&quot;一、小程序代码组成&quot;&gt;&lt;/a&gt;一、小程序代码组成&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="小程序" scheme="http://blog.poetries.top/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>React之组件通信方式</title>
    <link href="http://blog.poetries.top/2018/07/29/react-comp-communicate/"/>
    <id>http://blog.poetries.top/2018/07/29/react-comp-communicate/</id>
    <published>2018-07-29T15:20:24.000Z</published>
    <updated>2018-08-27T04:06:20.126Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/1480597-e9f0c8c8e859eed9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="组件通信"></p><blockquote><p>组件之进行通信的几种情况</p></blockquote><ul><li>父组件向子组件通信</li><li>子组件向父组件通信</li><li>跨级组件通信</li><li>没有嵌套关系组件之间的通信</li></ul><h2 id="一、父组件向子组件通信"><a href="#一、父组件向子组件通信" class="headerlink" title="一、父组件向子组件通信"></a>一、父组件向子组件通信</h2><blockquote><p><code>React</code>数据流动是单向的,父组件向子组件通信也是最常见的;父组件通过<code>props</code>向子组件传递需要的信息</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Child.jsx</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">&#123; name &#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Child.propTypes = &#123;</span><br><span class="line">    name: PropTypes.string.isRequired,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Parent.jsx</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">'./Child'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;Child name=<span class="string">"Sara"</span> /&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Parent;</span></span><br></pre></td></tr></table></figure><h2 id="二、子组件向父组件通信"><a href="#二、子组件向父组件通信" class="headerlink" title="二、子组件向父组件通信"></a>二、子组件向父组件通信</h2><ul><li>利用回调函数</li><li>利用自定义事件机制</li></ul><blockquote><p>实现在子组件中点击隐藏组件按钮可以将自身隐藏的功能</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List3</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">        hideConponent: PropTypes.func.isRequired,</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                哈哈,我是List3</span><br><span class="line">                &lt;button onClick=&#123;<span class="keyword">this</span>.props.hideConponent&#125;&gt;隐藏List3组件&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> List3;</span><br><span class="line"></span><br><span class="line"><span class="comment">//app.jsx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> List3 <span class="keyword">from</span> <span class="string">'./components/List3'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(...args) &#123;</span><br><span class="line">        <span class="keyword">super</span>(...args);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            isShowList3: <span class="literal">false</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    showConponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            isShowList3: <span class="literal">true</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    hideConponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            isShowList3: <span class="literal">false</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;button onClick=&#123;<span class="keyword">this</span>.showConponent&#125;&gt;显示Lists组件&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">                &#123;</span></span><br><span class="line"><span class="regexp">                    this.state.isShowList3 ?</span></span><br><span class="line"><span class="regexp">                        &lt;List3 hideConponent=&#123;this.hideConponent&#125; /</span>&gt;</span><br><span class="line">                    :</span><br><span class="line">                    <span class="literal">null</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="三、跨级组件通信"><a href="#三、跨级组件通信" class="headerlink" title="三、跨级组件通信"></a>三、跨级组件通信</h2><p><strong>层层组件传递props</strong></p><blockquote><p>例如A组件和B组件之间要进行通信,先找到A和B公共的父组件,A先向C组件通信,C组件通过props和B组件通信,此时C组件起的就是中间件的作用</p></blockquote><p><strong>使用context</strong></p><ul><li>context是一个全局变量,像是一个大容器,在任何地方都可以访问到,我们可以把要通信的信息放在context上,然后在其他组件中可以随意取到</li><li>但是React官方不建议使用大量context,尽管他可以减少逐层传递,但是当组件结构复杂的时候,我们并不知道context是从哪里传过来的;而且context是一个全局变量,全局变量正是导致应用走向混乱的罪魁祸首</li></ul><blockquote><p>下面例子中的组件关系: ListItem是List的子组件,List是app的子组件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ListItem.jsx</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListItem</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 子组件声明自己要使用context</span></span><br><span class="line">    <span class="keyword">static</span> contextTypes = &#123;</span><br><span class="line">        color: PropTypes.string,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">        value: PropTypes.string,</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; value &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;li style=&#123;&#123; <span class="attr">background</span>: <span class="keyword">this</span>.context.color &#125;&#125;&gt;</span><br><span class="line">                &lt;span&gt;&#123;value&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>li&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ListItem;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// List.jsx</span></span><br><span class="line"><span class="keyword">import</span> ListItem <span class="keyword">from</span> <span class="string">'./ListItem'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 父组件声明自己支持context</span></span><br><span class="line">    <span class="keyword">static</span> childContextTypes = &#123;</span><br><span class="line">        color: PropTypes.string,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">        list: PropTypes.array,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 提供一个函数,用来返回相应的context对象</span></span><br><span class="line">    getChildContext() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            color: <span class="string">'red'</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; list &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        list.map(<span class="function">(<span class="params">entry, index</span>) =&gt;</span></span><br><span class="line">                            &lt;ListItem key=&#123;<span class="string">`list-<span class="subst">$&#123;index&#125;</span>`</span>&#125; value=&#123;entry.text&#125; /&gt;,</span><br><span class="line">                       )</span><br><span class="line">                    &#125;</span><br><span class="line">                &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// App.jsx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">'./components/List'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> list = [</span><br><span class="line">    &#123;</span><br><span class="line">        text: <span class="string">'题目一'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        text: <span class="string">'题目二'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;List</span><br><span class="line">                    list=&#123;list&#125;</span><br><span class="line">                /&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="四、没有嵌套关系的组件通信"><a href="#四、没有嵌套关系的组件通信" class="headerlink" title="四、没有嵌套关系的组件通信"></a>四、没有嵌套关系的组件通信</h2><p><strong>使用自定义事件机制</strong></p><ul><li>在<code>componentDidMount</code>事件中,如果组件挂载完成,再订阅事件;在组件卸载的时候,在<code>componentWillUnmount</code>事件中取消事件的订阅;</li><li>以常用的发布/订阅模式举例,借用<code>Node.js Events</code>模块的浏览器版实现</li></ul><blockquote><p>下面例子中的组件关系: List1和List2没有任何嵌套关系,App是他们的父组件</p></blockquote><p>实现这样一个功能: 点击List2中的一个按钮,改变List1中的信息显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install events --save</span><br></pre></td></tr></table></figure><blockquote><p>在src下新建一个util目录里面建一个events.js</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#123; EventEmitter &#125; from &apos;events&apos;;</span><br><span class="line"></span><br><span class="line">export default new EventEmitter();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// List.jsx</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            message: <span class="string">'List1'</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        <span class="comment">// 组件装载完成以后声明一个自定义事件</span></span><br><span class="line">        <span class="keyword">this</span>.eventEmitter = emitter.addListener(<span class="string">'changeMessage'</span>, (message) =&gt; &#123;</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                message,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    componentWillUnmount() &#123;</span><br><span class="line">        emitter.removeListener(<span class="keyword">this</span>.eventEmitter);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &#123;<span class="keyword">this</span>.state.message&#125;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default List;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/List2.jsx</span></span><br><span class="line"><span class="regexp">import React, &#123; Component &#125; from 'react';</span></span><br><span class="line"><span class="regexp">import emitter from '../u</span>til/events<span class="string">';</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class List2 extends Component &#123;</span></span><br><span class="line"><span class="string">    handleClick = (message) =&gt; &#123;</span></span><br><span class="line"><span class="string">        emitter.emit('</span>changeMessage<span class="string">', message);</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string">    render() &#123;</span></span><br><span class="line"><span class="string">        return (</span></span><br><span class="line"><span class="string">            &lt;div&gt;</span></span><br><span class="line"><span class="string">                &lt;button onClick=&#123;this.handleClick.bind(this, '</span>List2<span class="string">')&#125;&gt;点击我改变List1组件中显示信息&lt;/button&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">        );</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// APP.jsx</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">import React, &#123; Component &#125; from '</span>react<span class="string">';</span></span><br><span class="line"><span class="string">import List1 from '</span>./components/List1<span class="string">';</span></span><br><span class="line"><span class="string">import List2 from '</span>./components/List2<span class="string">';</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default class App extends Component &#123;</span></span><br><span class="line"><span class="string">    render() &#123;</span></span><br><span class="line"><span class="string">        return (</span></span><br><span class="line"><span class="string">            &lt;div&gt;</span></span><br><span class="line"><span class="string">                &lt;List1 /&gt;</span></span><br><span class="line"><span class="string">                &lt;List2 /&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">        );</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>自定义事件是典型的发布订阅模式,通过向事件对象上添加监听器和触发事件来实现组件之间的通信</p></blockquote><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><ul><li>父组件向子组件通信: <code>props</code></li><li>子组件向父组件通信: 回调函数/自定义事件</li><li>跨级组件通信: 层层组件传递<code>props/context</code></li><li>没有嵌套关系组件之间的通信: 自定义事件</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1480597-e9f0c8c8e859eed9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="react" scheme="http://blog.poetries.top/tags/react/"/>
    
      <category term="组件通信" scheme="http://blog.poetries.top/tags/%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>React之context</title>
    <link href="http://blog.poetries.top/2018/07/23/react-context/"/>
    <id>http://blog.poetries.top/2018/07/23/react-context/</id>
    <published>2018-07-23T01:50:12.000Z</published>
    <updated>2018-08-27T04:06:20.126Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li><code>React</code> 组件之间的通信是基于 <code>props</code> 的单向数据流，即父组件通过 <code>props</code> 向子组件传值，亦或是子组件执行传入的函数来更新父组件的<code>state</code>，这都满足了我们大部分的使用场景</li><li>一般地，对于兄弟组件之间的通信，是通过它们共同的祖先组件进行的，即 Lifting State Up，官方文档也有介绍。组件一通过事件将状态变更通知它们共同的祖先组件，祖先组再将状态同步到组件二</li><li>但是，如果组件之间嵌套的比较深，即使提升状态到共同父组件，再同步状态到相应的组件还是需要一层一层的传递下去，可能会比较繁琐</li><li>在对应的场景中，<code>context</code> 就可以缩短父组件到子组件的属性传递路径</li></ul><h2 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Parent <span class="keyword">from</span> <span class="string">'./Parent'</span></span><br><span class="line"><span class="keyword">import</span> ChildOne <span class="keyword">from</span> <span class="string">'../components/ChildOne'</span></span><br><span class="line"><span class="keyword">import</span> ChildTwo <span class="keyword">from</span> <span class="string">'../components/ChildTwo'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Container</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123; <span class="attr">value</span>: <span class="string">''</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    changeValue = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123; value &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getChildContext() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            value: <span class="keyword">this</span>.state.value,</span><br><span class="line">            changeValue: <span class="keyword">this</span>.changeValue</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;Parent&gt;</span><br><span class="line">                    &lt;ChildOne /&gt;</span><br><span class="line">                &lt;<span class="regexp">/Parent&gt;</span></span><br><span class="line"><span class="regexp">                &lt;Parent&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;ChildTwo /</span>&gt;</span><br><span class="line">                &lt;<span class="regexp">/Parent&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Container.childContextTypes = &#123;</span><br><span class="line">    value: PropTypes.string,</span><br><span class="line">    changeValue: PropTypes.func</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Parent.jsx</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Parent = <span class="function">(<span class="params">props</span>) =&gt;</span> (</span><br><span class="line">    &lt;div &#123;...props&#125; /&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Parent</span><br></pre></td></tr></table></figure><p>ChildOne.jsx</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">ChildOne</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    handleChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; changeValue &#125; = <span class="keyword">this</span>.context</span><br><span class="line">        changeValue(e.target.value)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                子组件一</span><br><span class="line">                &lt;input onChange=&#123;<span class="keyword">this</span>.handleChange&#125; /&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ChildOne.contextTypes = &#123;</span></span><br><span class="line"><span class="regexp">    changeValue: PropTypes.func</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>ChildTwo.jsx</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">ChildTwo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                子组件二</span><br><span class="line">                &lt;p&gt;&#123;<span class="keyword">this</span>.context.value&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ChildTwo.contextTypes = &#123;</span><br><span class="line">    value: PropTypes.string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在 <code>Container.childContextTypes</code> 中进行接口的声明，通过 <code>getChildContext</code> 返回更新后的<code>state</code>，在 <code>Child.contextTypes</code> 中声明要获取的接口，这样在子组件内部就能通过 <code>this.context</code> 获取到。通过 <code>Context</code> 这样一个中间对象，<code>ChildOne</code> 和 <code>ChildTwo</code> 就可以相互通信了</p></blockquote><h2 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h2><blockquote><p>组件嵌套传递属性，在导航里面引用<code>Page</code>中的变量</p></blockquote><ul><li>使用<code>context</code>来传递</li><li>使用props层级传递</li></ul><blockquote><p>使用<code>context</code>组件需要定义<code>propTypes</code>,需要严格校验、声明类型、字段</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Page</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> childContextTypes = &#123;</span><br><span class="line">       user:PropTypes.string</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;<span class="attr">user</span>:<span class="string">'poetries'</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    getChildContext()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.state</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">          &lt;div&gt;</span><br><span class="line">            &lt;p&gt;我是&#123;<span class="keyword">this</span>.state.user&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">            &lt;Siderbar /</span>&gt;</span><br><span class="line">          &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class Siderbar extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">    static childContextTypes = &#123;</span></span><br><span class="line"><span class="regexp">       user:PropTypes.string</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    render()&#123;</span></span><br><span class="line"><span class="regexp">        return (</span></span><br><span class="line"><span class="regexp">          &lt;div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;p&gt;侧边栏&lt;/</span>p&gt;</span><br><span class="line">            &lt;Navbar /&gt;</span><br><span class="line">          &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">class Navbar extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">    static childContextTypes = &#123;</span></span><br><span class="line"><span class="regexp">       user:PropTypes.string</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    render()&#123;</span></span><br><span class="line"><span class="regexp">        return (</span></span><br><span class="line"><span class="regexp">          &lt;div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;p&gt;我是&#123;this.context.user&#125;的导航栏&lt;/</span>p&gt;</span><br><span class="line">            &lt;Siderbar /&gt;</span><br><span class="line">          &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="context在Provider种应用"><a href="#context在Provider种应用" class="headerlink" title="context在Provider种应用"></a>context在Provider种应用</h2><blockquote><p><code>provider</code>组件就是使用<code>context</code>，把<code>store</code>放到<code>context</code>里，所有的子元素可以直接取到<code>store</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Provider</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> childContextTypes = &#123;</span><br><span class="line">        store:Protypes.object</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constructor</span>(props,context)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props,context)</span><br><span class="line">        <span class="keyword">this</span>.store = props.store</span><br><span class="line">    &#125;</span><br><span class="line">    getChildContext()&#123;</span><br><span class="line">        <span class="comment">//把传进来的store放进全局</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">store</span>:<span class="keyword">this</span>.store&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.props.children</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>connect</code> 负责连接组件，给到<code>redux</code>里的数据放到组件的属性里</p></blockquote><ul><li>负责接收一个组件，把<code>state</code>里的一些数据放进去，返回一个组件</li><li>数据变化的时候，能够通知组件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//高阶组件写法</span></span><br><span class="line"><span class="keyword">const</span> connect = <span class="function">(<span class="params">mapStateToProps=state=&gt;state,mapDispatchToProps=&#123;&#125;</span>)=&gt;</span><span class="function">(<span class="params">wrapperComponent</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="comment">//负责接收组件</span></span><br><span class="line">        <span class="keyword">static</span> contextTypes = &#123;</span><br><span class="line">            store:PropTypes.obejct</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">            <span class="keyword">super</span>(props, context)&#123;</span><br><span class="line">                <span class="keyword">this</span>.state = &#123;</span><br><span class="line">                    props:&#123;&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        componentDidMount()&#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;store&#125; = <span class="keyword">this</span>.context</span><br><span class="line">            store.subscribe(<span class="function"><span class="params">()</span>=&gt;</span><span class="keyword">this</span>.update())</span><br><span class="line">            <span class="keyword">this</span>.update()</span><br><span class="line">        &#125;</span><br><span class="line">        update()&#123;</span><br><span class="line">            <span class="comment">//  获取mapStateToProps、mapDispatchToProps 放入this.props里</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">const</span> &#123;store&#125;=<span class="keyword">this</span>.context</span><br><span class="line">            <span class="keyword">const</span> stateProps = mapStateToProps(store.getState())</span><br><span class="line">            <span class="keyword">const</span> dispatchProps = bindActionCreators(mapDispatchProps,store.dispatch)</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                props:&#123;</span><br><span class="line">                    ...this.state.props,</span><br><span class="line">                    ...stateProps,</span><br><span class="line">                    ...dispatchProps</span><br><span class="line">                 &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        render()&#123;</span><br><span class="line">            <span class="comment">// 把数据放入</span></span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">wrapperComponent</span> &#123;<span class="attr">...this.state.props</span>&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;React&lt;/code&gt; 组件之间的通信是基于 &lt;code&gt;props&lt;/code&gt; 的单向数据流，即父组件通过 &lt;
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="react" scheme="http://blog.poetries.top/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>实现一个迷你版的redux</title>
    <link href="http://blog.poetries.top/2018/07/23/react-redux/"/>
    <id>http://blog.poetries.top/2018/07/23/react-redux/</id>
    <published>2018-07-23T01:20:24.000Z</published>
    <updated>2018-08-27T04:06:20.126Z</updated>
    
    <content type="html"><![CDATA[<h3 id="迷你版redux实现"><a href="#迷你版redux实现" class="headerlink" title="迷你版redux实现"></a>迷你版redux实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createStore = <span class="function">(<span class="params">reducer,enhancer</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(enhancer) &#123;</span><br><span class="line"><span class="keyword">return</span> enhancer(createStore)(reducer)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> currentState = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> currentListeners = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getState = <span class="function"><span class="params">()</span>=&gt;</span>currentState</span><br><span class="line"><span class="keyword">const</span> subscribe = <span class="function">(<span class="params">listener</span>)=&gt;</span>&#123;</span><br><span class="line">currentListeners.push(listener)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> dispatch = <span class="function"><span class="params">action</span>=&gt;</span>&#123;</span><br><span class="line">currentState = reducer(currentState, action)</span><br><span class="line">currentListeners.forEach(<span class="function"><span class="params">v</span>=&gt;</span>v())</span><br><span class="line"><span class="keyword">return</span> action</span><br><span class="line">&#125;</span><br><span class="line">dispatch(&#123;<span class="attr">type</span>:<span class="string">'@@INIT'</span>&#125;)</span><br><span class="line"><span class="keyword">return</span> &#123;getState,subscribe,dispatch&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中间件实现</span></span><br><span class="line"><span class="keyword">export</span> applyMiddleWare(...middlewares)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="params">createStore</span>=&gt;</span>...args=&gt;&#123;</span><br><span class="line"><span class="keyword">const</span> store = createStore(...args)</span><br><span class="line"><span class="keyword">let</span> dispatch = store.dispatch</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> midApi = &#123;</span><br><span class="line">getState:store.getState,</span><br><span class="line">dispatch:...args=&gt;dispatch(...args)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> middlewaresChain = middlewares.map(<span class="function"><span class="params">middleware</span>=&gt;</span>middleware(midApi))</span><br><span class="line">dispatch = compose(...middlewaresChain)(store.dispatch)</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">...store,</span><br><span class="line">dispatch</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fn1(fn2(fn3())) 把函数嵌套依次调用</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">...funcs</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(funcs.length===<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="params">arg</span>=&gt;</span>arg</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(funs.length===<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> funs[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> funcs.reduce(<span class="function">(<span class="params">ret,item</span>)=&gt;</span><span class="function">(<span class="params">...args</span>)=&gt;</span>ret(item(...args)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//bindActionCreator实现</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindActionCreator</span>(<span class="params">creator,dispatch</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ...args=&gt;dispatch(creator(...args))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindActionCreators</span>(<span class="params">creators,didpatch</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//let bound = &#123;&#125;</span></span><br><span class="line">    <span class="comment">//Object.keys(creators).forEach(v=&gt;&#123;</span></span><br><span class="line">   <span class="comment">//     let creator = creator[v]</span></span><br><span class="line">     <span class="comment">//   bound[v] = bindActionCreator(creator,dispatch)</span></span><br><span class="line">    <span class="comment">//&#125;)</span></span><br><span class="line">    <span class="comment">//return bound</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(creators).reduce(<span class="function">(<span class="params">ret,item</span>)=&gt;</span>&#123;</span><br><span class="line">    ret[item] = bindActionCreator(creators[item],dispatch)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">    &#125;,&#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="react-redux实现"><a href="#react-redux实现" class="headerlink" title="react-redux实现"></a>react-redux实现</h3><blockquote><p>例子 provider组件就是使用context，把store放到context里，所有的子元素可以直接取到store</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Provider</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> childContextTypes = &#123;</span><br><span class="line">        store:Protypes.object</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constructor</span>(props,context)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props,context)</span><br><span class="line">        <span class="keyword">this</span>.store = props.store</span><br><span class="line">    &#125;</span><br><span class="line">    getChildContext()&#123;</span><br><span class="line">        <span class="comment">//把传进来的store放进全局</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">store</span>:<span class="keyword">this</span>.store&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.props.children</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>connect</code> 负责连接组件，给到<code>redux</code>里的数据放到组件的属性里</p></blockquote><ul><li>负责接收一个组件，把<code>state里</code>的一些数据放进去，返回一个组件</li><li>数据变化的时候，能够通知组件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//高阶组件写法</span></span><br><span class="line"><span class="keyword">const</span> connect = <span class="function">(<span class="params">mapStateToProps=state=&gt;state,mapDispatchToProps=&#123;&#125;</span>)=&gt;</span><span class="function">(<span class="params">wrapperComponent</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="comment">//负责接收组件</span></span><br><span class="line">        <span class="keyword">static</span> contextTypes = &#123;</span><br><span class="line">            store:PropTypes.obejct</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">            <span class="keyword">super</span>(props, context)&#123;</span><br><span class="line">                <span class="keyword">this</span>.state = &#123;</span><br><span class="line">                    props:&#123;&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        componentDidMount()&#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;store&#125; = <span class="keyword">this</span>.context</span><br><span class="line">            store.subscribe(<span class="function"><span class="params">()</span>=&gt;</span><span class="keyword">this</span>.update())</span><br><span class="line">            <span class="keyword">this</span>.update()</span><br><span class="line">        &#125;</span><br><span class="line">        update()&#123;</span><br><span class="line">            <span class="comment">//  获取mapStateToProps、mapDispatchToProps 放入this.props里</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">const</span> &#123;store&#125;=<span class="keyword">this</span>.context</span><br><span class="line">            <span class="keyword">const</span> stateProps = mapStateToProps(store.getState())</span><br><span class="line">            <span class="keyword">const</span> dispatchProps = bindActionCreators(mapDispatchProps,store.dispatch)</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                props:&#123;</span><br><span class="line">                    ...this.state.props,</span><br><span class="line">                    ...stateProps,</span><br><span class="line">                    ...dispatchProps</span><br><span class="line">                 &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        render()&#123;</span><br><span class="line">            <span class="comment">// 把数据放入</span></span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">wrapperComponent</span> &#123;<span class="attr">...this.state.props</span>&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>自己造一个中间件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> thunk = <span class="function">(<span class="params">&#123;dispatch,getState&#125;</span>)=&gt;</span><span class="function"><span class="params">next</span>=&gt;</span><span class="function"><span class="params">action</span>=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> action == <span class="string">'function'</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> action(dispatch,getState)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">Array</span>.isArray(action)&#123;</span><br><span class="line"><span class="keyword">return</span> action.forEach(<span class="function"><span class="params">v</span>=&gt;</span>dispatch(v))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//默认 什么都不做</span></span><br><span class="line"><span class="keyword">return</span> next(action)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;迷你版redux实现&quot;&gt;&lt;a href=&quot;#迷你版redux实现&quot; class=&quot;headerlink&quot; title=&quot;迷你版redux实现&quot;&gt;&lt;/a&gt;迷你版redux实现&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;tab
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="react" scheme="http://blog.poetries.top/tags/react/"/>
    
  </entry>
  
</feed>
